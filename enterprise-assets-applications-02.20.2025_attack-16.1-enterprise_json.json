{
    "metadata": {
        "mapping_version": "1.0",
        "technology_domain": "enterprise",
        "attack_version": "16.1",
        "mapping_framework": "enterprise-asset-types-applications",
        "mapping_framework_version": "1.0",
        "author": null,
        "contact": null,
        "organization": null,
        "creation_date": "02/16/2025",
        "last_update": "20/02/2025",
        "mapping_types": {
            "targeted-by": {
                "name": "targeted-by",
                "description": "Techniques directly used to attack the asset."
            },
            "abused-by": {
                "name": "abused-by",
                "description": "Techniques that leverage the asset for malicious activities."
            }
        },
        "capability_groups": {
            "Applications & Workloads": "Applications & Workloads"
        }
    },
    "mapping_objects": [
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053.005",
            "attack_object_name": "Scheduled Task",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Scheduled Task technique does not directly target web applications, it can be abused in scenarios where a web application server runs on a Windows operating system. An adversary could leverage scheduled tasks to maintain persistence or execute malicious code on the server hosting the web application, thereby indirectly affecting the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1205.002",
            "attack_object_name": "Socket Filters",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Socket Filters' technique if they are used as a conduit for network traffic that is monitored or manipulated by socket filters. For example, if a web application is used to send or receive network packets that match the filter criteria, it can be leveraged as a tool for adversaries to trigger backdoors or command shells on the host system. This makes the web application an indirect participant in the attack, as it facilitates the network communication that the socket filters are designed to intercept or manipulate."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1560.001",
            "attack_object_name": "Archive via Utility",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Archive via Utility' technique when adversaries use the application to stage data for exfiltration. For example, if a web application is compromised, it could be used to collect and compress data using utilities before exfiltration, leveraging the web application as a tool for data staging and exfiltration."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1021.005",
            "attack_object_name": "VNC",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused by the VNC technique if an adversary uses VNC to remotely control a system that hosts or interacts with the web application. This could allow the adversary to manipulate the web application indirectly, such as by altering its configuration, accessing sensitive data, or using it as a pivot point for further attacks within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.011",
            "attack_object_name": "Fileless Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Fileless Storage technique to store malicious payloads or data in a fileless manner. This can be part of a broader attack strategy where the web application is leveraged to execute or deliver fileless payloads, potentially aiding in persistence or data staging without leaving traditional file-based traces that are easily detectable."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1557",
            "attack_object_name": "Adversary-in-the-Middle",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Adversary-in-the-Middle technique as they often rely on network communications that can be intercepted and manipulated. Adversaries can position themselves between the web application and its users or other services to intercept data, manipulate traffic, or steal session tokens and cookies, leveraging the web application as a tool to further their attack objectives."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1033",
            "attack_object_name": "System Owner/User Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of the System Owner/User Discovery process if they are used to access or display user information. For example, if a web application exposes user account details or session information through its interface or logs, adversaries could leverage this to discover system users. Therefore, while the web application is not directly targeted, it can be misused to facilitate the discovery of user information."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583",
            "attack_object_name": "Acquire Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of the 'Acquire Infrastructure' technique if they are used as part of the infrastructure acquired by adversaries. For example, compromised web applications can be leveraged to host malicious content or serve as a command and control server, thus being misused as part of the adversary's infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1613",
            "attack_object_name": "Container and Resource Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, such as the Kubernetes dashboard, can be abused by adversaries using the 'Container and Resource Discovery' technique to query and discover containers and other resources. This misuse allows adversaries to gather information about the environment, which can aid in further attacks, such as lateral movement or execution methods."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved when adversaries use serverless infrastructure to proxy traffic or hide command and control activities. While the web application itself is not the direct victim, it can be used as a tool or stepping stone in the adversary's broader strategy to obfuscate their activities and evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1132.001",
            "attack_object_name": "Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Standard Encoding technique (T1132.001) when adversaries use the application as a channel to send encoded command and control traffic. This misuse allows adversaries to conceal their communications within the normal traffic of the web application, leveraging it as a tool for evasion and persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.009",
            "attack_object_name": "Embedded Payloads",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Embedded Payloads' technique when adversaries deliver files with embedded payloads through the application. For example, a web application could be used to distribute or host files that contain embedded malicious payloads, thereby leveraging the web application as a means to execute an attack on users or other systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1556.003",
            "attack_object_name": "Pluggable Authentication Modules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not directly targeted by the PAM technique, they can be indirectly affected if the underlying server hosting the web application uses PAM for authentication. An adversary could modify PAM modules on the server to gain unauthorized access, which could then be used to compromise the web application indirectly, such as by stealing credentials or escalating privileges."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1592",
            "attack_object_name": "Gather Victim Host Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Gather Victim Host Information' technique to collect information about the users interacting with the web application. This can include gathering data from User-Agent HTTP headers or other metadata to inform further attacks or reconnaissance activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1596.003",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications often use digital certificates for HTTPS communications. Adversaries may abuse this asset type by gathering information from these certificates to aid in further attacks, such as reconnaissance or establishing trust in phishing campaigns. Thus, web applications can be indirectly involved in this technique as a source of certificate data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1056.001",
            "attack_object_name": "Keylogging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by keylogging techniques if adversaries use them to capture credentials or sensitive information entered by users. For example, if a web application is compromised, attackers may inject scripts or use other methods to log keystrokes entered into the application, thereby abusing the web application as a means to capture user input."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1564.012",
            "attack_object_name": "File/Path Exclusions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'File/Path Exclusions' if adversaries leverage the web application's file upload or storage capabilities to place malicious files in directories that are excluded from security scans. This misuse allows adversaries to hide their activities and maintain persistence within the network by exploiting the web application's functionality to bypass security controls."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1222.002",
            "attack_object_name": "Linux and Mac File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications hosted on Linux or Mac servers could be indirectly affected by this technique if an adversary modifies file or directory permissions to gain unauthorized access or control over the web application's files. This could be used as a stepping stone to further attacks, such as altering web application behavior or accessing sensitive data managed by the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1110.001",
            "attack_object_name": "Password Guessing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often have login interfaces that can be directly targeted by password guessing attacks. Adversaries may attempt to gain unauthorized access to user accounts by systematically guessing passwords through the web application's authentication mechanism."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1216.001",
            "attack_object_name": "PubPrn",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the PubPrn technique when adversaries host malicious scriptlet files (.sct) on a web server. The web application serves as a delivery mechanism for these malicious files, which are then executed via the PubPrn script on a victim's machine. This indirect use of web applications makes them a tool for facilitating the attack rather than the primary target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1597.002",
            "attack_object_name": "Purchase Technical Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly abused by the 'Purchase Technical Data' technique if adversaries acquire information that helps them identify vulnerabilities or weaknesses in the web application. This information can then be used to plan further attacks or exploitation of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1003",
            "attack_object_name": "OS Credential Dumping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as a stepping stone for OS Credential Dumping if they are compromised and provide access to the underlying operating system or network. Adversaries might exploit vulnerabilities in a web application to gain access to the server's OS, where they can then perform credential dumping."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1129",
            "attack_object_name": "Shared Modules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Shared Modules technique (T1129) as part of a broader attack strategy. For example, if a web application server is compromised, adversaries might use shared modules to execute malicious payloads on the server, leveraging the web application as a stepping stone to further their attack objectives, such as persistence or lateral movement within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1602",
            "attack_object_name": "Data from Configuration Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications may be abused in the context of this technique if they are used to interact with or manage configuration repositories. For instance, if a web application provides an interface to a configuration repository, it could be leveraged by adversaries to access sensitive configuration data, thereby abusing the web application as a tool to achieve their objectives."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1498.001",
            "attack_object_name": "Direct Network Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by Direct Network Flood attacks as they are often hosted on network-accessible servers. The high volume of network traffic generated by such attacks can overwhelm the web application's server, leading to a denial of service, thus compromising the availability and functionality of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1492",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications often store data in databases or other storage systems. The Stored Data Manipulation technique can directly target these stored data components of a web application to manipulate data at rest, potentially affecting business processes or outcomes. This makes the web application a primary victim of such attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.007",
            "attack_object_name": "Path Interception by PATH Environment Variable",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by this technique if they rely on server-side scripts or binaries that are executed based on environment variables. An adversary could manipulate the PATH environment variable on the server hosting the web application to execute malicious binaries, thereby using the web application as a stepping stone to compromise the server or other connected systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1213.002",
            "attack_object_name": "Sharepoint",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, such as SharePoint, can be abused by adversaries to access and mine valuable information. In this context, the web application is used as a tool to further an attack by providing access to sensitive information stored within it. This makes the web application a means to execute an attack on another asset, such as the internal network or systems, by leveraging the information gathered."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1044",
            "attack_object_name": "File System Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly abused by the 'File System Permissions Weakness' technique if they are deployed on servers with improperly configured file system permissions. An attacker could exploit these weaknesses to replace legitimate binaries with malicious ones, potentially affecting the web application's execution environment. This could lead to privilege escalation or persistence on the server hosting the web application, thereby abusing the web application as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1588.007",
            "attack_object_name": "Artificial Intelligence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using AI tools to automate and enhance malicious activities such as crafting phishing content or creating scripts for exploitation. While the web application itself is not the direct target, it can be a medium through which AI-enhanced attacks are executed, such as distributing malicious scripts or hosting phishing pages."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1491.002",
            "attack_object_name": "External Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are directly targeted by the External Defacement technique. Adversaries exploit vulnerabilities in web applications to alter their appearance or content, often to deliver a message, intimidate, or mislead users. This attack compromises the integrity and trustworthiness of the web application, making it a primary victim of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.013",
            "attack_object_name": "Encrypted/Encoded File",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Encrypted/Encoded File' technique as a means to deliver obfuscated malicious payloads. For instance, a web application could be used to host or distribute encoded files that contain malware, which are then decoded and executed on the client side. This technique leverages the web application as a tool to facilitate the delivery and execution of malicious content."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1590.005",
            "attack_object_name": "IP Addresses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in the technique T1590.005 (IP Addresses) as they often have associated IP addresses that adversaries may gather to understand the network infrastructure. This information can be used as a stepping stone for further attacks, such as identifying entry points or planning lateral movement."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1499.001",
            "attack_object_name": "OS Exhaustion Flood",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly affected by OS Exhaustion Flood attacks because the server hosting the web application may become unresponsive or sluggish due to the attack. In this context, the web application is abused as it becomes unavailable or degraded as a result of the server's OS being overwhelmed, thus impacting the service provided by the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are often targeted by adversaries using JavaScript to exploit vulnerabilities such as cross-site scripting (XSS) or to execute malicious scripts directly within the web application context. This can lead to unauthorized access, data theft, or further compromise of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "JavaScript can be abused within web applications to facilitate attacks such as drive-by downloads or to execute obfuscated scripts that assist in lateral movement or persistence. The web application serves as a platform for executing these scripts, which can be used to attack other assets or systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1590.002",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The DNS technique (T1590.002) can be used to abuse a web application by gathering DNS information that may reveal details about the application's infrastructure, such as subdomains, mail servers, and third-party services. This information can be leveraged to facilitate further attacks or reconnaissance activities against the web application or its associated infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1543",
            "attack_object_name": "Create or Modify System Process",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries to gain initial access or escalate privileges on a system. Once access is gained, adversaries may use techniques like 'Create or Modify System Process' to establish persistence on the host system where the web application is running. The web application serves as a stepping stone for further attacks on the underlying system processes."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1133",
            "attack_object_name": "External Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'External Remote Services' technique as a means to gain initial access or persist within a network. If a web application exposes remote services or APIs without proper authentication, it could be leveraged by attackers to access internal resources or maintain persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1539",
            "attack_object_name": "Steal Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Steal Web Session Cookie' directly targets web applications by exploiting vulnerabilities in session management. The adversary aims to gain unauthorized access to the web application by stealing session cookies, which are used as authentication tokens. This compromises the security of the web application, making it the primary victim of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053.007",
            "attack_object_name": "Container Orchestration Job",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that are deployed within containerized environments managed by orchestration tools like Kubernetes can be indirectly abused by the technique T1053.007. Adversaries may use container orchestration jobs to deploy malicious containers that can interact with or affect the web application, leveraging the orchestration system as a means to execute attacks on the application or its environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1568.002",
            "attack_object_name": "Domain Generation Algorithms",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using DGAs to facilitate command and control communications. While the web application itself is not the direct target, it can be leveraged as part of the infrastructure to resolve dynamically generated domains, potentially being misused to support malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1099",
            "attack_object_name": "Timestomp",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Timestomp does not directly target web applications, it can be used to abuse the underlying file system of the server hosting the web application. By altering timestamps, adversaries can hide malicious files or modifications within the server's file system, potentially evading detection during forensic investigations of the web application environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1496.003",
            "attack_object_name": "SMS Pumping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications are abused by the SMS Pumping technique as they provide publicly available web forms, such as OTP or account verification fields, which adversaries exploit to generate large amounts of SMS traffic. This misuse of the web application's functionality aids in executing the SMS Pumping attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1016.001",
            "attack_object_name": "Internet Connection Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Internet Connection Discovery if they are used to send GET requests or other types of queries to external servers to check for internet connectivity. This can be part of a broader strategy where the web application is leveraged to facilitate communication with C2 servers or to map network routes."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1560.003",
            "attack_object_name": "Archive via Custom Method",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Archive via Custom Method' technique when adversaries use the application to collect data that is then compressed or encrypted before exfiltration. The web application serves as a means to gather and potentially manipulate data, which is then archived using custom methods for further malicious use."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1578",
            "attack_object_name": "Modify Cloud Compute Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Modify Cloud Compute Infrastructure' if they have vulnerabilities that allow an adversary to gain access to cloud management interfaces or credentials. Once access is gained, the adversary can modify cloud infrastructure to further their attack objectives, such as evading detection or maintaining persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.008",
            "attack_object_name": "Malvertising",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Malvertising technique as they can serve as platforms for displaying malicious advertisements. These ads can lead users to malicious domains or exploit vulnerabilities in the user's web browser, leveraging the web application as a tool to reach the end-user."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1069",
            "attack_object_name": "Permission Groups Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Permission Groups Discovery if they are used to access or enumerate permission settings within a broader network or system. For example, if a web application has access to backend systems or databases that store permission information, it could be leveraged by adversaries to discover group and permission settings indirectly."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1114",
            "attack_object_name": "Email Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the Email Collection technique if they are used as a platform to access or manage email services. For example, if a web application provides an interface to an email service, adversaries may exploit vulnerabilities in the web application to gain unauthorized access to email accounts or intercept email communications, thereby facilitating email collection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1596.002",
            "attack_object_name": "WHOIS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in the WHOIS technique as adversaries may use WHOIS data to gather information about domains hosting web applications. This information can then be leveraged for further attacks, such as identifying potential vulnerabilities or planning phishing campaigns."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1594",
            "attack_object_name": "Search Victim-Owned Websites",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique 'Search Victim-Owned Websites' abuses the web application by leveraging it as a source of information. Adversaries use the web application to gather data that can aid in further attacks, such as reconnaissance or establishing initial access."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1069.003",
            "attack_object_name": "Cloud Groups",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Cloud Groups' if they are used as a platform to execute commands or scripts that enumerate cloud group permissions. For instance, if a web application has access to cloud APIs or is configured to manage cloud resources, adversaries might leverage it to gather information about cloud groups and permissions."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1596.001",
            "attack_object_name": "DNS/Passive DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the DNS/Passive DNS technique does not directly attack web applications, it can be used to gather information about the web application's hosting environment, such as IP addresses and domain configurations. This information can then be leveraged to plan further attacks against the web application or its associated infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1499.003",
            "attack_object_name": "Application Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Application Exhaustion Flood technique specifically targets web applications by exploiting resource-intensive features to cause a denial of service. This technique aims to exhaust system resources, thereby directly compromising the availability of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1195.001",
            "attack_object_name": "Compromise Software Dependencies and Development Tools",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are directly targeted by this technique as they often rely on external software dependencies. If these dependencies are compromised, the web application itself becomes vulnerable to malicious code execution, data theft, or other forms of compromise."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1588.004",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries who have obtained digital certificates. For example, adversaries can use stolen or fraudulent SSL/TLS certificates to impersonate a legitimate web application, perform adversary-in-the-middle attacks, or encrypt malicious traffic to evade detection. This misuse can undermine the trust and security of web applications."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.002",
            "attack_object_name": "DNS Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the DNS Server technique when adversaries leverage DNS traffic for command and control purposes. While the web application itself is not directly targeted, it can be used as a conduit for DNS-based C2 traffic, especially if the application communicates with external DNS servers that are controlled by adversaries."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1071.004",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the DNS technique (T1071.004) when adversaries use DNS tunneling to exfiltrate data or communicate with command and control servers. The web application itself may not be the direct target, but it can be misused as a conduit for DNS-based communication, especially if the application interacts with DNS services or if DNS traffic is allowed through the network where the web application resides."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1552.005",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries through techniques like Server-Side Request Forgery (SSRF) to access the Cloud Instance Metadata API. In such cases, the web application acts as a conduit for the attacker to reach the metadata API and extract sensitive information."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1522",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Cloud Instance Metadata API technique (T1522) if they contain vulnerabilities such as Server-Side Request Forgery (SSRF). An attacker can exploit these vulnerabilities to make unauthorized requests to the metadata API, potentially gaining access to sensitive data stored in the cloud instance."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1036.005",
            "attack_object_name": "Match Legitimate Name or Location",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused by adversaries using the 'Match Legitimate Name or Location' technique to disguise malicious resources as legitimate ones within the web application's environment. For example, an attacker might upload a malicious script or file to a web application using a name or location that mimics a legitimate resource, thereby evading detection and using the web application as a means to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1172",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by Domain Fronting when they are hosted on CDNs that support multiple domains. The technique leverages the web application's hosting infrastructure to disguise the true destination of the traffic, using the web application as a proxy to reach other domains without detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1587.003",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Digital Certificates' (T1587.003) technique when adversaries use self-signed certificates to encrypt malicious traffic or facilitate adversary-in-the-middle attacks. In this context, the web application is not the direct target but is leveraged as a tool to carry out further malicious activities, such as bypassing security controls or intercepting data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1565.001",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often store data in databases or other storage systems. The Stored Data Manipulation technique targets web applications by altering this stored data, which can compromise the integrity of the application and its data. This manipulation can lead to incorrect business processes, decision-making errors, or hiding malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1110.002",
            "attack_object_name": "Password Cracking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using cracked passwords to gain unauthorized access. Once credentials are obtained through password cracking, they can be used to log into web applications, potentially leading to further exploitation or data theft."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1600",
            "attack_object_name": "Weaken Encryption",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often rely on encryption to secure data in transit and at rest. The 'Weaken Encryption' technique can directly target web applications by compromising their encryption mechanisms, making them vulnerable to unauthorized data access and manipulation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1606.002",
            "attack_object_name": "SAML Tokens",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that rely on SAML for single sign-on (SSO) can be abused by forged SAML tokens. This technique allows adversaries to authenticate across services, including web applications, by abusing the SAML authentication mechanism, thus misusing the web application for unauthorized access."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1192",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Spearphishing Link technique when adversaries use them as a platform to host malicious content or as a destination for malicious links. The web application is leveraged as a tool to further the attack, often by hosting malicious payloads or phishing pages that deceive users into providing sensitive information or downloading malware."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1036.008",
            "attack_object_name": "Masquerade File Type",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by the Masquerade File Type technique. Adversaries may upload malicious files disguised as legitimate file types to exploit vulnerabilities in the web application's file handling mechanisms. This can lead to unauthorized code execution or data theft if the application processes the file without proper validation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1489",
            "attack_object_name": "Service Stop",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly affected by the 'Service Stop' technique if an adversary stops critical services that support the web application, such as database services or application servers. This can disrupt the functioning of the web application, using it as a means to impact the availability of services provided by the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1587.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by malware developed under technique T1587.001 as a means to deliver or execute malicious payloads. For instance, a compromised web application could be used to host or distribute malware, or serve as a command and control (C2) server for malware operations. Thus, web applications can be leveraged as tools or stepping stones in broader malware campaigns."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1564",
            "attack_object_name": "Hide Artifacts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Hide Artifacts' technique to conceal malicious activities or artifacts within the application environment. For example, attackers might hide malicious scripts or data within the web application to avoid detection by security tools monitoring web traffic or application logs."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1559.002",
            "attack_object_name": "Dynamic Data Exchange",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using DDE when they serve as a delivery mechanism for malicious documents or content. For example, a web application could host or distribute Microsoft Office documents or CSV files that contain DDE commands, which are then executed on a victim's machine when opened, leveraging the web application as a stepping stone for the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1591.003",
            "attack_object_name": "Identify Business Tempo",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as a source of information for adversaries to gather business tempo data. For instance, publicly accessible web applications may reveal operational hours, shipment schedules, or other business-related information that can be leveraged by adversaries for reconnaissance."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1063",
            "attack_object_name": "Security Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not directly targeted by Security Software Discovery, they can be abused as part of a broader attack strategy. For example, an adversary may use a compromised web application to perform reconnaissance on the underlying server or network, including discovering security software configurations, to facilitate further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1071.005",
            "attack_object_name": "Publish/Subscribe Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using 'Publish/Subscribe Protocols' (T1071.005) as a communication channel to exfiltrate data or send commands. The web application may serve as a conduit for malicious activity, leveraging the publish/subscribe protocol to mimic legitimate traffic and evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1592.001",
            "attack_object_name": "Hardware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Hardware' (T1592.001) is primarily about gathering information on hardware, web applications could potentially be abused as a means to collect such information. For example, adversaries might compromise a web application to include malicious content that collects hardware information from users visiting the site. Thus, web applications can be leveraged as a tool to gather hardware information, aligning with the 'abused-by' relationship."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1080",
            "attack_object_name": "Taint Shared Content",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Taint Shared Content technique if they interact with or provide access to shared storage locations. For example, if a web application allows users to upload or access files in a shared directory, adversaries could leverage this functionality to taint the shared content, thereby using the web application as a stepping stone to deliver malicious payloads to users who access the shared content."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1484.002",
            "attack_object_name": "Trust Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Trust Modification if they rely on federated identity systems or domain trusts for authentication. An adversary could manipulate these trusts to gain unauthorized access to the web application by impersonating users or escalating privileges within the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1573.001",
            "attack_object_name": "Symmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Symmetric Cryptography technique (T1573.001) to encrypt command and control traffic. This abuse occurs when web applications are used as a conduit for encrypted communication, making it difficult to detect malicious activities. The web application itself is not the victim, but it is leveraged to facilitate secure communication for the adversary."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1527",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are targeted by adversaries using the Application Access Token technique as they can be exploited to bypass authentication processes. By compromising access tokens, adversaries can gain unauthorized access to the web application's resources and services, effectively compromising the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1527",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Application Access Token technique as a means to further an attack. Once an access token is compromised, it can be used to perform unauthorized actions on behalf of the user, such as accessing other services or data, thus leveraging the web application as a tool for malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1568.001",
            "attack_object_name": "Fast Flux DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by Fast Flux DNS when they are used as part of a malicious infrastructure. For instance, a compromised web application could be part of a botnet that employs Fast Flux DNS to hide its command and control servers, leveraging the web application's resources to further the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053.003",
            "attack_object_name": "Cron",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Cron technique can be abused in the context of a web application if an adversary gains access to the underlying server hosting the web application. By manipulating cron jobs, an attacker can schedule malicious tasks that could affect the web application's operation, such as executing unauthorized scripts or maintaining persistence on the server."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1588.006",
            "attack_object_name": "Vulnerabilities",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are often directly targeted by adversaries seeking to exploit vulnerabilities. These vulnerabilities can be in the application code, user authentication mechanisms, or data handling practices. By acquiring information about these vulnerabilities, adversaries can compromise the web application, leading to unauthorized access, data theft, or service disruption."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1566.002",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Spearphishing Link technique when adversaries use them as part of the attack chain. For example, a malicious link may lead to a compromised web application that hosts malware or phishing content. In this scenario, the web application is used as a tool to further the attack, making it an abuse of the asset type."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1070.002",
            "attack_object_name": "Clear Linux or Mac System Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in this technique if an adversary uses the web application as an entry point to gain access to the underlying server. Once access is obtained, the adversary may clear system logs to cover their tracks, thus abusing the web application as a stepping stone to execute this technique on the server."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1499.004",
            "attack_object_name": "Application or System Exploitation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are directly targeted by the Application or System Exploitation technique. Adversaries exploit vulnerabilities within the web application to cause it to crash, leading to a denial of service (DoS) condition. This directly impacts the availability of the web application, making it a primary victim of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1598.003",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Spearphishing Link technique when adversaries create fake websites that mimic legitimate web applications. These fake sites are used to capture sensitive information from users, such as credentials, which can then be used to compromise the legitimate web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1021.004",
            "attack_object_name": "SSH",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the SSH technique (T1021.004) if the web application server is configured to allow SSH access. In such cases, adversaries may leverage valid accounts to gain unauthorized access to the server hosting the web application, potentially using it as a stepping stone for further attacks or to maintain persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1098.003",
            "attack_object_name": "Additional Cloud Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Additional Cloud Roles' if they are used as a platform to manage cloud resources or accounts. If a web application has interfaces or APIs that interact with cloud IAM policies, it could be leveraged by an adversary to modify roles and permissions, thus abusing the web application as a tool to further an attack on cloud assets."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1089",
            "attack_object_name": "Disabling Security Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Disabling Security Tools' if they are leveraged to deploy scripts or commands that disable security tools on the server hosting the web application. This misuse can facilitate further attacks by reducing the effectiveness of security monitoring and detection capabilities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.008",
            "attack_object_name": "Stripped Payloads",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using stripped payloads to deliver malicious content that is difficult to analyze. While the web application is not the direct target, it can serve as a delivery mechanism for these payloads, potentially leading to further compromise of the system or network by evading detection mechanisms that rely on analyzing human-readable information in payloads."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1119",
            "attack_object_name": "Automated Collection",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are often targeted by adversaries using the Automated Collection technique to gather sensitive data stored or processed by the application. This can include user credentials, personal information, or business data that the application handles, making it a primary victim of such attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1115",
            "attack_object_name": "Clipboard Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Clipboard Data technique if adversaries leverage the web application to deliver malicious scripts or payloads that capture clipboard data from users. For example, a compromised web application could include a script that monitors clipboard activity when users interact with the application, thereby abusing the web application as a tool to collect sensitive information from users."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1003.007",
            "attack_object_name": "Proc Filesystem",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, particularly those running on Linux systems, can be abused by adversaries using the Proc Filesystem technique. If a web application process has access to sensitive information in memory, adversaries with sufficient privileges can extract credentials or other sensitive data from the process's memory space, leveraging the web application as a tool to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by botnets as part of a larger attack strategy. For example, a botnet could be used to perform a Distributed Denial of Service (DDoS) attack against a web application, overwhelming it with traffic and causing it to become unavailable. In this scenario, the web application is not the primary target of the botnet technique, but it is abused as part of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.004",
            "attack_object_name": "Drive-by Target",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Drive-by Target technique involves adversaries preparing malicious content on websites, which directly targets web applications. The web application is the primary victim as adversaries inject or upload malicious scripts into the web pages, compromising the integrity and security of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1040",
            "attack_object_name": "Network Sniffing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Network Sniffing can be used to abuse a web application by capturing sensitive data transmitted over the network, such as user credentials or session tokens. This data can then be used to further compromise the web application or other systems, making the web application a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1017",
            "attack_object_name": "Application Deployment Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of the 'Application Deployment Software' (T1017) technique if they are used as a platform to host or distribute malicious software. For instance, if a web application is compromised, it could be used to deploy malicious code to other systems within a network, leveraging the web application's access and functionality to facilitate lateral movement or further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1530",
            "attack_object_name": "Data from Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries to access cloud storage services. For example, if a web application interfaces with cloud storage, adversaries may exploit vulnerabilities in the web application to gain unauthorized access to the cloud storage, thereby abusing the web application to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1565.003",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Runtime Data Manipulation' directly targets web applications by altering the data as it is accessed and displayed to users. This compromises the integrity of the data presented by the web application, making the web application itself a primary victim of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1590.004",
            "attack_object_name": "Network Topology",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be leveraged to gather information about network topology. Adversaries may abuse web applications to extract details about the network environment they are hosted on, such as IP addresses, network configurations, and other infrastructure details, which can aid in further reconnaissance or planning of attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1587.002",
            "attack_object_name": "Code Signing Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using code signing certificates to distribute malicious code that appears legitimate. By leveraging code signing certificates, attackers can trick users or security systems into trusting and executing malicious code within the context of a web application, thereby abusing the web application as a vector for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1082",
            "attack_object_name": "System Information Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the System Information Discovery technique when they are used as a platform to gather system information. For instance, if a web application has vulnerabilities that allow an adversary to execute system commands, the adversary could use these vulnerabilities to perform system information discovery. In this case, the web application serves as a stepping stone to gather information about the underlying system, making it an abused asset type in this context."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1071",
            "attack_object_name": "Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Application Layer Protocol technique (T1071) as adversaries may use protocols typically associated with web applications (such as HTTP/HTTPS) to communicate with command and control servers or to exfiltrate data. This abuse leverages the web application's normal traffic to mask malicious activities, making it difficult to detect."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.014",
            "attack_object_name": "AppDomainManager",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that are built using the .NET framework can be abused by adversaries using the AppDomainManager technique. This involves manipulating the .NET runtime environment to load malicious assemblies, effectively using the web application as a conduit to execute malicious code. The web application itself is not the direct victim but is leveraged to facilitate the attack on the .NET runtime environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1074.002",
            "attack_object_name": "Remote Data Staging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Remote Data Staging' if they are used as a conduit for staging data. For instance, if an adversary gains access to a web application, they could use it to collect and temporarily store data before exfiltrating it. This abuse leverages the web application as a tool to facilitate data staging and subsequent exfiltration."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1098.006",
            "attack_object_name": "Additional Container Cluster Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of this technique if they are part of a containerized environment. An adversary could leverage a compromised web application to gain access to the underlying container orchestration system, where they could then apply the 'Additional Container Cluster Roles' technique to escalate privileges or maintain persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053",
            "attack_object_name": "Scheduled Task/Job",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Scheduled Task/Job technique (T1053) if an adversary gains access to the underlying server or environment where the web application is hosted. By exploiting vulnerabilities in the web application, an attacker may gain the necessary privileges to schedule tasks, thereby using the web application as a stepping stone to execute malicious code or maintain persistence on the server."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1590.003",
            "attack_object_name": "Network Trust Dependencies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Network Trust Dependencies' by serving as a source of information about network trust relationships. Adversaries may exploit vulnerabilities in web applications to gather data about network connections and trust dependencies, which can then be used to plan further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1498.002",
            "attack_object_name": "Reflection Amplification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused as reflectors in a Reflection Amplification attack if they are improperly configured or if they expose services that can be exploited for amplification. For example, if a web application exposes services that respond with large volumes of data to small requests, an adversary might use it as a tool to amplify attack traffic towards a target, thereby misusing the web application as part of a larger network-based attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1176",
            "attack_object_name": "Browser Extensions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly abused by the Browser Extensions technique (T1176) when malicious extensions are used to interact with web applications through the browser. For example, a malicious extension could steal credentials or manipulate data entered into a web application, thus abusing the web application as a means to further an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1499.002",
            "attack_object_name": "Service Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Service Exhaustion Flood technique directly targets web applications by overwhelming them with a large number of HTTP requests or SSL renegotiation requests. This attack aims to exhaust the resources of the web application, leading to a denial of service and compromising the availability of the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1106",
            "attack_object_name": "Native API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Native API technique does not directly target web applications, it can be used to abuse them indirectly. Adversaries may leverage native APIs to execute malicious code or perform actions on the underlying server hosting the web application. This can be part of a broader attack strategy where the web application is used as a stepping stone to gain deeper access to the system or network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1070.007",
            "attack_object_name": "Clear Network Connection History and Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by the technique 'Clear Network Connection History and Configurations,' they can be abused in the context of this technique. For instance, if a web application is used to facilitate malicious network connections or activities, adversaries may clear network connection logs and configurations related to the web application to hide their tracks and impede forensic analysis. Thus, the web application can be leveraged as a tool or stepping stone in the execution of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.003",
            "attack_object_name": "Virtual Private Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused in conjunction with a compromised VPS. Adversaries may use the VPS as a part of their infrastructure to host malicious web applications or to route attacks through them, leveraging the VPS's resources and reputation to obscure their activities and further attack other targets."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1600.001",
            "attack_object_name": "Reduce Key Space",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Reduce Key Space' technique does not directly target web applications, it can abuse them indirectly. If a web application relies on network communications that are encrypted, reducing the key space of the encryption could allow adversaries to intercept and decrypt sensitive data transmitted by the web application, thus abusing the application as a means to compromise data integrity and confidentiality."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1202",
            "attack_object_name": "Indirect Command Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused in the context of 'Indirect Command Execution' if they are leveraged as a platform to execute commands indirectly. For example, if a web application has vulnerabilities that allow an adversary to execute commands on the underlying server, this technique could be used to bypass security restrictions by executing commands through the web application, thus abusing it as a tool for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1024",
            "attack_object_name": "Custom Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Custom Cryptographic Protocol technique (T1024) to hide malicious traffic. If a web application is compromised, it can be used as a conduit to transmit command and control communications using custom encryption, thereby abusing the web application as a tool for furthering an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused to facilitate the 'Data from Local System' technique if they are exploited to gain access to the underlying server's local file system. For example, if a web application has a vulnerability that allows an adversary to execute commands on the server, they could potentially use this access to search for and collect data from the local system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the technique T1140, Deobfuscate/Decode Files or Information, as they may be used to host or serve obfuscated content that adversaries need to decode for further malicious activities. For instance, a web application might be leveraged to distribute obfuscated malware or scripts that require deobfuscation as part of an attack chain. In this context, the web application acts as a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562",
            "attack_object_name": "Impair Defenses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the 'Impair Defenses' technique if they are used as a platform to disable or bypass security mechanisms. For instance, an adversary might exploit a web application to gain unauthorized access to administrative interfaces or configurations that control security settings, thereby impairing defenses. This makes the web application a tool or stepping stone in the broader strategy of impairing defenses."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1586.003",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Cloud Accounts' if they are used as a vector to access or compromise cloud accounts. For example, vulnerabilities in web applications could be exploited to steal credentials or tokens that grant access to cloud accounts, thereby using the web application as a stepping stone in the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1586.002",
            "attack_object_name": "Email Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using compromised email accounts to conduct phishing attacks or other malicious activities. For example, a compromised email account could be used to send phishing emails that direct users to a malicious web application designed to steal credentials or deliver malware. In this context, the web application serves as a tool or vector for furthering the attack initiated by the compromised email account."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.001",
            "attack_object_name": "Upload Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Upload Malware' technique to host or distribute malicious content. Adversaries may leverage compromised web applications to upload malware, making it accessible for further attacks, such as Ingress Tool Transfer. This misuse aligns with the technique's description of using web services to stage and distribute malicious software."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by supply chain compromises, especially when adversaries manipulate software update mechanisms or source code repositories that are integral to the web application's deployment or operation. This can lead to the introduction of malicious code or vulnerabilities directly into the web application, compromising its integrity and security."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1190",
            "attack_object_name": "Exploit Public-Facing Application",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Exploit Public-Facing Application' directly targets web applications by exploiting vulnerabilities in their code, configuration, or deployment. This can lead to unauthorized access, execution of malicious code, or data theft, making the web application the primary victim of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1555",
            "attack_object_name": "Credentials from Password Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by this technique if they store credentials in password stores. Adversaries may exploit this by extracting credentials from these stores to gain unauthorized access to the web application or perform lateral movement within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1567",
            "attack_object_name": "Exfiltration Over Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Exfiltration Over Web Service' technique. The web application, or the services it interacts with, may be used as a conduit for exfiltrating data, taking advantage of existing communication channels and encryption to evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1219",
            "attack_object_name": "Remote Access Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using 'Remote Access Software' as a stepping stone. For instance, if a web application server is compromised, remote access software could be installed to facilitate further attacks, maintain persistence, or enable lateral movement within the network. The web application itself may not be the direct target of the remote access software, but it can be leveraged as part of a broader attack strategy."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.001",
            "attack_object_name": "Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries who use malicious or deceptive domains to host phishing pages or distribute malware. These domains can be used to mimic legitimate web applications, thereby abusing the trust users have in those applications to further malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1560.002",
            "attack_object_name": "Archive via Library",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of this technique if they are used as a conduit for data exfiltration. For instance, if an adversary gains access to a web application and collects sensitive data, they might use the 'Archive via Library' technique to compress or encrypt this data before exfiltrating it. In this scenario, the web application is not the direct target but is leveraged to facilitate the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055.003",
            "attack_object_name": "Thread Execution Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Thread Execution Hijacking does not directly target web applications, it can be used to abuse them indirectly. For instance, if an attacker gains access to the server hosting the web application, they could use Thread Execution Hijacking to inject malicious code into server processes, which could then be used to manipulate the web application or extract sensitive data. Thus, web applications can be abused as part of a broader attack involving this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1079",
            "attack_object_name": "Multilayer Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Multilayer Encryption' (T1079) technique when adversaries use them as a medium to establish encrypted communication channels. This can help attackers conceal their command and control (C2) communications, making it challenging for security systems to detect malicious activities. The web application serves as a conduit for encrypted traffic rather than being directly compromised."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused through Masquerading by adversaries who manipulate URLs, file names, or other elements to make malicious content appear legitimate. For example, attackers might disguise malicious scripts or URLs to appear as part of a legitimate web application to trick users into interacting with them, thus leveraging the web application as a tool for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by the 'Unsecured Credentials' technique if they store credentials insecurely. Adversaries may exploit vulnerabilities in the web application to access these credentials, which can lead to unauthorized access and further compromise of the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by Content Injection techniques. Adversaries may inject malicious content into the web application's data-transfer channels, compromising the integrity of the application and potentially leading to unauthorized access or data manipulation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused by Content Injection techniques as a means to further an attack. For example, once a web application is compromised, it can be used to deliver malicious payloads to users who interact with the application, thereby facilitating further exploitation or lateral movement."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055",
            "attack_object_name": "Process Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused in conjunction with Process Injection if an attacker gains access to the underlying server or environment hosting the web application. For example, if an attacker exploits a vulnerability in a web application to gain access to the server, they could then use Process Injection to elevate privileges or evade detection on that server. Thus, while the web application is not directly injected into, it can be a stepping stone to abuse the underlying system through process injection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1567.004",
            "attack_object_name": "Exfiltration Over Webhook",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by this technique as they may host or interact with webhook endpoints. Adversaries can leverage these endpoints to exfiltrate data, using the web application as a conduit for malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1205",
            "attack_object_name": "Traffic Signaling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could potentially be abused by the Traffic Signaling technique if they are used as intermediaries to send or receive crafted packets that trigger specific network behaviors. For instance, a compromised web application could be leveraged to send signaling packets to other systems or devices, facilitating command and control or persistence mechanisms. Thus, while not directly targeted, web applications can be misused as tools in the execution of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1021.008",
            "attack_object_name": "Direct Cloud VM Connections",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused in the context of 'Direct Cloud VM Connections' if they are used as a stepping stone to gain access to cloud infrastructure. For instance, if a web application is compromised, it could potentially be used to obtain valid credentials or tokens that allow an adversary to make direct connections to cloud VMs, thereby abusing the web application as a means to further the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1503",
            "attack_object_name": "Credentials from Web Browsers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly abused by this technique if credentials stored by web browsers are used to gain unauthorized access to the web applications. The technique leverages the credentials stored by web browsers to potentially access web applications, making the web application a secondary victim of the credential theft."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1038",
            "attack_object_name": "DLL Search Order Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Web Applications themselves are not directly targeted by DLL Search Order Hijacking, they can be abused if they interact with or invoke local applications on the client-side that are vulnerable to this technique. For instance, if a web application triggers the execution of a local application that loads DLLs, an adversary could exploit DLL Search Order Hijacking to execute malicious code through the local application, indirectly using the web application as a stepping stone."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1557.004",
            "attack_object_name": "Evil Twin",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Evil Twin technique does not directly target web applications, it can be used to abuse them indirectly. Once users are connected to a malicious Wi-Fi network, adversaries can intercept and manipulate traffic to and from web applications, potentially capturing login credentials or sensitive data being transmitted. This makes web applications a secondary victim as their security can be compromised through the manipulation of network traffic."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1620",
            "attack_object_name": "Reflective Code Loading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Web Applications themselves are not directly targeted by Reflective Code Loading, they can be abused as a vector to introduce malicious code into a system. For instance, if a web application has vulnerabilities that allow for code execution, an adversary might use Reflective Code Loading to execute malicious payloads within the web server's process memory, thereby abusing the web application as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1564.011",
            "attack_object_name": "Ignore Process Interrupts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Ignore Process Interrupts' does not directly target web applications, it can be used to abuse them indirectly. If an adversary gains access to the server hosting the web application, they could use this technique to ensure malicious processes continue running despite interruptions, potentially using the web application as a vector for further attacks or persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1611",
            "attack_object_name": "Escape to Host",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused in the context of the 'Escape to Host' technique if they are running within containerized environments. If a web application is compromised, an adversary might leverage the container it runs in to attempt an escape to the host. Thus, while the web application is not the direct target, it can be a stepping stone for executing this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1032",
            "attack_object_name": "Standard Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Standard Cryptographic Protocol' technique when adversaries use them as a medium to transmit encrypted command and control traffic. This can involve leveraging the web application's communication channels to hide malicious activities, making it difficult to detect the underlying attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1497.003",
            "attack_object_name": "Time Based Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using Time Based Evasion techniques to delay malicious activities or avoid detection within the application's environment. For instance, an adversary might use time-based methods to evade security monitoring or analysis tools that are part of the web application's infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1563.001",
            "attack_object_name": "SSH Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may host services that facilitate SSH connections or manage SSH keys, which can be abused in SSH Hijacking. An attacker could leverage a compromised web application to gain access to SSH sessions or credentials, using the web application as a stepping stone for lateral movement."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1029",
            "attack_object_name": "Scheduled Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Scheduled Transfer technique if they are used as a conduit for exfiltrating data. For example, if a web application has been compromised, adversaries might schedule data exfiltration through the application to avoid detection, leveraging the application's normal traffic patterns to mask malicious activity."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1525",
            "attack_object_name": "Implant Internal Image",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Implant Internal Image' technique if they are involved in provisioning or managing cloud or container images. For example, a web application with access to cloud infrastructure could be used as a tool to implant malicious images, thereby facilitating persistence or further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1572",
            "attack_object_name": "Protocol Tunneling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by Protocol Tunneling as they often handle network communications that can be encapsulated within other protocols to bypass security measures. For instance, adversaries might use web applications to tunnel malicious traffic through HTTP or HTTPS, leveraging the web application's network access to further their attack without directly compromising the application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1599.001",
            "attack_object_name": "Network Address Translation Traversal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not directly targeted by Network Address Translation Traversal, they can be indirectly affected if an adversary uses this technique to gain access to a network segment where the web application resides. By abusing the network boundary devices to traverse NAT, adversaries can potentially reach and exploit web applications that were otherwise protected by network segmentation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.002",
            "attack_object_name": "Upload Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Upload Tool' technique as they might be used as a platform to host or distribute tools that adversaries upload. This can occur when adversaries leverage web applications to stage tools for further operations, such as enabling ingress tool transfer or making tools available to compromised networks. The web application serves as a means to facilitate the adversary's objectives rather than being the direct target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often handle authentication processes and may store or process alternate authentication materials such as tokens or session identifiers. These materials can be targeted by adversaries to gain unauthorized access to the application or its data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Once alternate authentication materials are obtained, web applications can be abused by adversaries to move laterally within an environment or to escalate privileges, bypassing normal authentication mechanisms without needing the original credentials."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1011",
            "attack_object_name": "Exfiltration Over Other Network Medium",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Exfiltration Over Other Network Medium' technique. Once a web application is compromised, it can be leveraged to exfiltrate data over different network mediums, such as WiFi or Bluetooth, especially if these alternate channels are less monitored or secured."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1589",
            "attack_object_name": "Gather Victim Identity Information",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries using the 'Gather Victim Identity Information' technique. Attackers may exploit vulnerabilities in web applications to gather sensitive identity information such as usernames, email addresses, and potentially credentials. This is often achieved through methods like injection attacks or exploiting misconfigurations in authentication mechanisms."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1589",
            "attack_object_name": "Gather Victim Identity Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as a means to gather victim identity information. Adversaries may use web applications as a tool to collect identity data from users who interact with the application. This can occur through phishing pages hosted on compromised web applications or by leveraging web applications to perform reconnaissance, such as enumerating valid usernames or probing authentication services."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.004",
            "attack_object_name": "Disable or Modify System Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries who have already compromised the system to disable or modify system firewalls. This abuse allows adversaries to facilitate further attacks, such as enabling command and control communications or lateral movement, by bypassing network restrictions that would otherwise protect the web application and other assets."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1560",
            "attack_object_name": "Archive Collected Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Archive Collected Data' technique as a means to compress and encrypt data collected from the application before exfiltration. This abuse does not directly compromise the web application but uses it as a source of data that is then archived for stealthy exfiltration."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1483",
            "attack_object_name": "Domain Generation Algorithms",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by Domain Generation Algorithms (DGAs) as they may be leveraged to facilitate command and control communications. For instance, a compromised web application could be used to host or redirect traffic to domains generated by DGAs, thus acting as a stepping stone in an attack. This misuse can aid adversaries in maintaining persistence and evasion by dynamically altering command and control channels."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1185",
            "attack_object_name": "Browser Session Hijacking",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are directly targeted by Browser Session Hijacking techniques as adversaries exploit vulnerabilities in web applications to hijack user sessions. This can lead to unauthorized access to sensitive data and functionalities within the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1185",
            "attack_object_name": "Browser Session Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications are abused in Browser Session Hijacking as adversaries leverage the compromised session to pivot and access other resources within the network. The web application acts as a conduit for further attacks, allowing adversaries to misuse the session for malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1021",
            "attack_object_name": "Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Remote Services' technique if they provide remote access capabilities or interfaces that can be exploited by adversaries using valid credentials. For example, if a web application includes administrative functionalities accessible over remote protocols, adversaries could leverage these services to further their attack objectives, such as lateral movement or remote code execution."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1071.003",
            "attack_object_name": "Mail Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Mail Protocols' technique to facilitate communication with command and control servers. For example, a compromised web application could be used to send or receive commands and data using email protocols, thereby blending malicious traffic with legitimate email traffic to avoid detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1556.007",
            "attack_object_name": "Hybrid Identity",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the Hybrid Identity technique when adversaries leverage the web interfaces of identity management systems to register malicious agents or modify authentication settings. This abuse allows adversaries to manipulate the authentication process and gain unauthorized access to cloud resources, using the web application as a tool to facilitate these actions."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1595.002",
            "attack_object_name": "Vulnerability Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Vulnerability Scanning is a technique that directly targets web applications by identifying potential vulnerabilities in the application code, configurations, or components. The primary objective is to find weaknesses that can be exploited to compromise the web application, such as through injection attacks or exploiting outdated software versions."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.009",
            "attack_object_name": "Cloud API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Cloud API technique if they are hosted in cloud environments. Adversaries may leverage cloud APIs to manipulate the cloud infrastructure that hosts the web application, potentially affecting the application's availability, integrity, or confidentiality. This abuse is indirect, as the web application is not the primary target but can be impacted by malicious actions executed via cloud APIs."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1596",
            "attack_object_name": "Search Open Technical Databases",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be indirectly involved in this technique as adversaries gather information from open technical databases that could include details about web applications, such as domain registrations or SSL certificates. This information can be used to plan further attacks against the web application or its infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1218.015",
            "attack_object_name": "Electron Applications",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique 'Electron Applications' abuses the Electron framework, which is built using web technologies like JavaScript, HTML, and CSS. This framework can be leveraged to execute malicious code within applications that use it, effectively abusing the web technologies that are part of the web application ecosystem."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.012",
            "attack_object_name": "Disable or Modify Linux Audit System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the web application is not directly targeted by the technique 'Disable or Modify Linux Audit System', it can be indirectly abused. If an adversary successfully disables or modifies the Linux audit system, they can perform malicious activities on the server hosting the web application without being detected. This could include further attacks on the web application, such as data exfiltration or unauthorized access, leveraging the compromised audit system to evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1610",
            "attack_object_name": "Deploy Container",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, particularly those that serve as interfaces or dashboards for container orchestration platforms like Kubernetes, can be abused to deploy containers. Adversaries may exploit vulnerabilities in these web applications to gain unauthorized access and deploy malicious containers, using the web application as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1107",
            "attack_object_name": "File Deletion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused by adversaries using the File Deletion technique (T1107) to remove logs or other forensic evidence stored on the web server. This can be part of an effort to cover tracks and maintain stealth after exploiting the web application for initial access or other malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1145",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often use private keys for secure communications and authentication. Adversaries may target web applications to extract these private keys, compromising the application's security and potentially allowing unauthorized access to sensitive data or services."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1555.003",
            "attack_object_name": "Credentials from Web Browsers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in this technique as they may be the source of credentials stored in web browsers. Adversaries can abuse these credentials to gain unauthorized access to web applications, leveraging them as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.008",
            "attack_object_name": "Path Interception by Search Order Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused in the context of Path Interception by Search Order Hijacking if they are configured to execute local programs or scripts without specifying full paths. An adversary could exploit this behavior to execute malicious payloads by placing them in directories where the web application expects to find legitimate executables, thereby using the web application as a stepping stone to compromise the underlying server or other connected systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1491",
            "attack_object_name": "Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Defacement technique directly targets web applications by modifying their visual content. This attack compromises the integrity of the web application by altering its appearance and potentially its functionality, making the web application the primary victim of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1535",
            "attack_object_name": "Unused/Unsupported Cloud Regions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in this technique if they are hosted on cloud infrastructure. If an adversary gains access to cloud management accounts through a web application vulnerability, they could potentially abuse the cloud environment, including creating instances in unused regions. However, the primary focus of the technique is on cloud infrastructure rather than the web application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1557.003",
            "attack_object_name": "DHCP Spoofing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be indirectly affected by DHCP Spoofing if the network traffic to and from the web application is rerouted through adversary-controlled systems. This can lead to interception or manipulation of data exchanged between the web application and its users, thereby abusing the web application as part of a broader attack strategy."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1155",
            "attack_object_name": "AppleScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While AppleScript does not directly target web applications, it can be used to abuse them indirectly. For example, if a web application is accessed via a macOS system, AppleScript could be used to automate interactions with the web application, potentially for malicious purposes such as automating data extraction or simulating user interactions. This makes the web application a tool or stepping stone in a broader attack facilitated by AppleScript."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1563",
            "attack_object_name": "Remote Service Session Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Remote Service Session Hijacking if they are used to facilitate or manage remote sessions. For example, a web application that provides an interface for remote management could be leveraged to hijack sessions if it interfaces with services like SSH or RDP."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1505.003",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Shell technique directly targets web applications by placing a malicious script on the web server. This script allows adversaries to gain unauthorized access and control over the web application, making it a primary victim of this attack technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1552.004",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often handle sensitive data and may store private keys for various purposes, such as SSL/TLS encryption or API authentication. Adversaries may target web applications to search for and extract these private keys, which can be insecurely stored within the application's file system or configuration files. Compromising these keys can lead to unauthorized access to encrypted communications or impersonation of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries who use their own servers (as described in T1583.004) to host malicious content or facilitate attacks such as phishing or command and control operations. In this context, the web application is leveraged as a platform to deliver malicious activities rather than being the direct target of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1021.006",
            "attack_object_name": "Windows Remote Management",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Web Applications are not directly targeted by the Windows Remote Management technique, they can be abused in scenarios where an adversary gains access to a web server hosting the application. If the server is a Windows machine, the adversary may use WinRM to further interact with the system, potentially using the web application as a stepping stone for lateral movement or further exploitation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1078.001",
            "attack_object_name": "Default Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries exploiting default accounts that are not properly secured or changed after deployment. If a web application has default administrative accounts that are left unchanged, attackers can gain unauthorized access, potentially compromising the application and the data it handles."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1085",
            "attack_object_name": "Rundll32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Rundll32 does not directly target web applications, it can be abused in scenarios where a web application is compromised and used as a vector to deliver malicious scripts or binaries to a user's system. For instance, if a web application is exploited to serve malicious content, Rundll32 could be used to execute scripts on a victim's machine, leveraging the web application as a stepping stone in the attack chain."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.006",
            "attack_object_name": "Dynamic Linker Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly abused by Dynamic Linker Hijacking if the web application server or its processes are compromised. Adversaries could use this technique to load malicious libraries into processes that the web application relies on, potentially affecting the web application's behavior or security."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1585.002",
            "attack_object_name": "Email Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using email accounts to conduct phishing attacks or other malicious activities. For example, adversaries might use email accounts to send phishing emails that target users of a web application, aiming to gain unauthorized access or deliver malicious payloads. Thus, while the web application is not the direct target, it can be indirectly affected by the misuse of email accounts."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1222",
            "attack_object_name": "File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'File and Directory Permissions Modification' technique if an adversary gains access to the underlying server or file system where the web application is hosted. By modifying file and directory permissions, an attacker can misuse the web application to further an attack, such as by altering web application files to include malicious code or by changing access controls to allow unauthorized access to sensitive data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053.001",
            "attack_object_name": "At (Linux)",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The 'At (Linux)' technique can be abused to execute malicious tasks on a Linux system, which may host a web application. This can indirectly affect the web application by enabling persistence, privilege escalation, or lateral movement that could impact the web application's security or availability. Thus, the web application can be leveraged as part of a broader attack strategy using this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1179",
            "attack_object_name": "Hooking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Hooking is not used to directly target web applications, it can be used to abuse the underlying server processes that support web applications. For example, an attacker could use hooking to intercept and manipulate API calls on a server hosting a web application, potentially capturing sensitive data or credentials processed by the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1595",
            "attack_object_name": "Active Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Active Scanning is a reconnaissance technique where adversaries probe web applications to gather information about potential vulnerabilities. This makes the web application a direct target of the technique as the adversary seeks to identify weaknesses that can be exploited."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1548",
            "attack_object_name": "Abuse Elevation Control Mechanism",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by the 'Abuse Elevation Control Mechanism' technique, they can be abused as part of a broader attack strategy. For instance, if an attacker gains access to a web application with limited privileges, they might use the application as a stepping stone to exploit elevation control mechanisms on the underlying server or system, thereby gaining higher-level permissions."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1134.002",
            "attack_object_name": "Create Process with Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Create Process with Token' does not directly target web applications, it can be abused in scenarios where a web application is compromised to gain access to credentials or tokens. Once an attacker has access to these credentials or tokens through a web application, they could potentially use this technique to escalate privileges or move laterally within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1548.001",
            "attack_object_name": "Setuid and Setgid",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused indirectly if they execute or interact with system binaries that have the setuid or setgid bits set. An adversary could exploit a web application vulnerability to execute commands or scripts that leverage these elevated privileges, thereby abusing the web application as a stepping stone to gain higher privileges on the host system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1117",
            "attack_object_name": "Regsvr32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Regsvr32 technique when they are used to deliver malicious scripts or URLs to a target system. For example, a web application could be compromised to host a malicious script that, when accessed, uses regsvr32.exe to execute code on a victim's machine. This makes the web application a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1110.003",
            "attack_object_name": "Password Spraying",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications, especially those with authentication mechanisms exposed over HTTP/HTTPS, can be directly targeted by password spraying attacks. Adversaries may attempt to gain unauthorized access by using common passwords against many accounts on the web application, exploiting potential weaknesses in authentication processes."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1090.002",
            "attack_object_name": "External Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the External Proxy technique as they may be leveraged to facilitate communication with an external proxy. This can occur if an adversary uses a compromised web application as a stepping stone to redirect traffic through an external proxy, thus masking the destination of command and control communications."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1056.003",
            "attack_object_name": "Web Portal Capture",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Portal Capture technique directly targets web applications, specifically those that serve as externally facing portals such as VPN login pages. The technique involves installing malicious code on the web application to capture user credentials, making the web application the primary victim of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1589.002",
            "attack_object_name": "Email Addresses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Email Addresses' technique as they may host or expose email addresses through contact forms, user profiles, or other public-facing features. This information can be leveraged by attackers for further reconnaissance or phishing attacks, using the web application as a tool to gather email addresses."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1054",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Indicator Blocking' if they are used to facilitate the blocking of telemetry data. For example, an adversary could leverage a compromised web application to manipulate network configurations or firewall settings to block traffic associated with reporting indicators to security monitoring systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1108",
            "attack_object_name": "Redundant Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of the 'Redundant Access' technique, particularly through the use of web shells. Adversaries may deploy web shells on web servers to maintain access to a network, leveraging the web application as a tool to facilitate persistent access."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1593.002",
            "attack_object_name": "Search Engines",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be indirectly abused by the Search Engines technique when adversaries use search engines to discover sensitive information exposed by the application, such as misconfigured settings or leaked data. This information can then be used to further attacks on the application or associated systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1591.002",
            "attack_object_name": "Business Relationships",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the 'Business Relationships' technique by being a source of publicly accessible information about an organization's business relationships. Adversaries may search victim-owned websites or web applications to gather data on business partners, supply chains, or other relationships, which can then be used to facilitate further attacks or reconnaissance efforts."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1548.005",
            "attack_object_name": "Temporary Elevated Cloud Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused by the 'Temporary Elevated Cloud Access' technique if they are integrated with cloud services and have permissions to request elevated access. An adversary could leverage a compromised web application to gain temporary elevated access to cloud resources, using the application as a stepping stone to exploit cloud permissions and escalate privileges."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1016",
            "attack_object_name": "System Network Configuration Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'System Network Configuration Discovery' does not directly target web applications, it can be used to abuse them as a stepping stone. For instance, if an adversary gains access to a web application, they might use it to perform network reconnaissance, gathering information about the network configuration to facilitate further attacks, such as lateral movement or identifying other targets within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1593.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications are often used to interact with code repositories, such as through web interfaces provided by platforms like GitHub or GitLab. In this context, web applications can be abused as a means to access and extract information from code repositories, which adversaries can use for reconnaissance and further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.005",
            "attack_object_name": "Executable Installer File Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by this technique, they could be abused if they are involved in deploying or managing software installations. For example, if a web application is used to manage software deployments and does not properly secure installer files or directories, it could be leveraged by an adversary to execute malicious payloads through this technique. This misuse would be indirect, as the web application would serve as a tool to facilitate the attack on the installer files."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1496.002",
            "attack_object_name": "Bandwidth Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in Bandwidth Hijacking as they may be leveraged to consume network bandwidth for malicious activities, such as participating in botnets or proxyjacking. This misuse can impact the availability of the web application and its associated services."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1087",
            "attack_object_name": "Account Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Account Discovery technique to enumerate user accounts. This can occur if the web application exposes user account information through misconfigurations, API endpoints, or other means that allow adversaries to gather account details. The web application itself is not the direct victim but serves as a tool or vector for the adversary to obtain account information, which can be used for further attacks such as brute-forcing or spear-phishing."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1090",
            "attack_object_name": "Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Proxy' technique (T1090) as adversaries may use them as intermediaries to proxy command and control traffic. This can involve leveraging web application infrastructure to disguise the source of malicious traffic or to route communications through trusted paths, thereby misusing the web application for malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries using command and scripting interpreters. Attackers may exploit vulnerabilities in the web application to execute arbitrary commands or scripts on the server hosting the application. This could lead to unauthorized access, data theft, or further compromise of the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can also be abused by adversaries using command and scripting interpreters as a means to further an attack. For example, an attacker might leverage a compromised web application to execute scripts that facilitate lateral movement within a network or to establish persistence by deploying malicious scripts that evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.006",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused in the context of 'Indicator Blocking' if they are used as a platform to execute scripts or commands that interfere with logging and monitoring systems. For instance, if a web application has vulnerabilities that allow an attacker to execute arbitrary code, the attacker could potentially use this access to modify logging configurations or block telemetry data, thus abusing the web application as a tool to facilitate the indicator blocking technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1589.003",
            "attack_object_name": "Employee Names",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as a source of employee names if they expose such information through public profiles, directories, or other means. Adversaries may leverage web applications to gather employee names, which can then be used for further reconnaissance or social engineering attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1020",
            "attack_object_name": "Automated Exfiltration",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by automated exfiltration techniques when adversaries exploit vulnerabilities in the application to gather and exfiltrate sensitive data. This can occur through compromised web application components that handle data, such as forms or APIs, which are manipulated to extract data automatically."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1592.004",
            "attack_object_name": "Client Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Client Configurations' technique to gather information about client configurations. This can be done by compromising web applications to include malicious content that collects host information from visitors, thereby leveraging the web application as a tool to further reconnaissance efforts."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.007",
            "attack_object_name": "Disable or Modify Cloud Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications hosted in cloud environments can be indirectly impacted by this technique. If an adversary disables or modifies cloud firewall rules, it can lead to unauthorized access to the web application, misuse of the application for lateral movement, or exposure to further attacks. Thus, the web application can be abused as a result of compromised cloud firewall settings."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1036.002",
            "attack_object_name": "Right-to-Left Override",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Right-to-Left Override technique when adversaries use this method to disguise malicious files that are uploaded or interacted with through the web application. This can lead to further exploitation if the web application processes or serves these disguised files to users."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1588.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by malware obtained through T1588.001, as adversaries may use the acquired malware to compromise web applications indirectly. This could involve deploying malware on a compromised web server to facilitate further attacks, such as data exfiltration or lateral movement within a network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1070",
            "attack_object_name": "Indicator Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the Indicator Removal technique (T1070) if adversaries leverage the web application to access or manipulate logs and other artifacts stored on the server. This abuse allows adversaries to cover their tracks by removing or altering indicators of compromise that may have been generated during the exploitation of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1048.001",
            "attack_object_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by this technique as they often handle sensitive data that adversaries aim to exfiltrate. The web application may be leveraged as a conduit to exfiltrate data using symmetric encryption over non-C2 protocols, making it a tool in the attack rather than the primary target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.003",
            "attack_object_name": "Virtual Private Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Virtual Private Server' (T1583.003) does not directly abuse web applications, VPS infrastructure can be used to host malicious web applications or launch attacks against other web applications. Adversaries may use VPSs to conduct operations that involve web applications, such as hosting phishing sites or launching attacks like DDoS against web applications."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1213.001",
            "attack_object_name": "Confluence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Confluence, as a web application, can be abused by adversaries to access sensitive information stored within it. This information can be used to further an attack, such as gaining insights into network architecture or obtaining unsecured credentials."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1550.003",
            "attack_object_name": "Pass the Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be indirectly abused in a 'Pass the Ticket' scenario if they rely on Kerberos for authentication. An adversary could use stolen Kerberos tickets to gain unauthorized access to web applications that authenticate users via Kerberos, thereby misusing the web application as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1609",
            "attack_object_name": "Container Administration Command",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be deployed within containerized environments managed by services like Docker or Kubernetes. An adversary could abuse the container administration services to execute commands within the containers hosting the web application, potentially impacting the web application's operation or using it as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1083",
            "attack_object_name": "File and Directory Discovery",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by the File and Directory Discovery technique as adversaries may attempt to enumerate files and directories within the web application environment. This can include searching for configuration files, sensitive data, or other exploitable resources within the web application's file system. Such discovery activities are often a precursor to further exploitation or data theft."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1568",
            "attack_object_name": "Dynamic Resolution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Dynamic Resolution technique if they are used as a platform to host or facilitate the malware's dynamic resolution process. For instance, a compromised web application could be leveraged to serve as a command and control server or to host malicious scripts that assist in the dynamic resolution process. In this context, the web application is not the direct victim but is misused to support the adversary's communication strategies."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1036.004",
            "attack_object_name": "Masquerade Task or Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Masquerade Task or Service' does not directly target web applications, it can be used to abuse the environment in which a web application operates. For example, adversaries may use this technique to disguise malicious services or tasks on the server hosting the web application, thereby facilitating further attacks or persistence without directly compromising the web application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055.004",
            "attack_object_name": "Asynchronous Procedure Call",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the APC injection technique does not directly target web applications, it can be used to abuse the processes that host or interact with web applications. For example, if an adversary gains access to the server hosting a web application, they could use APC injection to execute malicious code within processes that are part of the web application's infrastructure, thereby abusing the web application indirectly to further their attack objectives."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1020.001",
            "attack_object_name": "Traffic Duplication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Traffic Duplication technique if adversaries leverage network traffic mirroring to capture sensitive data transmitted by the web application. This includes data such as user credentials, session tokens, or other sensitive information that may be intercepted as it traverses the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1188",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused as part of a Multi-hop Proxy setup. Adversaries may leverage compromised or misconfigured web applications to act as proxies in a chain, helping to disguise the source of malicious traffic. This abuse does not directly compromise the web application itself but rather uses it as a tool to facilitate further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1074",
            "attack_object_name": "Data Staged",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the 'Data Staged' technique by serving as a platform for staging data before exfiltration. Adversaries may exploit vulnerabilities in web applications to collect and store data in a centralized location within the application environment, leveraging it as a tool for further attack stages."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1649",
            "attack_object_name": "Steal or Forge Authentication Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by this technique if adversaries use stolen or forged authentication certificates to gain unauthorized access to the web application. This technique can enable adversaries to authenticate as legitimate users or services, thereby misusing the web application for malicious activities such as lateral movement or persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1049",
            "attack_object_name": "System Network Connections Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the System Network Connections Discovery technique (T1049) does not directly target web applications, it can be abused in scenarios where a web application is compromised and used as a foothold to gather network information. An adversary who has gained access to a web application may use this technique to discover network connections and further their attack by mapping out the network environment, potentially identifying other targets within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584",
            "attack_object_name": "Compromise Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be part of the infrastructure that adversaries compromise to use as a platform for launching further attacks. Once compromised, a web application can be leveraged to stage malicious activities, host phishing pages, or serve as a proxy, thus abusing the web application as a tool in the adversary's operations."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1553.005",
            "attack_object_name": "Mark-of-the-Web Bypass",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be used as a vector to deliver files that may exploit the Mark-of-the-Web Bypass technique. For instance, a web application could be used to serve container files that, once downloaded and extracted by a user, could bypass MOTW protections on the contained files. This makes the web application a tool in the delivery and potential execution of malicious payloads that exploit this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1064",
            "attack_object_name": "Scripting",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by scripting techniques. Adversaries may use scripts to automate attacks such as injection attacks (e.g., SQL injection, cross-site scripting) that exploit vulnerabilities in the web application code. These attacks can lead to unauthorized access, data theft, or execution of malicious code within the web application environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1064",
            "attack_object_name": "Scripting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by scripting techniques when they are used as a platform to deliver or execute scripts that perform malicious activities. For example, adversaries might leverage a compromised web application to host or distribute malicious scripts, which can be used for further attacks such as lateral movement or persistence within a network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1051",
            "attack_object_name": "Shared Webroot",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Shared Webroot technique directly targets web applications by exploiting vulnerabilities in the web server's configuration. Adversaries can add malicious content to the webroot, causing the server to execute this content under its context and permissions, potentially compromising the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1051",
            "attack_object_name": "Shared Webroot",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Shared Webroot technique abuses web applications by using them as a vector for lateral movement. By placing malicious content in the webroot, adversaries can execute remote access tools or scripts, leveraging the web application to gain further access or control over the system hosting the web server."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1586",
            "attack_object_name": "Compromise Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often provide user account functionalities, which can be directly targeted by adversaries seeking to compromise accounts. This can involve exploiting vulnerabilities in authentication mechanisms or using methods like phishing to gain unauthorized access to user accounts within the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused by botnets as part of their operations. For example, compromised web applications might be used as part of a botnet to launch Distributed Denial of Service (DDoS) attacks against other targets. In this context, the web application serves as a tool or stepping stone in the botnet's malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.010",
            "attack_object_name": "Downgrade Attack",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by Downgrade Attacks. For example, an adversary might attempt to downgrade an HTTPS connection to HTTP, exposing sensitive data transmitted between the client and the server. This type of attack directly compromises the security of the web application by exploiting its reliance on secure protocols."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1102",
            "attack_object_name": "Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The T1102 Web Service technique abuses Web Applications by leveraging them as a tool for relaying data to/from a compromised system. Web Applications, particularly those providing services like cloud storage or social media, can be misused to facilitate adversary communication and hide malicious activities within normal traffic."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by the 'Credentials In Files' technique. Adversaries may search for configuration files or source code within the web application that contain hard-coded credentials or insecurely stored sensitive information. This can lead to unauthorized access to the application or its associated services."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1568.003",
            "attack_object_name": "DNS Calculation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of a broader attack strategy using DNS Calculation. For instance, if a web application is compromised, it may be used to facilitate command and control communications by leveraging DNS Calculation to bypass network security measures. This makes the web application a tool in the attack rather than the direct target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1218.005",
            "attack_object_name": "Mshta",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Mshta technique when they are used as a delivery mechanism for malicious HTA files or scripts. For example, an attacker could host a malicious HTA file on a web server, and then use mshta.exe to execute it. In this scenario, the web application serves as a conduit for delivering the payload, thereby being abused to facilitate the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608",
            "attack_object_name": "Stage Capabilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Stage Capabilities' technique as they may be used to host or stage malicious capabilities. Adversaries may leverage compromised or legitimate web applications to store and distribute malicious payloads, tools, or resources necessary for further attacks, such as drive-by compromises or spearphishing campaigns."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.005",
            "attack_object_name": "Link Target",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by adversaries using the Link Target technique. Adversaries may clone legitimate web applications or their login pages to create malicious link targets. This can lead to the compromise of the web application by harvesting credentials or executing malicious scripts when users interact with these cloned pages."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.005",
            "attack_object_name": "Link Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused by adversaries using the Link Target technique. Adversaries may host malicious link targets on web applications, leveraging the trust and accessibility of these applications to deceive users. This can facilitate phishing attacks or the distribution of malware, using the web application as a platform to reach victims."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1104",
            "attack_object_name": "Multi-Stage Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of the Multi-Stage Channels technique if they are used as a medium to facilitate command and control communication. For example, a compromised web application may serve as an intermediary or proxy for C2 traffic, helping to obfuscate the true origin and destination of the communication, thus aiding in the adversary's efforts to maintain stealth and persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1657",
            "attack_object_name": "Financial Theft",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are often targeted in financial theft attacks due to their role in processing financial transactions and storing sensitive financial data. Techniques such as injection attacks and session hijacking can be used to compromise web applications, allowing adversaries to steal monetary resources directly from the application or its users."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1657",
            "attack_object_name": "Financial Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of a financial theft scheme by serving as a platform for social engineering attacks, such as phishing, where adversaries impersonate trusted entities to deceive users into transferring funds. Additionally, compromised web applications can be used to host malicious content or redirect users to fraudulent sites as part of broader financial theft campaigns."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1480",
            "attack_object_name": "Execution Guardrails",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Execution Guardrails technique when adversaries use them as a platform to deliver or execute payloads selectively based on certain conditions. For example, adversaries might configure guardrails to ensure that malicious code is only executed when the web application is accessed from specific IP addresses or user-agents, thus leveraging the web application as a tool to further their attack while avoiding detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1606.001",
            "attack_object_name": "Web Cookies",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Web Cookies' targets web applications by forging session cookies to gain unauthorized access. This directly compromises the web application by allowing adversaries to bypass authentication mechanisms and access protected resources."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1654",
            "attack_object_name": "Log Enumeration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can generate logs that may be enumerated by adversaries using the Log Enumeration technique. While the web application is not the direct target, its logs can be abused to gather information about user activities, authentication events, and potential vulnerabilities, which can be used to further an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1134.001",
            "attack_object_name": "Token Impersonation/Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Token Impersonation/Theft if they are used as a platform to execute or facilitate the token theft process. For example, if a web application is compromised, it could be used to execute scripts or commands that perform token impersonation, leveraging the application's access to the underlying system or network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1567.001",
            "attack_object_name": "Exfiltration to Code Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Exfiltration to Code Repository' if they are used as a conduit for data exfiltration. For instance, if a web application is compromised, it may be used to send data to a code repository, leveraging the application's legitimate access to the internet and potentially bypassing security controls."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1021.007",
            "attack_object_name": "Cloud Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Cloud Services technique (T1021.007) when adversaries use them as a means to access cloud services. For instance, if a web application is integrated with cloud services and uses federated identity management, adversaries may exploit valid accounts obtained through the web application to gain unauthorized access to cloud resources."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1205.001",
            "attack_object_name": "Port Knocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Port Knocking can be used to abuse a web application by enabling hidden communication channels or persistence mechanisms. While the web application itself is not the direct victim, it can be leveraged as a tool to facilitate stealthy communication or access, potentially aiding in lateral movement or evasion within a network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1583.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique 'Web Services' (T1583.006) can abuse web applications by leveraging them as platforms for adversarial activities such as Command and Control, Exfiltration, or Phishing. Web applications can be used as intermediaries or tools to facilitate these malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1528",
            "attack_object_name": "Steal Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are targeted by the 'Steal Application Access Token' technique because they often use access tokens to authenticate and authorize API requests. Adversaries can steal these tokens to gain unauthorized access to the web application's resources and perform actions with the permissions of the compromised account."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1598.002",
            "attack_object_name": "Spearphishing Attachment",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Spearphishing Attachment technique does not directly target web applications, the information gathered through successful spearphishing attacks can be used to abuse web applications. For example, credentials obtained from a spearphishing attack could be used to gain unauthorized access to a web application, thereby abusing it for further malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1098.001",
            "attack_object_name": "Additional Cloud Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused in the context of this technique if they are part of a cloud environment where adversaries add credentials to maintain access. For example, if a web application has access to cloud resources, adversaries might exploit it to add credentials and misuse the application's permissions within the cloud infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1204",
            "attack_object_name": "User Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'User Execution' technique when adversaries deceive users into executing malicious JavaScript within their browsers. This can occur through social engineering tactics that lead users to interact with web applications in a way that executes malicious code, such as stealing web session cookies or downloading malware."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1491.001",
            "attack_object_name": "Internal Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by Internal Defacement attacks, where adversaries modify the content of the web application to intimidate or mislead users. This compromises the integrity of the web application and can damage the organization's reputation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1134.003",
            "attack_object_name": "Make and Impersonate Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by the 'Make and Impersonate Token' technique, they can be abused if an adversary gains access to a web server or application environment where they can create and impersonate tokens. This can be used to escalate privileges or move laterally within the network, leveraging the web application as a stepping stone."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1048.002",
            "attack_object_name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using technique T1048.002 to exfiltrate data. Once a web application is compromised, it can be used as a conduit to send data over encrypted protocols like HTTPS, leveraging the application's legitimate use of these protocols to evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1087.004",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Cloud Account' (T1087.004) does not directly abuse web applications, web applications can be used as a stepping stone to access cloud accounts if they are improperly secured. For instance, if a web application has vulnerabilities that allow unauthorized access, adversaries could potentially leverage this access to enumerate cloud accounts associated with the application or its infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1057",
            "attack_object_name": "Process Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Process Discovery does not directly target web applications, it can be used to abuse them by gathering information about the processes running on the server hosting the web application. This information can be leveraged to understand the server environment, identify potential vulnerabilities, and plan further attacks on the web application or other assets within the same environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1596.004",
            "attack_object_name": "CDNs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique T1596.004 (CDNs) can be used to abuse web applications by leveraging CDN data to gather information that may facilitate further attacks on web applications. For example, adversaries may identify misconfigurations or sensitive information leaks in CDN settings that could be used to compromise web applications indirectly."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1497.002",
            "attack_object_name": "User Activity Based Checks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using 'User Activity Based Checks' to determine if the environment is suitable for executing their malicious payloads. For example, adversaries might check user interactions within a web application to decide whether to proceed with further malicious activities, thus using the web application as a tool to gauge the environment's legitimacy."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1141",
            "attack_object_name": "Input Prompt",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused by adversaries using the 'Input Prompt' technique to create fake input prompts within the application interface. This could trick users into providing credentials or other sensitive information, which can then be used for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1496.004",
            "attack_object_name": "Cloud Service Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, especially those that are part of SaaS platforms, can be abused in the context of 'Cloud Service Hijacking'. Adversaries may leverage these applications to perform resource-intensive tasks or misuse them to send spam or phishing messages, impacting the availability and incurring costs for the victim."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1585.003",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using cloud accounts to host malicious content or tools that interact with or exploit vulnerabilities in web applications. This can include using cloud-based infrastructure to launch attacks against web applications or to exfiltrate data from them."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1072",
            "attack_object_name": "Software Deployment Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using 'Software Deployment Tools' as a means to execute commands and move laterally through the network. If a web application is part of a CI/CD pipeline or integrated with deployment tools, it could be leveraged to deploy malicious code or scripts across the network, thereby abusing the web application as a stepping stone."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1041",
            "attack_object_name": "Exfiltration Over C2 Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused to facilitate 'Exfiltration Over C2 Channel' if they are compromised and used as a conduit for data exfiltration. An attacker could leverage a compromised web application to send stolen data through its legitimate communication channels, effectively abusing the application as part of the exfiltration process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1591",
            "attack_object_name": "Gather Victim Org Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused by adversaries using the 'Gather Victim Org Information' technique as they can be a source of organizational information. Adversaries might extract information from publicly accessible sections of web applications, such as company details, employee roles, and contact information, to facilitate further reconnaissance and targeting activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1606",
            "attack_object_name": "Forge Web Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Forge Web Credentials' directly targets web applications by creating forged credential materials to gain unauthorized access to the application. This compromises the web application by allowing adversaries to bypass authentication mechanisms and access sensitive resources."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1621",
            "attack_object_name": "Multi-Factor Authentication Request Generation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that implement multi-factor authentication (MFA) can be abused by the technique 'Multi-Factor Authentication Request Generation'. Adversaries may exploit the web application's MFA process to generate excessive authentication requests, causing 'MFA fatigue' and potentially gaining unauthorized access if a user inadvertently approves the request."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1554",
            "attack_object_name": "Compromise Host Software Binary",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Compromise Host Software Binary' does not directly target web applications, it can abuse them indirectly. If a web application is used to deploy or execute compromised binaries on a host system, it can serve as a conduit for the attack. For instance, if a web application is exploited to upload or modify binaries on the server, it can be used to further the attack by establishing persistence or executing malicious code on the host system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1552.008",
            "attack_object_name": "Chat Messages",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that integrate with chat services or collaboration tools can be abused by this technique. If a web application facilitates communication or integrates with services like Slack or Teams, it may be leveraged to access and extract credentials shared within those services, thus being abused as a tool to further an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While PowerShell itself does not directly target web applications, it can be used to abuse a compromised web server or application. For instance, if an attacker gains access to a web server hosting a web application, they could use PowerShell to execute further malicious activities, such as downloading additional payloads or moving laterally within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055.014",
            "attack_object_name": "VDSO Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Web Applications are not directly targeted by VDSO Hijacking, they can be abused in the sense that if an attacker gains control over a process on the server hosting the web application, they could use VDSO Hijacking to execute arbitrary code. This could allow the attacker to leverage the web application server as a stepping stone for further attacks, such as accessing sensitive data or moving laterally within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1026",
            "attack_object_name": "Multiband Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused by the Multiband Communication technique if they are used as a medium for splitting command and control communications across different protocols. This could involve leveraging the web application's communication channels to bypass network security measures, making it a tool in the attack rather than the target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1071.002",
            "attack_object_name": "File Transfer Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the File Transfer Protocols technique (T1071.002) to exfiltrate data or communicate with compromised systems. Adversaries may leverage the web application's ability to handle file transfers to blend malicious traffic with legitimate traffic, thereby avoiding detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are often targeted by adversaries exploiting vulnerabilities to gain unauthorized access to credentials. These applications can have vulnerabilities in their authentication mechanisms or other parts of their code that adversaries can exploit to access sensitive information like user credentials."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1102.003",
            "attack_object_name": "One-Way Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications, particularly popular web services, are abused by adversaries in the One-Way Communication technique. They are leveraged as a medium for sending commands to compromised systems, taking advantage of their legitimate use and encryption to hide malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1590",
            "attack_object_name": "Gather Victim Network Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be leveraged to gather network information indirectly. For instance, adversaries might exploit vulnerabilities in web applications to gain insights into the underlying network infrastructure, such as IP addresses and domain configurations, which can aid in further reconnaissance and targeting."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are directly targeted by the Exploitation of Remote Services technique. Adversaries exploit vulnerabilities in web applications to gain unauthorized access or execute malicious code, compromising the application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1534",
            "attack_object_name": "Internal Spearphishing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, particularly those used for communication like internal chat apps, can be abused in the context of 'Internal Spearphishing'. Adversaries may use these platforms to distribute phishing messages or malicious content, leveraging the web application's communication capabilities to reach other users within the organization."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1199",
            "attack_object_name": "Trusted Relationship",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Trusted Relationships if they are part of the infrastructure managed by a third-party provider. If an adversary gains access through a trusted relationship, they may use the web application as a stepping stone to further their attack, leveraging the application's access to internal systems or data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1136.003",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, especially those integrated with cloud services, can be abused by adversaries who create cloud accounts. These accounts can be used to manipulate web applications indirectly by gaining access to cloud resources that the web application depends on, potentially leading to unauthorized actions or persistence within the environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1593",
            "attack_object_name": "Search Open Websites/Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of this technique as they may host publicly accessible information that adversaries can search and gather. This information can be used to further an attack by identifying potential vulnerabilities or gathering intelligence about the organization."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1098",
            "attack_object_name": "Account Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often manage user accounts and authentication mechanisms, making them direct targets for account manipulation attacks. Adversaries may exploit vulnerabilities in the web application to manipulate user accounts, such as changing credentials or permissions, to gain unauthorized access or escalate privileges."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1170",
            "attack_object_name": "Mshta",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Mshta technique when they are used to host or serve malicious HTA files. Adversaries may use web applications as a delivery mechanism to execute mshta.exe on a victim's system by directing them to a URL that serves a malicious HTA file."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1048",
            "attack_object_name": "Exfiltration Over Alternative Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Exfiltration Over Alternative Protocol' technique to exfiltrate data. Since web applications often handle sensitive data and communicate over various protocols, they can be leveraged as a conduit for exfiltrating data using alternative protocols like HTTP/S, FTP, etc."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1056.002",
            "attack_object_name": "GUI Input Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the GUI Input Capture technique when adversaries create fake web pages or forms that mimic legitimate web application interfaces to capture user credentials. This technique leverages the web application as a tool to deceive users into providing sensitive information."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1097",
            "attack_object_name": "Pass the Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not the direct target of the 'Pass the Ticket' technique, they can be abused in scenarios where an attacker uses a compromised Kerberos ticket to gain unauthorized access to resources that the web application interacts with. For example, if a web application relies on backend services or databases that use Kerberos authentication, an attacker could leverage a valid ticket to access these resources through the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1588.002",
            "attack_object_name": "Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While T1588.002 (Tool) does not directly target web applications, the tools acquired through this technique can be used to abuse web applications. For example, adversaries may use tools to exploit vulnerabilities in web applications or to conduct attacks such as injection or cross-site scripting (XSS). Therefore, web applications can be indirectly abused by the tools acquired through this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053.006",
            "attack_object_name": "Systemd Timers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved if an adversary gains access to the underlying server hosting the web application. In such scenarios, the adversary might abuse systemd timers to schedule malicious tasks or maintain persistence on the server, which indirectly affects the web application by compromising the server environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1566",
            "attack_object_name": "Phishing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused in phishing attacks when adversaries use compromised web applications to host phishing pages or distribute phishing emails. This makes the web application a tool in the phishing campaign, rather than the direct target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1496.001",
            "attack_object_name": "Compute Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Compute Hijacking if they are hosted on servers or cloud environments that are targeted for their compute resources. If a web application is running on a compromised server, the server's resources could be hijacked for malicious activities such as cryptocurrency mining, thereby indirectly abusing the web application as part of the larger system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1090.003",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of a multi-hop proxy chain. Adversaries may leverage compromised web applications to route malicious traffic through them, using them as stepping stones to disguise the origin of the attack. This misuse aligns with the Multi-hop Proxy technique by utilizing web applications to further obfuscate the attack path."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are often targeted by brute force attacks as adversaries attempt to gain unauthorized access to accounts by systematically guessing passwords. This can compromise the web application by allowing unauthorized access to sensitive data or administrative functions."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.004",
            "attack_object_name": "Unix Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries using Unix shell commands to exploit vulnerabilities such as command injection. This can lead to unauthorized command execution on the server hosting the web application, compromising the application and potentially gaining access to sensitive data or system resources."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.004",
            "attack_object_name": "Unix Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries leveraging Unix shell scripts to further an attack. For example, once a web application is compromised, it can be used as a stepping stone to execute shell scripts that facilitate lateral movement, persistence, or further exploitation of other systems within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.001",
            "attack_object_name": "Disable or Modify Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of this technique if they are used to host or deploy security tools or monitoring agents. Adversaries may disable or modify these tools to avoid detection while conducting further attacks. For example, if a web application includes monitoring or logging components, these could be tampered with to hide malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1565",
            "attack_object_name": "Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are often targeted by data manipulation attacks as adversaries can exploit vulnerabilities in the application to insert, delete, or alter data. This can compromise the integrity of the data processed or stored by the application, potentially affecting business processes and decision-making."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1559",
            "attack_object_name": "Inter-Process Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries leveraging Inter-Process Communication (IPC) mechanisms to execute arbitrary code or commands. This can occur if a web application interfaces with underlying system processes or services that utilize IPC. An attacker could exploit vulnerabilities in the web application to misuse IPC for executing malicious activities, such as lateral movement or privilege escalation, thereby abusing the web application as a stepping stone in their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1001",
            "attack_object_name": "Data Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by Data Obfuscation techniques when adversaries use them to transmit obfuscated command and control traffic. The web application itself is not the target but can be leveraged as a channel for obfuscated communications, making it a tool for furthering an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using technique T1584.006 - Web Services. Adversaries may leverage compromised web services to facilitate other stages of their attack lifecycle, such as Command and Control or Exfiltration, using the web application as a tool or stepping stone rather than the primary target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574",
            "attack_object_name": "Hijack Execution Flow",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Hijack Execution Flow' technique if an adversary leverages the web application's environment or dependencies to manipulate execution flow. For instance, if a web application relies on specific libraries or execution paths, adversaries might hijack these to execute malicious payloads, using the web application as a stepping stone to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.011",
            "attack_object_name": "Lua",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using Lua scripts for execution purposes. If a web application allows the execution of Lua scripts, adversaries may leverage this capability to execute malicious Lua code, potentially using the web application as a platform for further attacks or to maintain persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.005",
            "attack_object_name": "Indicator Removal from Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique does not directly target web applications, it can be used to abuse them by deploying modified tools that evade detection within the web application environment. For instance, an attacker might modify a web shell or other malicious script to avoid detection by web application firewalls or intrusion detection systems, thereby using the web application as a means to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1204.003",
            "attack_object_name": "Malicious Image",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Malicious Image' technique if they are deployed within containerized environments or cloud instances that use images. If a web application is deployed using a backdoored image, it can be misused to execute malicious code, such as cryptocurrency mining, thus abusing the web application as a tool for the adversary's objectives."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1543.005",
            "attack_object_name": "Container Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be hosted within container environments. If an adversary exploits the Container Service technique to gain control over the container infrastructure, they could abuse the web application hosted within these containers. This abuse could involve using the web application as a stepping stone for further attacks, such as lateral movement or privilege escalation within the containerized environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by adversaries using the Valid Accounts technique. Attackers may exploit vulnerabilities in the web application's authentication mechanisms to gain unauthorized access by using compromised credentials. This can lead to unauthorized access to sensitive data and functionality within the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused by adversaries using the Valid Accounts technique as a means to further an attack. Once valid credentials are obtained, attackers can use the web application as a stepping stone to access other systems or services within the network, leveraging the web application's access permissions to move laterally or escalate privileges."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1571",
            "attack_object_name": "Non-Standard Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Non-Standard Port' technique as adversaries may configure the application to communicate over non-standard ports. This can be used to evade detection by network monitoring tools that expect traffic on standard ports, thus facilitating malicious activities such as data exfiltration or command and control communication."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by exploitation for privilege escalation if they contain vulnerabilities that allow adversaries to execute code with elevated privileges. This can occur if the web application has flaws that permit unauthorized access to administrative functions or sensitive data, leading to a compromise of the application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by exploitation for privilege escalation when they are used as a stepping stone to gain higher privileges on the underlying server or network. For example, an attacker might exploit a vulnerability in a web application to escalate privileges on the host system, enabling further attacks on other assets or systems."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1531",
            "attack_object_name": "Account Access Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused by adversaries using the 'Account Access Removal' technique to manipulate user accounts within the application. This can be part of a broader attack strategy where the web application serves as a platform for account manipulation, potentially aiding in further malicious activities such as disrupting service or evading detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1110.004",
            "attack_object_name": "Credential Stuffing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are directly targeted by credential stuffing attacks as adversaries attempt to gain unauthorized access to user accounts by exploiting the tendency of users to reuse passwords across different services. This can lead to unauthorized access to sensitive data and services provided by the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Obfuscated Files or Information' technique when adversaries use obfuscation to hide malicious scripts or payloads within the web application's environment. This can be used to bypass security controls and execute malicious actions without detection, leveraging the web application as a platform for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1556.006",
            "attack_object_name": "Multi-Factor Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique T1556.006 can abuse web applications by modifying or disabling their MFA mechanisms. This abuse allows adversaries to exploit the web application as a tool to gain unauthorized access to user accounts or sensitive data without triggering the intended security controls."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1114.002",
            "attack_object_name": "Remote Email Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as a means to facilitate 'Remote Email Collection' if they are used as a platform to host or interact with email services. For example, if a web application provides an interface to access email services, adversaries might exploit vulnerabilities in the web application to gain unauthorized access to email credentials or tokens, which can then be used to perform remote email collection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1505.004",
            "attack_object_name": "IIS Components",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique involves installing malicious components on IIS web servers, which are a type of web application. This directly targets the web application by compromising its functionality and potentially allowing adversaries to execute commands or modify traffic."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1154",
            "attack_object_name": "Trap",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by the 'Trap' technique, they can be abused in scenarios where an attacker gains access to the underlying server or environment hosting the web application. In such cases, the attacker could use the 'Trap' technique to establish persistence or execute malicious commands in response to specific signals, thereby abusing the web application's hosting environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.014",
            "attack_object_name": "Polymorphic Code",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by polymorphic code when adversaries use such code to deliver malicious payloads or scripts that evade detection by web application firewalls or other security mechanisms. This allows the adversary to misuse the web application as a conduit for further attacks or to maintain persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1201",
            "attack_object_name": "Password Policy Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Password Policy Discovery if they are used to access or expose password policy information. For instance, if a web application interfaces with backend systems that store or enforce password policies, adversaries might leverage the application to indirectly discover these policies, especially if the application has insufficient access controls or exposes sensitive configuration details."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1546",
            "attack_object_name": "Event Triggered Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Event Triggered Execution' if they are used as a vector to establish persistence or elevate privileges on the underlying system or cloud environment. For instance, if a web application has vulnerabilities that allow an adversary to modify system event triggers or cloud functions, it can be leveraged to execute malicious code indirectly, thereby abusing the web application as a stepping stone."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1546.004",
            "attack_object_name": "Unix Shell Configuration Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not directly targeted by 'Unix Shell Configuration Modification', they can be abused in scenarios where an attacker gains access to the underlying server hosting the web application. If the attacker can modify shell configuration files, they could potentially use this technique to maintain persistence on the server, indirectly affecting the web application by ensuring continued unauthorized access to the server environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1187",
            "attack_object_name": "Forced Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Forced Authentication technique when they are used to host or serve malicious content that triggers forced authentication. For example, a web application could serve a document or link that causes a user's system to attempt authentication with an adversary-controlled server, thereby facilitating the capture of credentials."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1599",
            "attack_object_name": "Network Boundary Bridging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in conjunction with Network Boundary Bridging when an adversary uses compromised network devices to route prohibited traffic to or from a web application. This can facilitate further attacks on the web application or use it as a stepping stone for command and control or data exfiltration activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1486",
            "attack_object_name": "Data Encrypted for Impact",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by the 'Data Encrypted for Impact' technique, as adversaries may encrypt data stored or processed by the web application to disrupt its availability. This can include encrypting databases or other critical files that the web application relies on, effectively rendering the application non-functional until a ransom is paid or the data is otherwise recovered."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries seeking to subvert trust controls. This can occur when attackers exploit vulnerabilities in the web application's code or configuration to bypass security mechanisms that verify the trustworthiness of the application or its components. For example, an attacker might manipulate the application's handling of code signing certificates or other trust indicators to execute untrusted code or gain unauthorized access."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1573",
            "attack_object_name": "Encrypted Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Encrypted Channel' technique when adversaries use the web application as a conduit to establish encrypted communication channels. This can be part of a larger attack strategy where the web application is leveraged to facilitate secure command and control communications, potentially bypassing network defenses that inspect unencrypted traffic."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1218.010",
            "attack_object_name": "Regsvr32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Regsvr32 can be abused to execute scripts from a URL, which could potentially be hosted on a web application. This means a web application could be leveraged as a delivery mechanism for malicious scripts, making it an indirect participant in the attack. However, the primary abuse is of the Regsvr32 utility itself, not the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1002",
            "attack_object_name": "Data Compressed",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A web application can be abused by the 'Data Compressed' technique (T1002) if it is used as a means to facilitate the compression of data prior to exfiltration. For example, if an adversary gains access to a web application and uses its resources or capabilities to compress data before exfiltrating it, the web application is being abused to further the attacker's objectives."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1567.003",
            "attack_object_name": "Exfiltration to Text Storage Sites",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries to facilitate the exfiltration of data to text storage sites. If a web application is compromised, it could be used as a conduit to send data to these sites, leveraging the application's network access and capabilities to further the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1081",
            "attack_object_name": "Credentials in Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often store configuration files and scripts that may contain hardcoded credentials or access tokens. Adversaries can exploit vulnerabilities in the web application to access these files and extract credentials, compromising the web application and potentially gaining unauthorized access to other systems or services."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1592.002",
            "attack_object_name": "Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of T1592.002 (Software) as adversaries may leverage them to gather information about the software running on a host. This can be done through techniques like active scanning of web applications to extract software details (e.g., server banners, user agent strings) which can then be used for further reconnaissance or planning subsequent attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1056",
            "attack_object_name": "Input Capture",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are often targeted by input capture techniques such as keylogging or form grabbing to steal user credentials or sensitive information entered by users. These attacks exploit vulnerabilities in the web application to capture input data directly from users interacting with the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1587.004",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Exploits' directly targets web applications by taking advantage of vulnerabilities within the application code, user authentication mechanisms, or data handling practices. This can lead to unauthorized access, code execution, or data theft, compromising the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1593.001",
            "attack_object_name": "Social Media",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Social Media technique (T1593.001) does not directly abuse web applications, information gathered from social media could be used to craft attacks that may indirectly involve web applications, such as spearphishing attacks that lead to exploitation of web application vulnerabilities. Therefore, web applications could be indirectly abused as part of a broader attack strategy informed by social media reconnaissance."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1213.004",
            "attack_object_name": "Customer Relationship Management Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that host or interface with CRM software can be abused by adversaries to access and extract customer data. While the web application itself is not the direct target, it serves as a conduit for accessing the CRM software, thus being abused in the process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are often targeted by adversaries seeking to gather credentials. This can occur through various methods such as exploiting vulnerabilities in the application to access stored credentials, or through phishing attacks that trick users into providing their credentials on a malicious web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries to gather credentials from users. For example, adversaries may compromise a web application and inject malicious scripts that capture user credentials as they are entered. Additionally, compromised web applications can be used to distribute phishing content or redirect users to malicious sites designed to harvest credentials."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1195.002",
            "attack_object_name": "Compromise Software Supply Chain",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Compromise Software Supply Chain' directly targets web applications by manipulating the application software, such as its source code or distribution mechanisms, before it reaches the end user. This can lead to the compromise of the web application itself, making it a primary victim of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1102.002",
            "attack_object_name": "Bidirectional Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, particularly those offering popular services or social media platforms, can be abused by adversaries using the Bidirectional Communication technique. They serve as a medium for sending commands to and receiving data from compromised systems, leveraging the web application's legitimate communication channels to hide malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by exploitation techniques such as injection attacks, cross-site scripting (XSS), and other vulnerabilities that allow adversaries to execute arbitrary code. These vulnerabilities can be exploited to gain unauthorized access, execute malicious code, or steal sensitive data from the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1595.003",
            "attack_object_name": "Wordlist Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Wordlist Scanning directly targets web applications by probing their infrastructure to identify content and hidden directories. This technique is used to discover old, vulnerable pages or hidden administrative portals that could be exploited in further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.011",
            "attack_object_name": "Spoof Security Alerting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused in the context of 'Spoof Security Alerting' if they are involved in the display or reporting of security alerts. For instance, if a web application is used as an interface for security monitoring, adversaries might spoof alerts within the application to mislead defenders and enable further malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1573.002",
            "attack_object_name": "Asymmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using Asymmetric Cryptography (T1573.002) to encrypt command and control traffic. This abuse leverages the web application as a conduit for encrypted communications, potentially allowing adversaries to conceal malicious activities within legitimate traffic, thereby misusing the web application as a tool for evasion and secure communication."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1567.002",
            "attack_object_name": "Exfiltration to Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused to facilitate the technique 'Exfiltration to Cloud Storage'. If a web application is compromised, it can be used as a conduit to exfiltrate data to cloud storage services. This misuse of the web application allows adversaries to leverage the application's network communications to blend in with legitimate traffic, thus aiding in the exfiltration process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1570",
            "attack_object_name": "Lateral Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of Lateral Tool Transfer if they are used as a conduit for transferring files or tools between systems. For example, adversaries might leverage web applications to upload or download tools, using the web application's file handling capabilities to facilitate lateral movement within a network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.009",
            "attack_object_name": "Path Interception by Unquoted Path",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by the 'Path Interception by Unquoted Path' technique, they can be abused if they are hosted on Windows servers. If a web application has dependencies or services running on a Windows server that are vulnerable to unquoted path issues, an adversary could exploit this to execute malicious code, potentially affecting the web application indirectly."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.003",
            "attack_object_name": "Install Digital Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries installing digital certificates to enable encrypted communications for malicious activities. This can include encrypting command and control (C2) traffic or making a credential harvesting site appear legitimate. The web application itself is used as a tool to further the adversary's operations."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1168",
            "attack_object_name": "Local Job Scheduling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications themselves are not directly targeted by the 'Local Job Scheduling' technique, they could be abused in scenarios where an attacker gains access to the underlying server hosting the web application. The attacker could then use local job scheduling to maintain persistence or execute malicious scripts on the server, indirectly affecting the web application's security and functionality."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1100",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Application is directly targeted by the Web Shell technique. Adversaries place web shells on vulnerable web applications to gain unauthorized access and control over the application and potentially the underlying server. This compromises the web application by allowing the execution of arbitrary commands and scripts."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1095",
            "attack_object_name": "Non-Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not directly targeted by the 'Non-Application Layer Protocol' technique, they can be abused in the sense that adversaries may use non-application layer protocols to bypass security controls or to communicate with command and control (C2) servers without detection. This can involve misusing the network infrastructure that supports web applications to facilitate malicious activities, such as data exfiltration or lateral movement within a network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.003",
            "attack_object_name": "Steganography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using steganography to hide malicious payloads within media files that are uploaded or processed by the application. This can allow adversaries to bypass security mechanisms and execute hidden code, using the web application as a conduit for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.002",
            "attack_object_name": "DNS Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly affected by the DNS Server technique (T1584.002) when adversaries compromise DNS servers to redirect traffic intended for legitimate web applications to malicious sites. This abuse can lead to phishing, data theft, or other malicious activities against users of the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1001.003",
            "attack_object_name": "Protocol or Service Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Protocol or Service Impersonation' technique as adversaries may manipulate web traffic to mimic legitimate services or protocols. This can involve altering HTTP headers, URI endpoints, and SSL certificates to disguise malicious activities as legitimate web application traffic, using the web application as a tool to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1030",
            "attack_object_name": "Data Transfer Size Limits",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Data Transfer Size Limits' technique if an adversary has already gained access to the application and is using it to exfiltrate data. The web application serves as a conduit for data transfer, and the technique is used to avoid detection during the exfiltration process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1550.004",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Session Cookie technique directly targets web applications by exploiting vulnerabilities in session management. Adversaries use stolen session cookies to authenticate to web applications, bypassing authentication mechanisms and gaining unauthorized access to sensitive information and functionalities within the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1078.002",
            "attack_object_name": "Domain Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries who have obtained domain account credentials. Once an adversary has access to domain accounts, they can potentially use these credentials to access web applications that are part of the domain environment, leveraging the web application as a tool for further attacks, such as lateral movement or privilege escalation within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1506",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Session Cookie technique directly targets web applications by exploiting vulnerabilities in session management. Adversaries use stolen session cookies to authenticate to web applications, effectively compromising the application by allowing unauthorized access to sensitive information and functionalities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1553.004",
            "attack_object_name": "Install Root Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by this technique when adversaries install a root certificate to intercept or manipulate secure communications between the web application and its users. This allows adversaries to perform man-in-the-middle attacks, potentially capturing sensitive data transmitted through the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1499",
            "attack_object_name": "Endpoint Denial of Service",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by Endpoint Denial of Service attacks. These attacks aim to degrade or block the availability of the web application by exhausting system resources or causing persistent crash conditions. This makes the web application the primary victim of the attack, as its availability and functionality are compromised."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.004",
            "attack_object_name": "Compile After Delivery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Compile After Delivery' technique if they are used as a delivery mechanism for uncompiled code. For example, a web application could be compromised to serve malicious source code to users, which would then need to be compiled on the user's machine. In this scenario, the web application acts as a tool or vector to deliver the malicious payload, rather than being the direct target of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1065",
            "attack_object_name": "Uncommonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Uncommonly Used Port' technique when adversaries use the application to communicate over non-standard ports. This can be part of a strategy to evade detection by network security devices that are configured to monitor traffic on standard ports. In this context, the web application is leveraged as a tool to facilitate communication, but it is not the direct target of the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1614",
            "attack_object_name": "System Location Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be leveraged to facilitate System Location Discovery by adversaries. For example, an attacker could use a web application to infer the location of a user or system by analyzing IP addresses or other location-related data that the application processes or logs. Thus, while the web application is not the direct target, it can be abused as a tool to gather location information."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1656",
            "attack_object_name": "Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in impersonation attacks when adversaries use compromised web application accounts or services to impersonate legitimate users. For example, if an adversary gains access to a web application's administrative account, they could send communications or perform actions that appear legitimate, thereby facilitating impersonation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1578.005",
            "attack_object_name": "Modify Cloud Compute Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique does not directly target web applications, it can indirectly abuse them by modifying cloud configurations that host or support web applications. This could lead to misuse of the web application's underlying infrastructure, potentially affecting its performance or security posture without directly attacking the web application code or logic."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1494",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by the Runtime Data Manipulation technique. Adversaries may alter the application binaries or manipulate the data as it is accessed and displayed, affecting the integrity and reliability of the web application. This manipulation can lead to compromised business processes and decision-making, making the web application a direct victim of this technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1090.004",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused by the Domain Fronting technique as they may be hosted on Content Delivery Networks (CDNs) that support domain fronting. This allows adversaries to misuse the web application's hosting infrastructure to obfuscate their true communication endpoints, leveraging the web application's CDN for malicious purposes such as evading detection and filtering mechanisms."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1557.002",
            "attack_object_name": "ARP Cache Poisoning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by ARP Cache Poisoning when adversaries use the compromised network traffic to intercept sensitive data being transmitted to or from the web application. This can include credentials or session tokens, which can then be used to further attack the web application or its users. Thus, while the web application is not directly targeted, it is indirectly abused through the manipulation of network traffic."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1562.008",
            "attack_object_name": "Disable or Modify Cloud Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of this technique if they are part of a cloud environment where logging is crucial for monitoring activities. An adversary may leverage a compromised web application to gain the necessary permissions to disable or modify cloud logs, thereby using the web application as a stepping stone to further their attack without being detected."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1518.001",
            "attack_object_name": "Security Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be leveraged as a means to gather information about the security software and configurations present in the environment. Adversaries may use web applications as entry points to perform discovery operations, including identifying security tools and configurations, which can aid in planning further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1493",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by Transmitted Data Manipulation as adversaries may alter data being transmitted to or from the application. This can affect the integrity of the data processed by the application, potentially leading to compromised business processes or decision-making based on manipulated data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1127.002",
            "attack_object_name": "ClickOnce",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the ClickOnce technique when adversaries host malicious ClickOnce applications on a web page. Users visiting the web application may be tricked into executing these applications, leading to the execution of malicious code. Thus, the web application serves as a delivery mechanism for the ClickOnce payload."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.006",
            "attack_object_name": "Python",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries using Python scripts to exploit vulnerabilities such as injection attacks or remote code execution. Python's capabilities allow attackers to automate the exploitation of web application vulnerabilities, potentially leading to unauthorized access or data theft."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.006",
            "attack_object_name": "Python",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using Python scripts to facilitate further attacks, such as using the application as a pivot point for lateral movement or as a platform to host malicious scripts. Python's versatility enables attackers to manipulate web application components to aid in persistence or evasion strategies."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1591.004",
            "attack_object_name": "Identify Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused by adversaries using the 'Identify Roles' technique if they contain publicly accessible information about organizational roles and identities. Adversaries can leverage this information to further their reconnaissance efforts and plan subsequent attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Data Encoding technique (T1132) as they may be used to transmit encoded command and control traffic. This technique can leverage web applications to hide malicious communications, making it a tool for furthering an attack rather than directly compromising the application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1598",
            "attack_object_name": "Phishing for Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in phishing campaigns by hosting phishing pages or being part of the infrastructure used to collect sensitive information. Attackers may exploit vulnerabilities in web applications to host malicious content or redirect users to phishing sites, thereby leveraging the web application as a tool in the phishing process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1496",
            "attack_object_name": "Resource Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications can be abused in Resource Hijacking scenarios when adversaries exploit vulnerabilities to execute code that leverages the application's underlying server resources. For example, attackers might inject scripts into a web application to utilize server resources for cryptocurrency mining, impacting the application's performance and availability."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1585",
            "attack_object_name": "Establish Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Establish Accounts' technique as adversaries may create accounts on web platforms to build personas. These personas can be used for social engineering or to leverage the web application for further malicious activities, such as phishing or acquiring infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1556.009",
            "attack_object_name": "Conditional Access Policies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries who modify conditional access policies to gain unauthorized access or maintain persistent access. By altering these policies, adversaries can misuse the web application as a tool to further their attack, such as by bypassing authentication mechanisms or expanding access privileges within the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1578.002",
            "attack_object_name": "Create Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the 'Create Cloud Instance' technique if they are leveraged to gain unauthorized access to cloud environments. For example, if a web application has vulnerabilities that allow an attacker to escalate privileges or access cloud management interfaces, it could be used as a stepping stone to create new cloud instances for malicious purposes."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1500",
            "attack_object_name": "Compile After Delivery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Compile After Delivery' technique as a delivery mechanism for uncompiled code. For instance, a web application could be used to deliver malicious source code as part of a spearphishing campaign or through a vulnerable upload feature, which is then compiled and executed on the target system. Thus, the web application serves as a conduit for the attack rather than the direct target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1555.006",
            "attack_object_name": "Cloud Secrets Management Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may abuse cloud secrets management stores by using them to retrieve sensitive credentials. If a web application is compromised, it could be used as a stepping stone to access the secrets stored in these management solutions, thereby facilitating further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1213.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of T1213.003 - Code Repositories, as they often serve as the interface for interacting with code repositories. Adversaries may exploit vulnerabilities in web applications to gain unauthorized access to these repositories, thereby using the web application as a tool to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1565.002",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by Transmitted Data Manipulation as adversaries may intercept and alter data being transmitted to or from the application. This manipulation can compromise the integrity of the data processed by the web application, affecting business processes and decision-making."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1003.008",
            "attack_object_name": "/etc/passwd and /etc/shadow",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A web application running on a Linux server could be abused to gain access to the underlying system files, including /etc/passwd and /etc/shadow, if vulnerabilities in the web application allow for privilege escalation or unauthorized access to the server's file system. Thus, while the web application itself is not the direct target, it can be a vector through which this technique is executed."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1569",
            "attack_object_name": "System Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in the 'System Services' technique if an adversary gains access to the underlying server hosting the web application. The adversary could then abuse system services on that server to execute malicious content, using the web application as a stepping stone to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.003",
            "attack_object_name": "Windows Command Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries to execute commands on the underlying server using the Windows Command Shell. If a web application has vulnerabilities that allow command injection or remote code execution, attackers may leverage these to gain access to the command shell of the server hosting the web application, using it as a stepping stone to further compromise the system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055.009",
            "attack_object_name": "Proc Memory",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in Proc Memory injection if an attacker gains access to the server through a vulnerability in the web application. Once on the server, the attacker can leverage the web application's processes or other processes on the server to perform memory injection attacks, thus abusing the web application as a stepping stone for further exploitation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1650",
            "attack_object_name": "Acquire Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of the 'Acquire Access' technique if they are already compromised and access to them is sold or shared by access brokers. This makes them a tool or stepping stone for adversaries to further their attack, leveraging the compromised web application for additional malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1558.002",
            "attack_object_name": "Silver Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Silver Ticket technique if they rely on Kerberos for authentication. An attacker with a forged TGS ticket could gain unauthorized access to the web application or its resources, using the application as a tool to further their attack without directly compromising the application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1213",
            "attack_object_name": "Data from Information Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries to access information repositories. For example, if a web application interfaces with a database or a collaboration platform, attackers could exploit vulnerabilities in the web application to gain unauthorized access to the information stored in these repositories. This makes the web application a tool or stepping stone in the execution of the technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1070.009",
            "attack_object_name": "Clear Persistence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Clear Persistence' is not directly used against web applications, it can be part of a broader attack strategy where a web application is initially compromised, and the adversary uses this technique to remove traces of persistence on the server hosting the web application. This allows the adversary to maintain stealth and evade detection, effectively abusing the web application as a tool to further their attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1036.010",
            "attack_object_name": "Masquerade Account Name",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Masquerade Account Name' technique if adversaries create or rename accounts within the application to appear legitimate. This can be used to maintain persistence or evade detection within the web application environment, leveraging the application's account management features as a tool for furthering an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1194",
            "attack_object_name": "Spearphishing via Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications, particularly those providing webmail or social media services, can be abused by the 'Spearphishing via Service' technique. Adversaries exploit these platforms to deliver spearphishing content, leveraging the web application's communication capabilities to reach the target."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1505",
            "attack_object_name": "Server Software Component",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the T1505 technique as adversaries may leverage the extensible development features of server software components that support web applications. By installing malicious components, adversaries can misuse the web application environment to maintain persistent access or further their attack objectives."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1485",
            "attack_object_name": "Data Destruction",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by data destruction attacks, especially if they handle critical data. Adversaries may exploit vulnerabilities in the web application to gain access and destroy data stored within the application or its associated databases, leading to a loss of availability and integrity of the service."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1132.002",
            "attack_object_name": "Non-Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Non-Standard Encoding' technique when adversaries use them as a conduit for command and control traffic. The web application may not be the direct target, but it can be misused to facilitate communication between the adversary and compromised systems, particularly if the web application is involved in transmitting or receiving encoded data."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1537",
            "attack_object_name": "Transfer Data to Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of this technique if they are used as a means to transfer data to an adversary-controlled cloud account. For instance, if a web application interfaces with cloud storage services, adversaries could exploit this functionality to exfiltrate data by transferring it to another cloud account they control."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.006",
            "attack_object_name": "HTML Smuggling",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "HTML Smuggling directly targets web applications by embedding malicious payloads within HTML files. These payloads can bypass security controls and content filters, compromising the web application by executing malicious code once the HTML is processed by the web server or client browser."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.010",
            "attack_object_name": "Command Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using Command Obfuscation when they deliver payloads or execute scripts that interact with or through the web application. For example, if a web application is used to execute server-side scripts or commands, adversaries may use obfuscation techniques to hide their malicious activities within the application's environment, making detection and analysis more challenging."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1130",
            "attack_object_name": "Install Root Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Install Root Certificate' technique when adversaries install a malicious root certificate to intercept or manipulate secure communications. This can lead to man-in-the-middle attacks where the adversary can spoof legitimate websites and collect sensitive information such as login credentials from users interacting with the web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1022",
            "attack_object_name": "Data Encrypted",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Data Encrypted' technique (T1022) when they are used as a conduit for exfiltrating encrypted data. Attackers may leverage vulnerabilities in a web application to gain access to sensitive data, encrypt it, and then exfiltrate it through the web application, thus abusing the web application as a means to hide the nature of the data being exfiltrated."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1070.004",
            "attack_object_name": "File Deletion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the File Deletion technique (T1070.004) when adversaries use the web application as a vector to execute file deletion commands on the underlying server. This could be part of a larger attack where the web application is leveraged to perform unauthorized actions on the server, such as cleaning up traces of other malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1189",
            "attack_object_name": "Drive-by Compromise",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Drive-by Compromise technique involves compromising a web application by injecting malicious code such as JavaScript or iFrames into legitimate websites. This makes the web application a direct target of the attack as the adversary aims to exploit vulnerabilities within the web application to deliver malicious content to users."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1189",
            "attack_object_name": "Drive-by Compromise",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications are abused in the Drive-by Compromise technique as they are used as a medium to deliver malicious content to users. The compromised web application serves as a stepping stone for adversaries to execute attacks on client endpoints, leveraging the web application to distribute exploit code or redirect users to malicious sites."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1498",
            "attack_object_name": "Network Denial of Service",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by Network Denial of Service attacks as they rely on network bandwidth to serve users. A DoS attack can exhaust the network resources, making the web application unavailable to legitimate users."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1546.016",
            "attack_object_name": "Installer Packages",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Installer Packages technique if they are distributed with malicious installer scripts. Adversaries can leverage the installation process of a web application to execute malicious scripts with elevated permissions, thereby using the web application as a tool to further their attack on the host system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1595.001",
            "attack_object_name": "Scanning IP Blocks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in the 'Scanning IP Blocks' technique as they may be hosted on the IP addresses being scanned. Information gathered from scanning can be used to identify web applications as potential targets for further attacks, such as exploiting vulnerabilities in the web application itself."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1158",
            "attack_object_name": "Hidden Files and Directories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the 'Hidden Files and Directories' technique to conceal malicious files or scripts within the web application's directory structure. This can aid in maintaining persistence or evading detection by hiding these files from normal user view or standard system analysis."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1221",
            "attack_object_name": "Template Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused by Template Injection if they are used to serve or distribute malicious documents containing template injections. For example, a web application that allows users to upload and share documents could be leveraged to distribute documents with template injections, thus abusing the web application as a distribution vector for the attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1111",
            "attack_object_name": "Multi-Factor Authentication Interception",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often implement multi-factor authentication (MFA) to enhance security. The technique 'Multi-Factor Authentication Interception' directly targets these MFA mechanisms to compromise the web application by intercepting authentication codes or credentials, thereby gaining unauthorized access."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly abused by the Serverless technique (T1584.007) when adversaries use compromised serverless environments to proxy traffic or hide infrastructure. Although the web application is not the direct target, it may be involved in facilitating malicious activities through its interactions with serverless services."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1071.001",
            "attack_object_name": "Web Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Web Protocols technique (T1071.001) abuses web applications by leveraging their communication protocols (such as HTTP/S) to facilitate covert communication. This technique exploits the web application's normal traffic channels to hide malicious activities, making it difficult to detect."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1059.005",
            "attack_object_name": "Visual Basic",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Visual Basic technique if they serve or interact with content that executes VBScript, such as HTML Applications (HTA) or documents with embedded VBA macros. This can occur if a web application is used to deliver malicious content that exploits VB capabilities on the client side, particularly in environments where VBScript is supported."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1543.002",
            "attack_object_name": "Systemd Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Systemd Service technique does not directly target web applications, it can be abused in scenarios where a compromised web application server is used to establish persistence or escalate privileges. If an adversary gains access to the server hosting the web application, they might leverage systemd services to maintain access or further exploit the system."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1136",
            "attack_object_name": "Create Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Create Account' technique when adversaries exploit vulnerabilities in the application to create unauthorized accounts. This can be used as a stepping stone to gain further access to the application or underlying systems, potentially leading to privilege escalation or data exfiltration."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications can be directly targeted by adversaries using the Server technique. Attackers may compromise web servers, which are a type of web application, to stage, launch, and execute operations. This includes using the compromised web application server for Command and Control or to support watering hole attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1526",
            "attack_object_name": "Cloud Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused in the context of 'Cloud Service Discovery' if they are used as a means to access or enumerate cloud services. For example, if a web application interfaces with cloud services, an adversary could leverage the application's access to discover information about the cloud environment, using the application as a stepping stone for further reconnaissance activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1018",
            "attack_object_name": "Remote System Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Remote System Discovery technique (T1018) does not directly target web applications, it can abuse them as a stepping stone. Web applications may be leveraged to gather information about the network environment, such as IP addresses or hostnames, which can then be used to facilitate further attacks, including lateral movement."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1046",
            "attack_object_name": "Network Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in Network Service Discovery if they expose network services or information that can be discovered by adversaries. For instance, if a web application is improperly configured, it might reveal information about backend services or network configurations that can be leveraged by attackers to map the network and identify potential targets for further exploitation."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1590.001",
            "attack_object_name": "Domain Properties",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in the Domain Properties technique as they may be part of the information collected about a domain. This information can be used to facilitate further attacks, such as reconnaissance or phishing, leveraging the web application's domain properties."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1518",
            "attack_object_name": "Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused during the Software Discovery process as adversaries may leverage them to gather information about the software environment they are running in. This information can be used to identify potential vulnerabilities or configurations that can be exploited in further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1538",
            "attack_object_name": "Cloud Service Dashboard",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused in the context of the Cloud Service Dashboard technique if they are used as a means to access cloud service dashboards. For example, if a web application is compromised and contains stored credentials or session tokens that allow access to a cloud service dashboard, it can be abused to further an attack on the cloud environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1622",
            "attack_object_name": "Debugger Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused in the context of Debugger Evasion if an adversary uses the application as a means to deliver or execute malware that employs debugger evasion techniques. For example, a web application could serve as a delivery mechanism for malware that includes debugger evasion capabilities, thus indirectly facilitating the evasion process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1608.006",
            "attack_object_name": "SEO Poisoning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in SEO Poisoning by adversaries who manipulate the content of these applications to influence search engine rankings. This involves using the web application as a tool to host or distribute malicious content, thus leveraging it for further attacks such as Drive-by Compromise."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1105",
            "attack_object_name": "Ingress Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the Ingress Tool Transfer technique by serving as a medium for transferring malicious tools or files. For example, adversaries may leverage web services or web-based file syncing services to transfer files into a victim's environment, using the web application as a conduit for these transfers."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1648",
            "attack_object_name": "Serverless Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Serverless Execution technique when adversaries leverage serverless functions to perform malicious activities that affect the web application indirectly. For example, serverless functions could be used to execute code that interacts with or manipulates data handled by a web application, thereby using the web application as a tool or stepping stone to further an attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055.008",
            "attack_object_name": "Ptrace System Calls",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Ptrace System Calls technique does not directly target web applications, it can be used to abuse them indirectly. If an adversary gains access to the server hosting the web application, they could use ptrace to manipulate processes running on the server, potentially affecting the web application's behavior or security. This technique can be part of a larger attack chain where the web application server is used as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1027.007",
            "attack_object_name": "Dynamic API Resolution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused by malware using 'Dynamic API Resolution' if the malware is executed within the context of a web application environment. For instance, if a web application server is compromised, malware using this technique could be deployed to evade detection while leveraging the server's resources for further attacks or persistence."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1665",
            "attack_object_name": "Hide Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused as part of the 'Hide Infrastructure' technique. Adversaries may use web applications to mask malicious domains or present benign content that later redirects to malicious infrastructure. This abuse leverages the web application as a tool to obfuscate the true destination and prolong the effectiveness of adversary infrastructure."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1484",
            "attack_object_name": "Domain or Tenant Policy Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Web Applications are not directly targeted by 'Domain or Tenant Policy Modification,' they can be indirectly affected if adversaries modify domain or tenant policies to escalate privileges or evade defenses. For example, if a web application relies on federated identity providers or domain trusts for authentication, adversaries could abuse modified policies to gain unauthorized access to the application, thereby using it as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1220",
            "attack_object_name": "XSL Script Processing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could be abused by the XSL Script Processing technique if they are used to deliver or host malicious XSL files. An attacker might exploit a web application to serve these files to client systems or use the application as a vector to introduce malicious scripts into the environment."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1596.005",
            "attack_object_name": "Scan Databases",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in the 'Scan Databases' technique as adversaries may use information gathered from scan databases to identify vulnerabilities or misconfigurations in web applications. This information can then be leveraged to plan further attacks, making web applications a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1564.001",
            "attack_object_name": "Hidden Files and Directories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused using the 'Hidden Files and Directories' technique if adversaries manage to upload or create hidden files within the web application's directory structure. This can be used to hide malicious scripts or data, facilitating further attacks such as data exfiltration or persistence without being easily detected by administrators."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1591.001",
            "attack_object_name": "Determine Physical Locations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be leveraged to gather information about an organization's physical locations. For example, adversaries may search victim-owned websites or other online data sets hosted on web applications to extract location-related information. Thus, web applications can be abused as a tool to facilitate this reconnaissance technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1173",
            "attack_object_name": "Dynamic Data Exchange",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by hosting or delivering content that exploits the DDE technique. For example, a web application could serve malicious Microsoft Office documents containing DDE payloads to users, facilitating the execution of arbitrary commands on the user's machine. This makes the web application a tool for delivering DDE-based attacks, even though it is not directly targeted by the technique."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1001.002",
            "attack_object_name": "Steganography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using steganography to hide command and control traffic within files that are uploaded or downloaded through the web application. This misuse allows adversaries to communicate with compromised systems without detection, leveraging the web application's file handling capabilities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1204.001",
            "attack_object_name": "Malicious Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Malicious Link technique when adversaries use them as platforms to host or distribute malicious links. For example, compromised or malicious web applications may serve as a means to deliver malicious links to users, thereby facilitating social engineering attacks or leading to further exploitation of client-side vulnerabilities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications are targeted by the Application Access Token technique because adversaries may use stolen tokens to bypass authentication processes and access restricted accounts or services within the web application. This can lead to unauthorized access to sensitive data or functionality within the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Application Access Token technique as adversaries leverage stolen tokens to perform actions on behalf of a user or service. This misuse can facilitate further attacks, such as lateral movement or privilege escalation, by accessing other linked services or accounts through the compromised web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1078.004",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Cloud Accounts' if they are integrated with or rely on cloud accounts for authentication and authorization. An attacker compromising a cloud account could abuse the web application by accessing or manipulating its functionalities, especially if the application uses cloud services for data storage, processing, or other operations."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1480.001",
            "attack_object_name": "Environmental Keying",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using Environmental Keying to deliver payloads that are environmentally keyed to specific conditions present in the web application's environment. This allows adversaries to execute malicious code only under certain conditions, using the web application as a means to deploy and execute the payload in a controlled manner."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1008",
            "attack_object_name": "Fallback Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Fallback Channels technique to maintain command and control communication. If a web application is compromised, it can be used as a fallback channel to relay commands or exfiltrate data, leveraging the web application's network communication capabilities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1124",
            "attack_object_name": "System Time Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The 'System Time Discovery' technique can be used to gather time-related information that may assist in further attacks, such as scheduling tasks or determining system locality. While the web application itself is not directly targeted, it could be leveraged as part of an attack chain where timing information is crucial for executing other techniques."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1053.002",
            "attack_object_name": "At",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The 'At' technique can be abused in environments where web applications are hosted. Adversaries may leverage scheduled tasks to maintain persistence or execute malicious code on the server hosting the web application, indirectly impacting the web application by using the server as a stepping stone."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1055.001",
            "attack_object_name": "Dynamic-link Library Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While web applications are not directly targeted by DLL Injection, they can be abused in scenarios where an attacker has already compromised the server hosting the web application. The attacker could use DLL Injection to manipulate processes on the server, potentially affecting the web application's behavior or using it as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1086",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While PowerShell does not directly target web applications, it can be abused in scenarios where a web application is hosted on a Windows server. An attacker could leverage PowerShell to execute commands or scripts on the server hosting the web application, potentially using the web application as a stepping stone for further attacks, such as lateral movement or privilege escalation within the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1588.005",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web Applications are often directly targeted by exploits as they can contain vulnerabilities that adversaries seek to exploit. These vulnerabilities can lead to unauthorized access, execution of malicious code, or data theft. The technique T1588.005 involves acquiring exploits, which are then used to target and compromise web applications by taking advantage of these vulnerabilities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1556",
            "attack_object_name": "Modify Authentication Process",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications often include authentication mechanisms to control user access. The 'Modify Authentication Process' technique can directly target web applications by exploiting vulnerabilities in these authentication mechanisms, such as modifying login processes, to gain unauthorized access or extract credentials."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1566.003",
            "attack_object_name": "Spearphishing via Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused in the context of 'Spearphishing via Service' when adversaries use them as platforms to deliver spearphishing content. For example, adversaries may exploit vulnerabilities in web applications to host malicious content or use web-based communication services to send spearphishing messages. Thus, web applications can be leveraged as tools to facilitate the spearphishing attack."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1090.001",
            "attack_object_name": "Internal Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications could potentially be abused as part of an Internal Proxy setup if they are compromised and used to relay traffic within a network. This would involve using the web application as a tool to facilitate communication between adversaries and other compromised systems, effectively making it a stepping stone in the attack chain."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1216",
            "attack_object_name": "System Script Proxy Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the primary target of System Script Proxy Execution is not web applications, web applications could be abused as part of a broader attack strategy. For instance, if a web application is compromised, it could be used to deliver or execute scripts that leverage this technique on the underlying server or connected systems, thus acting as a stepping stone for further attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1094",
            "attack_object_name": "Custom Command and Control Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using the Custom Command and Control Protocol technique (T1094) to facilitate communication with compromised systems. The web application may be leveraged as a conduit or intermediary for command and control traffic, enabling adversaries to maintain persistence or evade detection."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1102.001",
            "attack_object_name": "Dead Drop Resolver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web Applications, particularly those providing legitimate web services, are abused by the Dead Drop Resolver technique. Adversaries use these applications to host information that aids in command and control operations, effectively using the web application as a tool to facilitate malicious activities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1001.001",
            "attack_object_name": "Junk Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the Junk Data technique if they are involved in command and control communications. Adversaries may use web applications as a conduit to transmit obfuscated data, leveraging the application to hide malicious traffic within legitimate web traffic, thus making detection more challenging."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1598.001",
            "attack_object_name": "Spearphishing Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in spearphishing campaigns, as adversaries may leverage vulnerabilities or features in web applications to host malicious content or create fake web pages that facilitate spearphishing. Thus, web applications can be abused as tools or platforms in these attacks."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1043",
            "attack_object_name": "Commonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications often communicate over commonly used ports such as TCP:80 (HTTP) and TCP:443 (HTTPS). Adversaries can abuse this characteristic to blend malicious traffic with legitimate web application traffic, making it difficult to detect malicious activities. This technique leverages the web application's use of common ports to evade network defenses."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1552.007",
            "attack_object_name": "Container API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications may be abused by adversaries using the Container API technique if they are deployed within containerized environments. An attacker could leverage the web application's access to container APIs to gather credentials or perform unauthorized actions within the container environment, thus using the web application as a stepping stone."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1584.001",
            "attack_object_name": "Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the technique T1584.001 'Domains' when adversaries hijack domains or subdomains that are associated with the web application. This can lead to malicious activities such as phishing, distributing malware, or conducting man-in-the-middle attacks, leveraging the trust and reputation of the legitimate web application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1505.001",
            "attack_object_name": "SQL Stored Procedures",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications that interact with SQL databases can be directly targeted by adversaries using SQL Stored Procedures. Malicious stored procedures can be crafted to exploit vulnerabilities in the web application's interaction with the database, potentially leading to unauthorized access, data exfiltration, or persistent access to the web application through the database layer."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1048.003",
            "attack_object_name": "Exfiltration Over Unencrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by adversaries using T1048.003 to exfiltrate data. If a web application is compromised, attackers might leverage it to send data over unencrypted protocols like HTTP or FTP, exploiting the application's network communication capabilities to exfiltrate sensitive information without encryption."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1078.003",
            "attack_object_name": "Local Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be abused by the 'Local Accounts' technique if adversaries use compromised local account credentials to gain unauthorized access to the web server hosting the application. This can facilitate lateral movement or privilege escalation, allowing attackers to misuse the web application as a stepping stone for further attacks on the network."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Web applications can be directly targeted by adversaries exploiting vulnerabilities to bypass security features. These vulnerabilities may exist in the application code or its configuration, allowing attackers to execute adversary-controlled code and compromise the application."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1127",
            "attack_object_name": "Trusted Developer Utilities Proxy Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications can be indirectly involved in this technique if they host or interact with developer utilities that can be exploited to proxy execution of malicious code. In such cases, the web application is abused as a platform to facilitate the execution of malicious activities using trusted developer utilities."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1529",
            "attack_object_name": "System Shutdown/Reboot",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'System Shutdown/Reboot' technique does not directly target web applications, it can be used to abuse the underlying systems hosting the web applications. By shutting down or rebooting the server, adversaries can disrupt the availability of web applications, impacting their operation and accessibility."
        },
        {
            "capability_id": "Web Application",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Web Application is a software application that runs on a web server and is accessed via a web browser over a network, such as the internet or an intranet. Web applications can range from simple static web pages to complex, dynamic applications that interact with databases and other services. They are a crucial component of modern business infrastructure, enabling everything from e-commerce to data analysis to collaboration. However, they also present significant security challenges. These include potential vulnerabilities in the application code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, cross-site scripting (XSS), to session hijacking. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the web application is hosted.",
            "attack_object_id": "T1574.012",
            "attack_object_name": "COR_PROFILER",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Web applications that are built using the .NET framework may have their processes abused by the COR_PROFILER technique. This technique can be used to execute malicious DLLs within the context of .NET processes, potentially affecting web applications running on .NET by leveraging them as a means to establish persistence or elevate privileges."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027.011",
            "attack_object_name": "Fileless Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of a broader attack strategy where adversaries leverage the API to execute complex queries that may facilitate data staging or exfiltration. The data retrieved or manipulated via the API could be stored using fileless techniques to evade detection and maintain persistence."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1557",
            "attack_object_name": "Adversary-in-the-Middle",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the Adversary-in-the-Middle technique when adversaries position themselves to intercept or manipulate the data being transmitted between clients and the API server. This can lead to unauthorized data access, data manipulation, or credential theft, leveraging the API as a means to further their attack objectives."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1613",
            "attack_object_name": "Container and Resource Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of 'Container and Resource Discovery' by adversaries who leverage the API to gather information about the environment. If a GraphQL API is improperly secured, it may expose sensitive information about the underlying infrastructure, such as container configurations or resource details, which can aid adversaries in planning further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1583.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Serverless technique (T1583.007) does not directly abuse GraphQL APIs, the infrastructure set up using serverless environments could potentially be used to proxy or redirect traffic to or from GraphQL APIs. This could be part of a broader strategy to misuse GraphQL APIs for malicious activities, such as data exfiltration or command and control operations, leveraging the serverless infrastructure as an intermediary."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1132.001",
            "attack_object_name": "Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Standard Encoding technique can be abused in the context of a GraphQL API by encoding malicious payloads or queries to evade detection mechanisms. This can allow adversaries to misuse the API as a tool for furthering their attack objectives, such as bypassing security controls or obfuscating malicious activity."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1592",
            "attack_object_name": "Gather Victim Host Information",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries using the 'Gather Victim Host Information' technique. Attackers may exploit GraphQL APIs to gather information about the host environment, such as server configurations, IP addresses, and other metadata exposed through improperly secured GraphQL queries. This information can be used to further exploit vulnerabilities in the API or the host system."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1564.012",
            "attack_object_name": "File/Path Exclusions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'File/Path Exclusions' technique does not directly target GraphQL APIs, it can be used in conjunction with other techniques to abuse the server environment hosting the GraphQL API. For instance, adversaries may hide malicious files on the server that hosts the GraphQL API by placing them in excluded paths, thereby evading detection and potentially using the server as a stepping stone for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1222.002",
            "attack_object_name": "Linux and Mac File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique itself does not directly target GraphQL APIs, it can be used to abuse the underlying file system where the GraphQL API is hosted. By modifying file or directory permissions on the server hosting the GraphQL API, an adversary could potentially alter configurations or access sensitive files that could indirectly impact the security and functionality of the GraphQL API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1110.001",
            "attack_object_name": "Password Guessing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by password guessing attacks if they require authentication for access. Adversaries may attempt to guess passwords to gain unauthorized access to the API, potentially leading to data exposure or further exploitation of the application."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1597.002",
            "attack_object_name": "Purchase Technical Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Purchase Technical Data' does not directly abuse a GraphQL API, the information acquired through this technique could be used to identify vulnerabilities or weaknesses in a GraphQL API. This information could then be leveraged in subsequent attacks, making the GraphQL API a potential tool or stepping stone in a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1498.001",
            "attack_object_name": "Direct Network Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "A GraphQL API can be directly targeted by a Direct Network Flood attack as it is a network service exposed to the internet. Adversaries may attempt to overwhelm the GraphQL API with a high volume of network traffic, leading to a denial of service (DoS) and rendering the API unavailable to legitimate users."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1492",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Stored Data Manipulation technique. Adversaries may exploit vulnerabilities within the GraphQL schema or query validation mechanisms to manipulate data stored within the API. This could lead to unauthorized data modification, affecting the integrity of the data served by the API and potentially impacting business processes or decision-making."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1588.007",
            "attack_object_name": "Artificial Intelligence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be indirectly abused by the 'Artificial Intelligence' (T1588.007) technique, as adversaries might use AI tools to automate the discovery of vulnerabilities or to craft sophisticated queries that exploit weaknesses in the API's schema or validation mechanisms. This could facilitate further attacks or misuse of the GraphQL API as a stepping stone to other malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1491.002",
            "attack_object_name": "External Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs, being externally accessible interfaces, can be directly targeted for defacement. Adversaries may exploit vulnerabilities in the API or its hosting environment to alter the API's output or the data it serves, thereby defacing the service and potentially misleading users or damaging the organization's reputation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027.013",
            "attack_object_name": "Encrypted/Encoded File",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Encrypted/Encoded File' technique, they could potentially be abused in scenarios where encoded or encrypted data is transmitted through the API. For instance, adversaries might use the API to transmit or store encoded data to evade detection, leveraging the API as a conduit for obfuscated data. This makes the API a tool in the broader context of an attack, rather than the primary victim."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1590.005",
            "attack_object_name": "IP Addresses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be indirectly involved in the 'IP Addresses' technique as they may be hosted on specific IP addresses. Adversaries may gather IP address information to identify GraphQL API endpoints as part of reconnaissance efforts, which can then be used to plan further attacks on the API or the infrastructure hosting it."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1499.001",
            "attack_object_name": "OS Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "A GraphQL API can be directly targeted by an OS Exhaustion Flood attack, as it relies on the underlying operating system to manage network connections. If the OS is overwhelmed by excessive SYN or ACK packets, it can lead to a denial of service, preventing legitimate requests from reaching the GraphQL API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by JavaScript-based attacks, particularly through injection techniques where malicious JavaScript code is executed within the API environment. This can lead to unauthorized data access or manipulation, making the API a direct victim of the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "JavaScript can be used to abuse GraphQL APIs by crafting complex queries that exploit the API's capabilities to perform unintended actions. This includes using JavaScript to automate the execution of resource-intensive queries, potentially leading to denial of service or using the API as a conduit for further attacks on other systems."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1590.002",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the DNS technique (T1590.002) does not directly target a GraphQL API, it can be used to gather information about the infrastructure hosting the API. This information can be leveraged to plan further attacks, such as identifying potential entry points or misconfigurations. Thus, the GraphQL API can be indirectly abused through the information gathered using this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1133",
            "attack_object_name": "External Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be exposed as external-facing services, potentially allowing adversaries to abuse them as a means to gain unauthorized access to network resources. If a GraphQL API is improperly secured and exposed without proper authentication or access controls, it could be leveraged as an entry point for further attacks, aligning with the 'External Remote Services' technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1539",
            "attack_object_name": "Steal Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the 'Steal Web Session Cookie' technique as they may use session cookies for authentication. Adversaries can exploit vulnerabilities in the GraphQL API to steal these cookies, thereby gaining unauthorized access to the API as an authenticated user."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1053.007",
            "attack_object_name": "Container Orchestration Job",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Container Orchestration Job technique, they can be abused in scenarios where an adversary leverages a compromised container orchestration environment to deploy containers that interact with GraphQL APIs. This could involve using the API to exfiltrate data or perform unauthorized operations as part of a larger attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1496.003",
            "attack_object_name": "SMS Pumping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused in the context of SMS Pumping if it is part of a larger application that includes publicly available web forms or services that send SMS messages. Adversaries could exploit the API to send a large volume of requests to these services, indirectly contributing to SMS Pumping activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1560.003",
            "attack_object_name": "Archive via Custom Method",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the GraphQL API itself is not directly targeted by the 'Archive via Custom Method' technique, it can be abused as a data source. An adversary could leverage vulnerabilities in a GraphQL API to extract data, which they might then compress or encrypt using a custom method for exfiltration. Thus, the GraphQL API can be considered a tool or stepping stone in the broader attack strategy involving this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1069",
            "attack_object_name": "Permission Groups Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Permission Groups Discovery technique does not directly target GraphQL APIs, it can abuse them if the API exposes endpoints or queries that reveal information about user permissions or group memberships. Adversaries might leverage such APIs to gather information about the permission structures in the environment, which can be used for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1499.003",
            "attack_object_name": "Application Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API is directly targeted by the Application Exhaustion Flood technique. This technique involves making repeated requests to resource-intensive features of the GraphQL API, which can lead to exhaustion of system resources and result in a denial of service (DoS). The GraphQL API is the primary victim as the attack aims to compromise its availability."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1195.001",
            "attack_object_name": "Compromise Software Dependencies and Development Tools",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by compromising software dependencies that the API relies on. If an adversary manipulates a dependency used by the GraphQL API, it can lead to the execution of malicious code within the API environment, potentially compromising the API and the data it handles."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1588.004",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries who have acquired or stolen digital certificates. These certificates can be used to establish trusted connections to the GraphQL API, potentially allowing adversaries to intercept or manipulate data in transit. This misuse aligns with the technique T1588.004, where the primary goal is to leverage digital certificates to facilitate further attacks, such as adversary-in-the-middle scenarios."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1071.004",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by DNS techniques, they can be abused in conjunction with DNS tunneling. For instance, if an adversary gains access to a GraphQL API, they might use DNS tunneling to exfiltrate data or communicate with a command and control server, leveraging the API as a stepping stone in the attack chain."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1552.005",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in conjunction with the Cloud Instance Metadata API technique if an adversary exploits a vulnerability such as Server-Side Request Forgery (SSRF) within the GraphQL API. This abuse allows the adversary to make unauthorized requests to the Cloud Instance Metadata API, potentially exposing sensitive data. Thus, while the GraphQL API is not the direct target, it can be leveraged as a tool to access the metadata API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1522",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the Cloud Instance Metadata API technique if they have vulnerabilities such as Server-Side Request Forgery (SSRF). An attacker could exploit such vulnerabilities in a GraphQL API to make unauthorized requests to the Cloud Instance Metadata API, thereby accessing sensitive metadata and credentials."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1074.001",
            "attack_object_name": "Local Data Staging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not the direct target of the Local Data Staging technique, they can be abused in the context of this technique. If an adversary gains access to a system through a GraphQL API, they might use the API to facilitate data collection and subsequently stage this data locally before exfiltration. Thus, the GraphQL API can be leveraged as a tool to gather and prepare data for staging."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1036.005",
            "attack_object_name": "Match Legitimate Name or Location",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by adversaries using the 'Match Legitimate Name or Location' technique if they attempt to disguise malicious GraphQL queries or endpoints by naming them similarly to legitimate ones. This could be used to evade detection and carry out further attacks, such as unauthorized data access or injection attacks, by blending in with legitimate API traffic."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1172",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Domain Fronting does not directly target GraphQL APIs, it can be used to obfuscate the destination of traffic to or from a GraphQL API, potentially allowing attackers to bypass network defenses and misuse the API as a stepping stone for further attacks. This makes the GraphQL API an asset that can be abused by the Domain Fronting technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1587.003",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Digital Certificates' (T1587.003) does not directly target GraphQL APIs, it can be used to abuse them. Adversaries may use self-signed certificates to establish trusted communications with GraphQL APIs or to intercept and manipulate data in transit if they manage to insert themselves into the communication path. This abuse leverages the GraphQL API as a tool for furthering an attack, such as enabling adversary-in-the-middle scenarios."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1565.001",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by stored data manipulation attacks. Adversaries may exploit vulnerabilities in the GraphQL schema or query validation mechanisms to manipulate data at rest within the API's backend systems. This can compromise the integrity of the data served by the API, potentially affecting business processes and decision-making."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1110.002",
            "attack_object_name": "Password Cracking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Password Cracking does not directly exploit GraphQL APIs, it can be used to abuse the API if credentials obtained through cracking are used to authenticate and gain unauthorized access to the API. This can lead to further attacks, such as data exfiltration or unauthorized operations within the GraphQL environment."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1600",
            "attack_object_name": "Weaken Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could potentially be abused in a scenario where an adversary weakens the encryption of the underlying network communications. If the GraphQL API relies on encrypted channels for secure data transmission, weakening the encryption could allow adversaries to intercept or manipulate data being transmitted to or from the API, thus using the API as a means to further their attack objectives."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1606.002",
            "attack_object_name": "SAML Tokens",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by adversaries using forged SAML tokens to authenticate and interact with the API if it relies on SAML for authentication. This would allow adversaries to misuse the API for unauthorized data access or other malicious activities, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1036.008",
            "attack_object_name": "Masquerade File Type",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Masquerade File Type technique, they can be abused to serve or transfer masqueraded files. An attacker might use a GraphQL API to upload or distribute files that have been disguised to appear benign, thereby leveraging the API as a conduit for malicious payloads."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1489",
            "attack_object_name": "Service Stop",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API can be directly targeted by the Service Stop technique. Adversaries may stop or disable the GraphQL API service to disrupt its availability, causing a denial of service to legitimate users. This can be part of a broader attack to inhibit incident response or to prepare for further malicious activities such as data destruction or data encryption."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1587.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique T1587.001 (Malware) does not directly target GraphQL APIs, it can abuse them as part of its operations. Malware developed using this technique could exploit vulnerabilities in GraphQL APIs to further an attack, such as using the API for data exfiltration or lateral movement within a network."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1564",
            "attack_object_name": "Hide Artifacts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused in the context of the 'Hide Artifacts' technique if adversaries leverage the API to obscure their activities. For example, they might use the API to manipulate or hide data requests and responses to evade detection. However, this would be more about using the API as a means to hide malicious activity rather than the API itself being directly targeted."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1071.005",
            "attack_object_name": "Publish/Subscribe Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused by adversaries using Publish/Subscribe Protocols to communicate with compromised systems or exfiltrate data. While the GraphQL API itself is not the direct target, it can be leveraged as a communication channel to blend malicious traffic with legitimate API queries, making it difficult to detect unauthorized activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1080",
            "attack_object_name": "Taint Shared Content",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Taint Shared Content technique, they could be abused if they are used to interact with or manage shared storage locations. An adversary might leverage a GraphQL API to inject malicious content into a shared storage location, thereby abusing the API as a tool to facilitate the tainting of shared content."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1484.002",
            "attack_object_name": "Trust Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by Trust Modification, they can be abused in scenarios where trust relationships have been altered. For example, if an adversary modifies trust settings to gain unauthorized access to systems, they could leverage a GraphQL API to exfiltrate data or perform unauthorized actions within the application. Thus, the GraphQL API can be used as a tool to further an attack once trust relationships have been compromised."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1573.001",
            "attack_object_name": "Symmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused by an adversary using Symmetric Cryptography (T1573.001) to encrypt malicious traffic that is sent to or from the API. This allows the adversary to conceal their activities, such as exfiltration of data or command and control communications, making it difficult for defenders to detect malicious use of the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1527",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using compromised application access tokens. These tokens can be used to make authorized requests to the API, allowing adversaries to access or manipulate data as if they were legitimate users. This misuse aligns with the Application Access Token technique, where the API is leveraged as a tool to further an attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1053.003",
            "attack_object_name": "Cron",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Cron technique itself does not directly target GraphQL APIs, it can be abused to schedule malicious tasks that may interact with a GraphQL API. For example, an adversary could use Cron to schedule scripts that exploit vulnerabilities in a GraphQL API, thus abusing the API as a stepping stone for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1588.006",
            "attack_object_name": "Vulnerabilities",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries using the Vulnerabilities technique. Attackers may exploit known or newly discovered vulnerabilities in the GraphQL API's implementation, schema, or query handling mechanisms to compromise the API. This can lead to unauthorized access, data theft, or execution of malicious code."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1070.002",
            "attack_object_name": "Clear Linux or Mac System Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the GraphQL API is not directly targeted by the technique 'Clear Linux or Mac System Logs', it can be indirectly involved if an adversary uses the API to gain access to a system and then employs this technique to cover their tracks by clearing logs that might record their activities. In this context, the GraphQL API could be abused as a stepping stone in the attack chain."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1499.004",
            "attack_object_name": "Application or System Exploitation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Application or System Exploitation technique. Adversaries may exploit vulnerabilities in the GraphQL API implementation, such as improper query validation or schema misconfigurations, to cause the API to crash or become unavailable, resulting in a denial of service (DoS) condition."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1021.004",
            "attack_object_name": "SSH",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While a GraphQL API is not directly targeted by SSH, it can be abused in scenarios where an adversary gains SSH access to a server hosting the GraphQL API. Once SSH access is obtained, the adversary could misuse the GraphQL API for further malicious activities, such as data exfiltration or lateral movement within the network."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1098.003",
            "attack_object_name": "Additional Cloud Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Additional Cloud Roles' does not directly target GraphQL APIs, it can indirectly abuse them if the GraphQL API is hosted in a cloud environment where the adversary has modified roles or permissions. The adversary could leverage the modified cloud roles to manipulate or misuse the GraphQL API for unauthorized access or actions, such as querying sensitive data or altering API configurations."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1089",
            "attack_object_name": "Disabling Security Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be indirectly involved in an attack where an adversary disables security tools to avoid detection while exploiting the API. For example, if an attacker has already compromised a system hosting a GraphQL API, they may disable security tools to prevent detection of their malicious activities, including any further exploitation of the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027.008",
            "attack_object_name": "Stripped Payloads",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused by adversaries using 'Stripped Payloads' as part of a broader attack strategy. While the GraphQL API itself is not the direct target, it could be used as a conduit for delivering or executing obfuscated payloads, making it harder to detect malicious activities. For instance, if a GraphQL API is used to transmit or execute stripped payloads, it could facilitate evasion of detection mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1119",
            "attack_object_name": "Automated Collection",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be targeted by the Automated Collection technique as adversaries may exploit vulnerabilities in the API to automatically collect data. This can involve crafting specific queries to extract sensitive information from the API, especially if proper access controls and query validation mechanisms are not in place."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1119",
            "attack_object_name": "Automated Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the Automated Collection technique as they can be leveraged as a tool to facilitate data extraction. An adversary may use the API to automate the collection of data from a backend system, using the API's querying capabilities to gather large amounts of data efficiently, potentially bypassing traditional security controls."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1583.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by a botnet to perform malicious activities such as Distributed Denial of Service (DDoS) attacks. The botnet can leverage the GraphQL API as a tool to amplify attacks or to misuse its resources, making it a stepping stone in a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1608.004",
            "attack_object_name": "Drive-by Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of a Drive-by Target scenario if an adversary injects malicious content into a GraphQL API response that is then consumed by a client application. This could facilitate further attacks on client systems, leveraging the GraphQL API as a conduit for delivering malicious content."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1040",
            "attack_object_name": "Network Sniffing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API can be abused by Network Sniffing if adversaries capture network traffic that includes API requests and responses. This can lead to unauthorized data exposure if the traffic is not properly encrypted, allowing adversaries to misuse the API data for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1530",
            "attack_object_name": "Data from Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as a means to access data from cloud storage if they are improperly configured or if they expose sensitive data through their queries. While the primary focus of the technique is on cloud storage, GraphQL APIs can serve as an intermediary that adversaries exploit to retrieve data from cloud storage, especially if the API interfaces with cloud storage services."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1565.003",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by Runtime Data Manipulation techniques. Adversaries may exploit vulnerabilities in the GraphQL schema or query validation mechanisms to manipulate the data as it is accessed and displayed to the end user. This can compromise the integrity of the data served by the GraphQL API, affecting business processes and decision-making."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1590.004",
            "attack_object_name": "Network Topology",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the Network Topology technique (T1590.004) as they may inadvertently expose information about the network topology. If a GraphQL API is improperly configured or lacks sufficient access controls, adversaries could potentially query it to gather details about the network environment, such as internal IP addresses, server configurations, or other infrastructure-related information. This misuse of the API can aid adversaries in reconnaissance efforts and planning further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1082",
            "attack_object_name": "System Information Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the System Information Discovery technique does not directly target GraphQL APIs, it can potentially abuse them. GraphQL APIs can be queried to gather information about the underlying system or application environment if they are misconfigured or lack proper access controls. This misuse can aid adversaries in gathering intelligence about the system hosting the API, which can be leveraged for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1071",
            "attack_object_name": "Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the Application Layer Protocol technique (T1071). Attackers may leverage GraphQL APIs to communicate with compromised systems or exfiltrate data by embedding malicious commands within legitimate GraphQL queries, thus blending in with normal API traffic to evade detection."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1574.014",
            "attack_object_name": "AppDomainManager",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API implemented in a .NET environment could potentially be abused by the AppDomainManager technique if an adversary gains access to the server hosting the API. By hijacking the .NET runtime environment, an attacker could execute arbitrary code within the same process that hosts the GraphQL API, thereby using it as a stepping stone for further attacks, such as executing malicious payloads or gaining unauthorized access to data handled by the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1074.002",
            "attack_object_name": "Remote Data Staging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of the Remote Data Staging technique if adversaries leverage the API to facilitate the staging of data. For instance, if a GraphQL API is used to aggregate or access data from multiple sources, it could be misused to stage data before exfiltration, especially if the API lacks proper access controls or logging mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1590.003",
            "attack_object_name": "Network Trust Dependencies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of the Network Trust Dependencies technique if they are used to gather information about network trust relationships. An adversary might leverage a GraphQL API to query and extract data that reveals network trust dependencies, such as connections to third-party services or other networked resources, which could then be used to facilitate further reconnaissance or attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1498.002",
            "attack_object_name": "Reflection Amplification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not direct targets for Reflection Amplification attacks, they can be abused if they are improperly configured to allow for large, resource-intensive queries. Such misconfigurations could potentially be exploited to increase the load on the API server, indirectly contributing to a denial of service condition. However, this is not a typical use case for Reflection Amplification, which relies on protocols with inherent amplification properties."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1499.002",
            "attack_object_name": "Service Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API can be directly targeted by the Service Exhaustion Flood technique. Adversaries may exploit the API by sending a large number of queries or requests to overwhelm the server resources, leading to a denial of service. This is similar to HTTP flood attacks on web services, where the goal is to exhaust the resources of the GraphQL API server, making it unavailable to legitimate users."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1070.007",
            "attack_object_name": "Clear Network Connection History and Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the technique 'Clear Network Connection History and Configurations,' they can be abused in the context of this technique. An adversary might use a GraphQL API to perform malicious activities and subsequently attempt to clear network connection logs and configurations to hide their tracks, thereby abusing the API as a tool to facilitate or cover up their actions."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1202",
            "attack_object_name": "Indirect Command Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by Indirect Command Execution, they could potentially be abused as part of a broader attack strategy. For instance, if an adversary gains access to a system through a GraphQL API, they might leverage Indirect Command Execution to execute commands indirectly, using the API as a stepping stone to further their attack objectives, such as lateral movement or evasion."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1024",
            "attack_object_name": "Custom Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Custom Cryptographic Protocol' technique, they could potentially be abused as a communication channel for command and control traffic if adversaries implement custom cryptographic protocols within the API's data handling processes. This would involve leveraging the API to transmit encrypted data, potentially bypassing detection mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Data from Local System' does not directly target GraphQL APIs, it can be abused in scenarios where the GraphQL API is used to query data from local system sources. If a GraphQL API is improperly configured or lacks adequate access controls, adversaries might leverage it to indirectly access and exfiltrate data from the local system, using the API as a tool to facilitate data gathering operations."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Deobfuscate/Decode Files or Information' technique, they could potentially be abused as part of a broader attack strategy. For instance, if an adversary uses a GraphQL API to transmit or receive obfuscated data, the API could be an intermediary in the process of deobfuscating or decoding data. This would involve leveraging the API to facilitate the handling or transmission of obfuscated information, thus indirectly abusing the API as part of the attack chain."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562",
            "attack_object_name": "Impair Defenses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused in the context of the Impair Defenses technique if it is leveraged by adversaries to bypass or disable security mechanisms indirectly. For example, if a GraphQL API is used to execute queries that manipulate or disable security configurations, or if it is exploited to introduce vulnerabilities that impair the defensive posture of the environment, it would be considered as being abused by this technique. The API itself is not the direct target but serves as a means to achieve the impairment of defenses."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1586.003",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Cloud Accounts' technique, they can be abused if adversaries gain access to cloud accounts that host or manage these APIs. Compromised cloud accounts could be used to manipulate or misuse GraphQL APIs, either by altering their configuration, injecting malicious queries, or using them as a vector for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1608.001",
            "attack_object_name": "Upload Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Upload Malware' technique, they can be abused if adversaries use them as a conduit to upload malicious payloads to a server hosting the API. This can occur if the GraphQL API lacks proper input validation or access controls, allowing adversaries to misuse the API to facilitate the placement of malware on the server."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted in a supply chain compromise if the API's source code, development environment, or dependencies are manipulated. This can lead to the compromise of the API itself, resulting in unauthorized data exposure or execution of malicious code."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1190",
            "attack_object_name": "Exploit Public-Facing Application",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API, being a public-facing application, is directly targeted by the Exploit Public-Facing Application technique. Adversaries may exploit vulnerabilities in the GraphQL schema, query validation mechanisms, or data handling practices to gain unauthorized access or execute malicious code."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1555",
            "attack_object_name": "Credentials from Password Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Credentials from Password Stores' technique, they can be abused if an adversary obtains credentials that allow them to access or manipulate the API. Once credentials are compromised, they can be used to interact with the GraphQL API to perform unauthorized actions or access sensitive data."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1567",
            "attack_object_name": "Exfiltration Over Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries to exfiltrate data over web services. Since GraphQL APIs are web-based and can handle complex queries, they may be leveraged by attackers to extract sensitive data, especially if proper access controls and query validation mechanisms are not in place."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1219",
            "attack_object_name": "Remote Access Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Remote Access Software' does not directly target GraphQL APIs, it can be used to abuse them. An adversary could use remote access software to gain control over a system that hosts a GraphQL API. Once access is established, the adversary could misuse the API for further attacks, such as querying sensitive data or conducting denial of service attacks through resource-intensive queries."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1583.001",
            "attack_object_name": "Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Domains' technique does not directly abuse GraphQL APIs, it can be used in conjunction with other techniques to facilitate attacks on GraphQL APIs. For example, adversaries may use malicious domains to host phishing pages or deliver payloads that exploit vulnerabilities in GraphQL APIs."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1079",
            "attack_object_name": "Multilayer Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by adversaries using the Multilayer Encryption technique (T1079) to conceal malicious activities or data exfiltration through encrypted channels. While the GraphQL API is not the direct target, it can be leveraged as a communication channel that is difficult to monitor due to the layered encryption, potentially aiding in evasion of network defenses."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs themselves are not directly targeted by the Masquerading technique, they can be abused in scenarios where adversaries manipulate the API requests or responses to appear legitimate. For example, an attacker could craft API queries or responses that mimic legitimate traffic to evade detection by security tools, effectively using the API as a tool to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be targeted by the 'Unsecured Credentials' technique if credentials are improperly stored or exposed within the API's configuration, schema, or data handling processes. Attackers may exploit these unsecured credentials to gain unauthorized access to the API or its underlying systems."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by content injection attacks. Adversaries may exploit vulnerabilities in the GraphQL schema or query validation mechanisms to inject malicious content into the API. This can lead to unauthorized data exposure, execution of malicious queries, or denial of service due to resource-intensive operations."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1567.004",
            "attack_object_name": "Exfiltration Over Webhook",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of 'Exfiltration Over Webhook' by serving as a data source from which sensitive information is extracted and then exfiltrated via webhooks. The GraphQL API is leveraged to gather data that is subsequently sent to a webhook endpoint, thus being misused as a tool for data exfiltration."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1205",
            "attack_object_name": "Traffic Signaling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While a GraphQL API is not directly targeted by Traffic Signaling, it could potentially be abused as part of a broader attack strategy. For instance, if an adversary gains access to a system hosting a GraphQL API, they might use traffic signaling to manipulate network traffic or open ports to facilitate further attacks, such as lateral movement or command and control operations."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1620",
            "attack_object_name": "Reflective Code Loading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Reflective Code Loading does not directly target GraphQL APIs, it can potentially abuse them as part of a broader attack strategy. If an adversary gains access to the server hosting the GraphQL API, they might use reflective code loading to execute malicious payloads within the server's processes. This could be part of a larger attack chain where the GraphQL API is used as a stepping stone to compromise the server and execute code in memory to avoid detection."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1032",
            "attack_object_name": "Standard Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused by adversaries using the Standard Cryptographic Protocol technique (T1032) to conceal malicious activities, such as exfiltrating data or issuing commands, within encrypted traffic. While the GraphQL API itself is not the direct target, it could be leveraged as a communication channel that is obfuscated using standard cryptographic protocols to evade detection."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1497.003",
            "attack_object_name": "Time Based Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in a Time Based Evasion context if adversaries use the API to perform time-based operations or queries that delay execution or overwhelm analysis environments. For example, an adversary might craft complex queries that take a long time to execute, thereby using the GraphQL API as a tool to evade detection by analysis systems that have time constraints."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1029",
            "attack_object_name": "Scheduled Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by the Scheduled Transfer technique (T1029) as they can be used to exfiltrate data at specific times. An adversary could leverage a GraphQL API to execute data exfiltration queries that are scheduled to blend with normal traffic patterns, thereby abusing the API for stealthy data transfer."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1572",
            "attack_object_name": "Protocol Tunneling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Protocol Tunneling technique (T1572) can be used to abuse a GraphQL API by encapsulating malicious traffic within legitimate API requests. This can help adversaries conceal their activities and bypass network security measures, using the GraphQL API as a conduit for tunneling unauthorized communications."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1608.002",
            "attack_object_name": "Upload Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as part of the 'Upload Tool' technique if they are used as a platform to host or transfer tools. An adversary might exploit a GraphQL API to upload tools to a server or infrastructure that the API interfaces with, leveraging the API as a means to facilitate tool transfer or staging."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the 'Use Alternate Authentication Material' technique if adversaries obtain alternate authentication material such as tokens used by the API. These tokens can be used to authenticate and interact with the GraphQL API without proper authorization, allowing adversaries to misuse the API for unauthorized data access or operations, thus leveraging the API as a tool in their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1011",
            "attack_object_name": "Exfiltration Over Other Network Medium",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Exfiltration Over Other Network Medium' does not directly target GraphQL APIs, it can potentially abuse them. If an adversary gains access to a GraphQL API, they could use it as a stepping stone to exfiltrate data over alternative network mediums. The GraphQL API could be misused to facilitate the exfiltration process if it is not properly secured against unauthorized access and data handling practices."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1589",
            "attack_object_name": "Gather Victim Identity Information",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be targeted by adversaries seeking to gather victim identity information. Due to the nature of GraphQL, which allows clients to request specific data, adversaries may exploit improperly secured APIs to extract sensitive identity information such as user details, credentials, or other personal data. This can occur if the API lacks proper access controls, allowing unauthorized queries to retrieve sensitive information."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.004",
            "attack_object_name": "Disable or Modify System Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be indirectly abused in conjunction with the 'Disable or Modify System Firewall' technique. If an adversary has already compromised a system hosting a GraphQL API, they might disable or modify the system firewall to facilitate further attacks, such as lateral movement or data exfiltration, using the GraphQL API as a conduit for these activities. The GraphQL API itself is not the direct target but can be leveraged as part of a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1560",
            "attack_object_name": "Archive Collected Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Archive Collected Data' technique, they can be abused in the context of this technique. An adversary might use a GraphQL API to collect sensitive data from a database or application, which can then be compressed and encrypted as part of the exfiltration process. Thus, the GraphQL API can be leveraged as a tool to facilitate the collection of data that will later be archived."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1021",
            "attack_object_name": "Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Remote Services technique, they can be abused in scenarios where adversaries leverage valid credentials to access GraphQL endpoints. This abuse could facilitate further attacks, such as unauthorized data access or lateral movement within an application environment, by exploiting the API's capabilities to interact with underlying data or services."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1595.002",
            "attack_object_name": "Vulnerability Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API can be directly targeted by vulnerability scanning techniques. Adversaries may scan the API to identify vulnerabilities in its configuration, schema, or query validation mechanisms. This scanning can reveal exploitable weaknesses that could be used to compromise the API, such as injection vulnerabilities or misconfigurations that lead to unauthorized data exposure."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.009",
            "attack_object_name": "Cloud API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Cloud API technique (T1059.009) can abuse GraphQL APIs as part of its broader functionality to execute commands and perform actions in cloud environments. GraphQL APIs can be leveraged as a tool to interact with cloud services, potentially allowing adversaries to misuse them for executing malicious actions if proper permissions and credentials are obtained."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1610",
            "attack_object_name": "Deploy Container",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of the Deploy Container technique (T1610) if an adversary leverages the API to interact with container orchestration systems or to execute commands that result in container deployment. This abuse would involve using the API as a tool to facilitate the deployment of containers, potentially to further an attack on other assets within the environment."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1145",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of the 'Private Keys' technique if they are used as a means to access or exfiltrate private keys stored within the system. For instance, if a GraphQL API is improperly configured or lacks sufficient access controls, an adversary might leverage it to query sensitive data, including private keys, thus abusing the API as a tool to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1580",
            "attack_object_name": "Cloud Infrastructure Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the primary focus of Cloud Infrastructure Discovery is on cloud resources, GraphQL APIs could potentially be abused as a tool to gather information about cloud infrastructure if they expose endpoints or data that provide insights into the cloud environment. This could include misconfigured APIs that reveal metadata or configuration details about the cloud infrastructure."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1491",
            "attack_object_name": "Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by defacement attacks. Adversaries may exploit vulnerabilities in the GraphQL API to alter the content served by the API, affecting the integrity of the data or visual content presented to users. This could involve modifying the API responses to display unauthorized or offensive content, thereby achieving the goals of defacement."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1505.003",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be targeted by the Web Shell technique as they are hosted on web servers, which can be backdoored with web shells. This allows adversaries to gain persistent access to the server hosting the GraphQL API, potentially compromising the API and its data."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1552.004",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the technique T1552.004, they can be abused if private keys are stored insecurely on the systems hosting the API. An adversary could leverage these keys to gain unauthorized access or perform actions on behalf of the API, thus abusing the API as a tool in their attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1583.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique T1583.004 'Server' does not directly abuse GraphQL APIs, it is possible that adversaries could use servers they control to host malicious GraphQL APIs or interact with legitimate GraphQL APIs as part of their operations. This would involve using the server infrastructure to facilitate attacks, such as executing queries against a GraphQL API to extract data or perform other malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1078.001",
            "attack_object_name": "Default Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs, like other applications, may have default accounts set up during development or deployment. If these default accounts are not changed or secured, adversaries can exploit them to gain unauthorized access to the API, potentially leading to data exposure or manipulation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1595",
            "attack_object_name": "Active Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Active Scanning is used to probe GraphQL APIs to gather information about the API's structure, endpoints, and potential vulnerabilities. This technique targets the GraphQL API directly to discover exploitable weaknesses or sensitive data exposure, making it a primary victim of the scanning process."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1110.003",
            "attack_object_name": "Password Spraying",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Password spraying can target GraphQL APIs if they are configured to authenticate users. Adversaries may attempt to use common passwords against multiple user accounts exposed by the API to gain unauthorized access. This is particularly relevant if the API is exposed to the internet and lacks proper rate limiting or account lockout mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1090.002",
            "attack_object_name": "External Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused as part of the External Proxy technique if an adversary leverages the API to facilitate or disguise command and control communications. For example, if the GraphQL API is misconfigured or lacks proper access controls, it could be used to relay or proxy malicious traffic, thereby aiding in the execution of the External Proxy technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1056.003",
            "attack_object_name": "Web Portal Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused as part of a broader attack strategy. If an adversary gains access to a GraphQL API, they could potentially exploit it to gather sensitive information or use it as a stepping stone for further attacks. However, this would be more about abusing the API for data extraction or unauthorized access rather than capturing credentials directly through a web portal."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1054",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Indicator Blocking' technique, they could be abused in scenarios where an adversary uses the API to alter or disable logging and monitoring configurations. For instance, if a GraphQL API provides administrative functions that can be exploited, an attacker might use it to interfere with telemetry data collection, thereby abusing the API as a tool to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1108",
            "attack_object_name": "Redundant Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of the 'Redundant Access' technique if they are used as a means to maintain access to a network. For instance, if an adversary has already compromised a GraphQL API, they might use it to establish persistent access or as a channel for command and control, leveraging its capabilities to execute queries or manipulate data as part of maintaining redundant access."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1593.002",
            "attack_object_name": "Search Engines",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be indirectly abused by the Search Engines technique (T1593.002) if adversaries use search engines to find exposed GraphQL endpoints or sensitive information related to the API. This information can then be used to plan further attacks or exploit the API in other ways."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1016",
            "attack_object_name": "System Network Configuration Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the System Network Configuration Discovery technique does not directly target GraphQL APIs, it can be abused by adversaries who have already compromised a GraphQL API to gather network configuration information. This information can then be used to facilitate further attacks within the network, such as lateral movement or identifying additional targets."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1593.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs may be indirectly abused through the 'Code Repositories' technique if adversaries discover sensitive information such as API keys or credentials in public code repositories. This information can then be used to abuse the GraphQL API for unauthorized access or other malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1496.002",
            "attack_object_name": "Bandwidth Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of Bandwidth Hijacking if they are leveraged to execute resource-intensive queries that consume significant network bandwidth. This misuse could facilitate broader network-based attacks, such as Denial of Service (DoS) campaigns, by overwhelming the API's network resources."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1087",
            "attack_object_name": "Account Discovery",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by Account Discovery techniques if they expose endpoints or queries that allow adversaries to enumerate user accounts, roles, or permissions. This can occur if the API schema is misconfigured or lacks proper access controls, allowing unauthorized queries that reveal account information."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1090",
            "attack_object_name": "Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API can be abused by the T1090 Proxy technique if adversaries use the API as a means to proxy their command and control traffic. By leveraging the GraphQL API's communication paths, adversaries can disguise the source of malicious traffic and evade detection, thus abusing the API as a tool for their malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the Command and Scripting Interpreter technique (T1059) as a means to execute malicious scripts or commands indirectly. For instance, if an attacker gains access to the underlying server or environment where the GraphQL API is hosted, they could leverage scripting capabilities to further their attack, potentially using the API as a conduit for executing unauthorized commands or scripts."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.006",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While a GraphQL API is not directly targeted by the 'Indicator Blocking' technique, it could be abused in a broader attack scenario. For instance, if an adversary has already compromised a system and is using a GraphQL API to exfiltrate data or perform other malicious actions, they might employ 'Indicator Blocking' to prevent detection of their activities through network monitoring or logging systems. Thus, the GraphQL API could be indirectly involved as part of the infrastructure being abused while the adversary blocks indicators elsewhere."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1020",
            "attack_object_name": "Automated Exfiltration",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "A GraphQL API can be directly targeted by automated exfiltration techniques. Adversaries may exploit vulnerabilities in the GraphQL schema or query validation mechanisms to automate the extraction of sensitive data. This makes the GraphQL API the primary victim of the attack, as the adversary aims to exfiltrate data directly from it."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1592.004",
            "attack_object_name": "Client Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused to gather information about client configurations if they are improperly configured or expose sensitive information through queries. Adversaries might leverage GraphQL APIs to extract details about the client environment, such as user agent strings or other metadata, which can be used for further reconnaissance or targeting."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.007",
            "attack_object_name": "Disable or Modify Cloud Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the GraphQL API itself is not directly targeted by the technique 'Disable or Modify Cloud Firewall', it can be indirectly affected if an adversary modifies cloud firewall rules to allow unauthorized access to the API. This can lead to the GraphQL API being abused as a tool for further attacks, such as data exfiltration or unauthorized data access, by bypassing network restrictions."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1588.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique T1588.001 (Malware) does not directly target GraphQL APIs, malware obtained through this technique could be used to abuse GraphQL APIs. For example, adversaries might use malware to execute unauthorized queries, perform denial of service attacks, or exfiltrate data through a GraphQL API, leveraging it as a tool to further their malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1070",
            "attack_object_name": "Indicator Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the Indicator Removal technique (T1070) if adversaries leverage the API's capabilities to execute queries that modify or delete logs or other indicators of compromise. This misuse would involve using the GraphQL API as a tool to perform actions that aid in covering tracks or hindering detection efforts, such as executing queries to delete or alter logs stored within systems accessible via the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1048.001",
            "attack_object_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "A GraphQL API can be targeted by the technique of exfiltration over symmetric encrypted non-C2 protocol. Adversaries may exploit vulnerabilities in the GraphQL API to extract sensitive data. Since GraphQL APIs can handle complex queries and return large datasets, they are susceptible to data exfiltration attacks where adversaries use symmetric encryption to hide the data being exfiltrated from detection mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1083",
            "attack_object_name": "File and Directory Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the 'File and Directory Discovery' technique if the API is improperly configured or if it exposes endpoints that allow for querying sensitive file or directory information. Attackers could potentially leverage the API to enumerate files or directories indirectly if the API provides access to such data, making the API a tool for further information gathering."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1020.001",
            "attack_object_name": "Traffic Duplication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the Traffic Duplication technique as adversaries may duplicate or mirror the network traffic that includes GraphQL API requests and responses. This can be used to capture sensitive data being transmitted through the API, leveraging the API as a means to further the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1188",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused as part of a Multi-hop Proxy setup if it is misconfigured or lacks proper access controls. Attackers might leverage the GraphQL API as an intermediary point to obscure their traffic, using it as a proxy to further their attack chain. This misuse aligns with the nature of the Multi-hop Proxy technique, where assets are leveraged as tools to disguise the origin of malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1074",
            "attack_object_name": "Data Staged",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of the 'Data Staged' technique if adversaries use the API to gather and organize data from various sources before staging it for exfiltration. The API can be leveraged to query and collect data efficiently, which can then be staged in a centralized location for further malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1649",
            "attack_object_name": "Steal or Forge Authentication Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries who have stolen or forged authentication certificates. These certificates can be used to authenticate and gain unauthorized access to the GraphQL API, potentially allowing adversaries to execute queries, extract data, or perform other malicious actions under the guise of legitimate access."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1049",
            "attack_object_name": "System Network Connections Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could potentially be abused in the context of System Network Connections Discovery if an adversary uses it to query information about network connections or configurations indirectly. For example, if the GraphQL API has endpoints that expose network-related information, an attacker could leverage these to gather insights about the network environment. However, the API itself is not the direct target but rather a tool used to facilitate the discovery process."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584",
            "attack_object_name": "Compromise Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the GraphQL API itself is not the direct target of the Compromise Infrastructure technique, it can be abused as part of compromised infrastructure. If a server hosting a GraphQL API is compromised, the API could be leveraged by adversaries to further their operations, such as staging attacks or exfiltrating data, thus making it a tool in the broader context of compromised infrastructure."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1064",
            "attack_object_name": "Scripting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by scripts to automate queries that may lead to unauthorized data access or denial of service. Scripts can be used to craft complex queries that exploit weaknesses in query validation or rate limiting, thereby abusing the GraphQL API as a tool for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1586",
            "attack_object_name": "Compromise Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Compromise Accounts' technique, they can be abused if an adversary gains access to compromised accounts with permissions to interact with the API. Such access could allow the adversary to misuse the API for unauthorized data access, manipulation, or other malicious activities, leveraging the compromised account as a means to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by a botnet as part of a larger attack strategy. For example, a botnet could be used to launch a Distributed Denial of Service (DDoS) attack against a GraphQL API, overwhelming it with requests and causing service disruption. In this context, the GraphQL API is not the primary target of the botnet creation but can be a victim of the botnet's malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.010",
            "attack_object_name": "Downgrade Attack",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused in a downgrade attack scenario if the API or its underlying infrastructure supports multiple versions, and an adversary forces the use of an older, less secure version. This could lead to reduced security controls and increased vulnerability to other attacks, such as unauthorized data exposure or injection attacks. However, this would be an indirect abuse, leveraging the API's backward compatibility rather than directly targeting it."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1102",
            "attack_object_name": "Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the Web Service technique (T1102) as they can serve as a legitimate web service for relaying data to/from a compromised system. Attackers might leverage GraphQL APIs to hide malicious activities within normal API traffic, making it difficult to detect unauthorized data exfiltration or command and control communications."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API can be abused by the 'Credentials In Files' technique if it is used to access or query files that contain insecurely stored credentials. Adversaries could leverage the API to retrieve sensitive data from the backend systems or databases if proper access controls and query validations are not implemented, thus using the API as a tool to exploit credential storage vulnerabilities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1608",
            "attack_object_name": "Stage Capabilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of 'Stage Capabilities' by adversaries who might use the API as a platform to stage or host malicious capabilities. For instance, if a GraphQL API is compromised, it could be leveraged to host or distribute malicious payloads, serving as a stepping stone for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1608.005",
            "attack_object_name": "Link Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Link Target technique does not directly exploit GraphQL APIs, it can abuse them by using the API endpoints as part of a broader attack strategy. For instance, adversaries could use a GraphQL API to host or serve malicious content referenced by a link, leveraging the API's legitimate appearance to deceive users or bypass security filters."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1104",
            "attack_object_name": "Multi-Stage Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of a Multi-Stage Channels technique if they are leveraged to facilitate communication between different stages of command and control. For example, an adversary might use a compromised GraphQL API to exfiltrate data or relay commands between stages, thus using the API as a tool or stepping stone in the attack chain."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1657",
            "attack_object_name": "Financial Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as part of a broader attack strategy to facilitate financial theft. For example, if a GraphQL API is improperly secured, adversaries might exploit it to gain unauthorized access to sensitive financial data or accounts, which can then be used to conduct financial theft. This makes the GraphQL API a potential tool or stepping stone in executing financial theft."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1480",
            "attack_object_name": "Execution Guardrails",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by adversaries using Execution Guardrails to ensure that malicious queries or actions are only executed under specific conditions, such as when certain user-agents or IP addresses are detected. This can help adversaries evade detection and misuse the GraphQL API as a tool to further their attack objectives."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1606.001",
            "attack_object_name": "Web Cookies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the 'Web Cookies' technique if adversaries use forged cookies to access the API endpoints. While the GraphQL API itself is not the direct target of the attack, it can be misused as a tool to gain unauthorized access to data or services exposed by the API, bypassing authentication mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1654",
            "attack_object_name": "Log Enumeration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not the direct target of the Log Enumeration technique, they can be indirectly involved if logs related to GraphQL API usage are enumerated. Adversaries could abuse logs generated by GraphQL APIs to gain insights into API usage patterns, potential vulnerabilities, or sensitive data exposure, which could be used to further attacks on other assets."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1134.001",
            "attack_object_name": "Token Impersonation/Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Token Impersonation/Theft' does not directly target GraphQL APIs, it can be used to abuse the API by impersonating a user with elevated privileges. This can lead to unauthorized access and actions within the GraphQL API, leveraging it as a tool to further an attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1567.001",
            "attack_object_name": "Exfiltration to Code Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries to exfiltrate data to code repositories. Since GraphQL APIs are designed to handle queries and data requests, they can be leveraged to send data to external repositories if not properly secured. This makes them a potential tool for executing the 'Exfiltration to Code Repository' technique, especially if the API allows for broad data access or lacks proper access controls."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1021.007",
            "attack_object_name": "Cloud Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the 'Cloud Services' (T1021.007) technique if adversaries use them as a means to interact with cloud services. For instance, if a GraphQL API is used to manage or interact with cloud resources, adversaries could leverage it to perform unauthorized actions on cloud services. This makes the GraphQL API a tool or stepping stone in the execution of the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1583.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as part of the 'Web Services' technique (T1583.006) by adversaries who may leverage them as a platform for conducting further attacks. For example, adversaries could use GraphQL APIs to facilitate data exfiltration or to blend malicious traffic with legitimate API requests, making it difficult to detect their activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1528",
            "attack_object_name": "Steal Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs are targeted by the 'Steal Application Access Token' technique because they often use access tokens to authenticate and authorize API requests. Adversaries can steal these tokens to gain unauthorized access to the API, potentially leading to data exposure and further compromise."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1048.002",
            "attack_object_name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused to facilitate the exfiltration of data over an encrypted protocol. If an adversary gains access to the API, they could leverage it to send data over an encrypted channel, such as HTTPS, to an external location. This makes the GraphQL API a potential tool for the abuse described in technique T1048.002."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1087.004",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Cloud Account' technique does not directly target GraphQL APIs, it can potentially abuse them if the API is used to interact with cloud services. If a GraphQL API is configured to manage or access cloud accounts, adversaries could leverage it to list or manipulate cloud accounts, thereby abusing the API as a tool to further their attack on cloud resources."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1496.004",
            "attack_object_name": "Cloud Service Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused in the context of 'Cloud Service Hijacking' if they are part of a larger SaaS application. Adversaries might exploit the GraphQL API to perform resource-intensive queries or operations, impacting the availability of the service or causing financial costs, similar to how other SaaS components are leveraged in this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1041",
            "attack_object_name": "Exfiltration Over C2 Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the 'Exfiltration Over C2 Channel' technique if they are used as a communication channel for data exfiltration. An attacker could leverage a GraphQL API to encode and send stolen data over an existing C2 channel, especially if the API is improperly secured or monitored, making it a tool for furthering the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1591",
            "attack_object_name": "Gather Victim Org Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique does not directly target the GraphQL API, it could potentially abuse the API as a source of organizational information if the API exposes sensitive data or metadata about the organization. Adversaries might exploit poorly secured GraphQL APIs to gather information about the victim organization, such as querying for data that reveals organizational structure or employee roles."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1606",
            "attack_object_name": "Forge Web Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the Forge Web Credentials technique if adversaries use forged credentials to interact with the API. Once credentials are forged, they can be used to authenticate and execute queries against the GraphQL API, potentially leading to unauthorized data access or manipulation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While PowerShell itself does not directly interact with GraphQL APIs, it can be used as part of a broader attack strategy where PowerShell scripts are employed to automate interactions with a GraphQL API. For instance, an attacker might use PowerShell to send crafted queries to a GraphQL API to exploit vulnerabilities, such as injection attacks or unauthorized data access, thereby abusing the API as a means to further their attack objectives."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1071.002",
            "attack_object_name": "File Transfer Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'File Transfer Protocols' technique, they can be abused in conjunction with file transfer protocols. An adversary could potentially use a GraphQL API to exfiltrate data or communicate with compromised systems by embedding commands or data within the API queries and responses, mimicking normal API traffic to avoid detection."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Exploitation for Credential Access technique. Adversaries may exploit vulnerabilities within the GraphQL API itself, such as flaws in authentication mechanisms or improper validation of queries, to gain unauthorized access to credentials. This could lead to the compromise of the API, allowing attackers to execute malicious queries or access sensitive data."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1102.003",
            "attack_object_name": "One-Way Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as a communication channel for adversaries to send commands to compromised systems. While the GraphQL API itself is not the primary target, it can be misused as a tool for one-way communication due to its ability to handle complex queries and responses, potentially hiding malicious traffic within legitimate API requests."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1590",
            "attack_object_name": "Gather Victim Network Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as a source of information for gathering network details. If a GraphQL API is improperly secured, it might expose sensitive information about the network or infrastructure, which adversaries can use to gather victim network information. This makes the GraphQL API a potential tool for adversaries to abuse in the context of this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Exploitation of Remote Services technique. Adversaries may exploit vulnerabilities in the GraphQL API's implementation, such as improper query validation or insufficient access controls, to gain unauthorized access or execute malicious code. This makes the GraphQL API the primary victim of such exploitation attempts."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can also be abused as part of the Exploitation of Remote Services technique. Once compromised, the API can be leveraged as a tool for further attacks within the network, such as lateral movement or privilege escalation. The API itself may not be the final target but can be used to facilitate attacks on other assets."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1199",
            "attack_object_name": "Trusted Relationship",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused in the context of a Trusted Relationship attack if an adversary gains access through a trusted third-party relationship that has access to the API. Once access is obtained, the GraphQL API could be used as a tool to further exploit the network, such as extracting sensitive data or performing unauthorized queries, leveraging the trust relationship to bypass normal security controls."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1098",
            "attack_object_name": "Account Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the Account Manipulation technique if an adversary uses the API to interact with user accounts. For example, if the GraphQL API provides endpoints to manage user accounts, an adversary with access could exploit these endpoints to manipulate accounts, thereby abusing the API to further their attack objectives."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1048",
            "attack_object_name": "Exfiltration Over Alternative Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the 'Exfiltration Over Alternative Protocol' technique. An attacker could leverage the GraphQL API as a means to exfiltrate data over alternative protocols by crafting specific queries that extract sensitive information and send it over non-standard channels. This abuse does not target the GraphQL API directly but uses it as a conduit for data exfiltration."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1588.002",
            "attack_object_name": "Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While T1588.002 (Tool) does not directly abuse GraphQL APIs, the tools acquired through this technique could be used to exploit vulnerabilities in GraphQL APIs. For instance, adversaries might use tools to identify and exploit weaknesses in the GraphQL schema or query validation mechanisms, thus abusing the GraphQL API as a stepping stone for further attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1496.001",
            "attack_object_name": "Compute Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused in the context of Compute Hijacking if it is used as a means to access or control the underlying compute resources. For example, if the API is improperly secured, adversaries could exploit it to deploy or manage resource-intensive tasks on the server hosting the API, thereby indirectly facilitating Compute Hijacking activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1090.003",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the Multi-hop Proxy technique if they are used as part of a proxy chain to obfuscate the source of malicious traffic. Although GraphQL APIs are not the primary target, they can be leveraged as intermediaries in a multi-hop proxy setup to facilitate the concealment of attack origins."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by brute force attacks as adversaries attempt to gain unauthorized access to the API by systematically guessing credentials. This can lead to unauthorized access and potential data exposure if successful."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.004",
            "attack_object_name": "Unix Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the Unix Shell technique (T1059.004) if the API is hosted on a Unix-based system. An attacker could exploit vulnerabilities in the GraphQL API to gain access to the underlying system shell, allowing them to execute malicious commands or scripts. This could lead to further attacks such as lateral movement or data exfiltration, using the API as a stepping stone."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.001",
            "attack_object_name": "Disable or Modify Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of this technique if they are used as a means to disable or modify security tools indirectly. For example, if a GraphQL API is used to manage or configure security tools, adversaries might exploit the API to alter configurations or disable security features, thus abusing the API to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1565",
            "attack_object_name": "Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by data manipulation attacks. Adversaries may exploit vulnerabilities in the GraphQL schema or query validation mechanisms to insert, delete, or manipulate data. This can compromise the integrity of the data handled by the API, potentially affecting business processes or decision-making."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1559",
            "attack_object_name": "Inter-Process Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Inter-Process Communication technique, they could potentially be abused in scenarios where an adversary leverages IPC mechanisms to execute commands or code that interact with the GraphQL API. This could be part of a broader attack strategy where the GraphQL API is used as a tool to facilitate further malicious activities, such as unauthorized data access or manipulation through IPC-enabled scripts or processes."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1001",
            "attack_object_name": "Data Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could potentially be abused by the Data Obfuscation technique (T1001) if adversaries use it as a channel to obfuscate command and control traffic. For example, attackers might leverage the API's ability to handle complex queries to disguise malicious communications or data exfiltration, making detection more challenging."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as part of the T1584.006 'Web Services' technique. If an adversary gains unauthorized access to a GraphQL API, they could use it as a tool or infrastructure for further attacks, such as exfiltrating data or using it for command and control operations, leveraging the trust and functionality of the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1574",
            "attack_object_name": "Hijack Execution Flow",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the GraphQL API itself is not directly targeted by the Hijack Execution Flow technique, it can be abused if an adversary gains control over the execution environment where the GraphQL API is hosted. By hijacking the execution flow of the server or application environment, an adversary could manipulate the GraphQL API's behavior, potentially leading to unauthorized actions or data exposure."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.011",
            "attack_object_name": "Lua",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused by Lua scripts if an adversary manages to execute Lua code within the environment where the GraphQL API is hosted. This could occur if the GraphQL API server has vulnerabilities that allow for arbitrary code execution, thus enabling the misuse of Lua scripts to perform malicious activities such as lateral movement or persistence. However, this would require a specific context where Lua is supported or embedded in the application environment."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027.005",
            "attack_object_name": "Indicator Removal from Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be indirectly involved in the abuse of this technique if adversaries use them to facilitate the delivery or modification of malicious tools. For instance, a GraphQL API might be leveraged to distribute updated versions of tools that have had indicators removed, thus aiding in the evasion of detection."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries using the Valid Accounts technique. If an attacker obtains valid credentials for accounts that have access to the GraphQL API, they can exploit these credentials to gain unauthorized access to the API. This can lead to unauthorized data access, manipulation, or exposure, compromising the security of the API and the data it manages."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1571",
            "attack_object_name": "Non-Standard Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the Non-Standard Port technique to communicate with the API over non-standard ports. This can help evade network monitoring and filtering mechanisms, allowing adversaries to misuse the API for unauthorized data access or other malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not the direct target of privilege escalation exploits, they can be abused in the context of an attack. For example, if an adversary has already gained access to a system with a GraphQL API, they might leverage the API to execute queries that could assist in furthering privilege escalation efforts, such as gathering sensitive information or exploiting misconfigurations that could indirectly aid in privilege escalation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1110.004",
            "attack_object_name": "Credential Stuffing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by credential stuffing attacks if they are used for authentication purposes. Adversaries may attempt to gain unauthorized access to the API by using credentials obtained from breach dumps, exploiting the tendency of users to reuse passwords across different services."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the 'Obfuscated Files or Information' technique in scenarios where adversaries use obfuscation to hide malicious queries or payloads sent to the API. This can help adversaries evade detection mechanisms that monitor API requests for suspicious activity. The API itself is not the direct victim, but it can be leveraged as a tool to execute obfuscated commands or queries, making it part of a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027.014",
            "attack_object_name": "Polymorphic Code",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using Polymorphic Code to obfuscate malicious queries or payloads. This can help in evading detection mechanisms that might be in place to monitor or filter API requests, thereby using the API as a tool to further an attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1546",
            "attack_object_name": "Event Triggered Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by 'Event Triggered Execution', they can be abused in scenarios where an adversary has already gained access to a system and uses event-triggered execution mechanisms to maintain persistence or escalate privileges. For instance, if a GraphQL API is hosted on a server that is compromised, the adversary could potentially leverage event-triggered execution to execute malicious code that interacts with the API, thus abusing it as part of a larger attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1486",
            "attack_object_name": "Data Encrypted for Impact",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the 'Data Encrypted for Impact' technique, as adversaries may attempt to encrypt data accessible through the API. This could involve encrypting data stored in databases that the API interfaces with, thereby disrupting the availability of the data to legitimate users and potentially demanding a ransom for decryption."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Subvert Trust Controls' does not directly target GraphQL APIs, it could potentially be used to abuse them. For example, if an adversary subverts trust mechanisms on a server hosting a GraphQL API, they could execute untrusted code or bypass security warnings, using the API as a tool to further their attack. This makes the GraphQL API a potential vector for abuse in the context of this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1573",
            "attack_object_name": "Encrypted Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused by the Encrypted Channel technique (T1573) if adversaries leverage the API to facilitate encrypted command and control communications. While the API itself is not the direct victim, it could be misused as a conduit for encrypted traffic, aiding in evasion and persistence strategies."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1002",
            "attack_object_name": "Data Compressed",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Data Compressed' technique (T1002) does not directly abuse the GraphQL API, it can be part of a broader attack chain where data retrieved from a GraphQL API is compressed before exfiltration. In this context, the GraphQL API could be leveraged to gather data that is subsequently compressed, thus indirectly involving the API in the attack process."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1567.003",
            "attack_object_name": "Exfiltration to Text Storage Sites",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as a means to exfiltrate data to text storage sites. If an adversary gains access to a GraphQL API, they could potentially leverage it to query and extract sensitive data, which can then be exfiltrated to text storage sites. This makes the GraphQL API a tool for data exfiltration rather than the direct target of the technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1081",
            "attack_object_name": "Credentials in Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be targeted by the 'Credentials in Files' technique if sensitive credentials are stored in configuration files or source code associated with the API. Adversaries may search for these files to extract credentials that can be used to compromise the API or gain unauthorized access."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1592.002",
            "attack_object_name": "Software",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API can be directly targeted by adversaries using the Software technique (T1592.002) to gather information about the API's software components, such as versions and configurations. This information can be used to identify vulnerabilities or weaknesses in the API, making it a primary victim of reconnaissance activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1056",
            "attack_object_name": "Input Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in an Input Capture scenario if an adversary uses the API to facilitate the capture of user inputs. For example, if a GraphQL API is improperly secured, it might be leveraged to create deceptive interfaces or queries that trick users into providing sensitive information, which is then captured by the adversary."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1587.004",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by exploits due to potential vulnerabilities in their schema, query validation mechanisms, and data handling practices. Adversaries may develop exploits to take advantage of these vulnerabilities, leading to unauthorized access, data exposure, or denial of service."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be targeted by adversaries seeking to gather credentials. If the GraphQL API is improperly configured or lacks sufficient security measures such as access controls and query validation, adversaries may exploit these weaknesses to extract sensitive information, including credentials, from the API. This can be achieved through techniques such as injection attacks or exploiting vulnerabilities in the GraphQL schema."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1195.002",
            "attack_object_name": "Compromise Software Supply Chain",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Compromise Software Supply Chain technique. Adversaries may manipulate the GraphQL API's source code or its distribution mechanism to introduce vulnerabilities or backdoors. This can lead to unauthorized access, data theft, or further exploitation of the API by end-users who integrate the compromised API into their applications."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1102.002",
            "attack_object_name": "Bidirectional Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused in the context of Bidirectional Communication if an adversary uses them as a channel to send commands to and receive data from compromised systems. Given that GraphQL APIs can be used to execute queries and retrieve data, they could be misused as a communication channel for command and control activities, especially if they are publicly accessible and not properly secured."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by exploitation attacks due to vulnerabilities in the API implementation or the underlying server. These vulnerabilities can be exploited to execute arbitrary code, potentially compromising the server hosting the API or the data it manages."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1595.003",
            "attack_object_name": "Wordlist Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by wordlist scanning techniques to discover exposed endpoints, hidden queries, or vulnerable configurations. Adversaries may use this technique to identify GraphQL endpoints that could be further exploited, potentially leading to unauthorized data access or manipulation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.011",
            "attack_object_name": "Spoof Security Alerting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by 'Spoof Security Alerting', they can be abused in scenarios where an adversary wants to manipulate or spoof security alerts related to the API's operation. For example, an attacker could generate false alerts about the GraphQL API's health or security status to mislead defenders and mask other malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1573.002",
            "attack_object_name": "Asymmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could potentially be abused by adversaries using Asymmetric Cryptography to encrypt command and control traffic. This misuse could occur if the GraphQL API is leveraged as a communication channel, where the adversaries use asymmetric encryption to conceal their malicious activities, making it harder to detect and analyze the traffic."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1567.002",
            "attack_object_name": "Exfiltration to Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of 'Exfiltration to Cloud Storage' if an adversary uses the API to gather data from a compromised system or application and then exfiltrates that data to a cloud storage service. The API itself is not the direct target but can be leveraged as a tool to facilitate data exfiltration."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1570",
            "attack_object_name": "Lateral Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Lateral Tool Transfer technique, they could potentially be abused as a means to facilitate the transfer of data or tools if an adversary exploits vulnerabilities within the API. For instance, if a GraphQL API is improperly secured, it might be leveraged to exfiltrate data or move malicious payloads across systems, thereby supporting lateral movement within a network."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1608.003",
            "attack_object_name": "Install Digital Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the installation of digital certificates is not a direct attack on GraphQL APIs, adversaries may abuse the GraphQL API by installing malicious or unauthorized certificates on the server hosting the API. This can be used to intercept or manipulate the communication between the client and the API, potentially leading to unauthorized data access or man-in-the-middle attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1100",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused by a Web Shell if the API is hosted on a compromised web server. The Web Shell could leverage the GraphQL API to perform further malicious activities, such as executing arbitrary queries to extract data or manipulate the server's resources. In this scenario, the GraphQL API acts as a tool or stepping stone for the attacker."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1095",
            "attack_object_name": "Non-Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Non-Application Layer Protocol' technique, they can be abused in scenarios where adversaries use GraphQL APIs as a means to facilitate communication or data exfiltration. For instance, an attacker might use a GraphQL API to query data and then use a non-application layer protocol to exfiltrate that data, leveraging the API as a stepping stone in their attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584.002",
            "attack_object_name": "DNS Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the DNS Server technique does not directly target GraphQL APIs, it can be used to abuse them. By compromising DNS servers, adversaries can redirect traffic intended for a GraphQL API to malicious servers, potentially intercepting or altering the data being exchanged. This can facilitate further attacks on the GraphQL API or its users, such as data interception or man-in-the-middle attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1001.003",
            "attack_object_name": "Protocol or Service Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by adversaries using the Protocol or Service Impersonation technique (T1001.003) to disguise malicious traffic as legitimate GraphQL API queries or responses. This could be used to blend C2 communications with legitimate API traffic, making it difficult for defenders to distinguish between benign and malicious activity."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1030",
            "attack_object_name": "Data Transfer Size Limits",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused by the 'Data Transfer Size Limits' technique if an adversary uses the API to exfiltrate data in smaller, less detectable chunks. The API can be leveraged as a tool for data exfiltration by sending queries that return data in controlled sizes to avoid detection mechanisms that monitor for large or unusual data transfers."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1550.004",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries using the Web Session Cookie technique. If an attacker obtains a session cookie associated with a GraphQL API, they can authenticate as a legitimate user and potentially access sensitive data or perform unauthorized actions within the API. This makes the GraphQL API a direct victim of this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1078.002",
            "attack_object_name": "Domain Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the 'Domain Accounts' technique, they can be abused if an adversary gains access to domain accounts with privileges that allow interaction with the API. This could lead to unauthorized queries or data exposure through the API, leveraging the compromised domain account credentials to misuse the GraphQL API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1506",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the Web Session Cookie technique if an adversary obtains a session cookie associated with a user authenticated to a GraphQL API. The adversary can then use the stolen session cookie to access the GraphQL API as the authenticated user, potentially accessing sensitive data or performing unauthorized actions. This misuse leverages the GraphQL API as a tool to further the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1499",
            "attack_object_name": "Endpoint Denial of Service",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by Endpoint Denial of Service attacks. Adversaries may exploit the resource-intensive nature of GraphQL queries to exhaust system resources, causing the API to become unavailable to legitimate users. This makes the GraphQL API the primary victim of the attack, as its availability is compromised."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1065",
            "attack_object_name": "Uncommonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using the 'Uncommonly Used Port' technique to bypass network defenses such as firewalls and proxies. By configuring the GraphQL API to listen on uncommon ports, adversaries can evade detection and filtering mechanisms that are typically configured to monitor standard ports."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1656",
            "attack_object_name": "Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by impersonation, they can be abused in scenarios where an adversary has already established trust through impersonation. For example, if an adversary impersonates a legitimate user or service with access to the API, they could misuse the API to extract data or perform unauthorized actions, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1494",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by runtime data manipulation attacks. Adversaries may exploit vulnerabilities in the GraphQL schema or query validation mechanisms to alter the data as it is accessed and displayed to end users. This manipulation can affect business processes and decision-making by providing altered or misleading data."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1090.004",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of Domain Fronting if they are hosted on a CDN that supports domain fronting. Adversaries could leverage the GraphQL API as a tool to mask the true destination of their traffic, using the API's domain as a front for malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1557.002",
            "attack_object_name": "ARP Cache Poisoning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While ARP Cache Poisoning does not directly target GraphQL APIs, it can be used to intercept network traffic, potentially allowing adversaries to capture or manipulate data being transmitted to or from a GraphQL API. This makes the GraphQL API an asset that can be indirectly abused through network-level attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1562.008",
            "attack_object_name": "Disable or Modify Cloud Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not the direct target of the 'Disable or Modify Cloud Logs' technique, they can be abused in scenarios where an adversary uses the API to interact with cloud services. If the GraphQL API is used to manage cloud resources, an attacker could potentially leverage it to disable or modify cloud logging settings, thereby abusing the API as a tool for furthering their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1493",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Transmitted Data Manipulation technique as adversaries may intercept and alter data being transmitted through the API. This can lead to unauthorized data exposure or manipulation of the data being queried or returned by the API, affecting the integrity and confidentiality of the data."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.006",
            "attack_object_name": "Python",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API can be abused by Python scripts to perform malicious activities. Adversaries could use Python scripts to automate interactions with the API, potentially exploiting vulnerabilities in the API's schema or query handling. This could include sending resource-intensive queries to cause denial of service or crafting queries to extract unauthorized data, leveraging the flexibility and power of Python to facilitate these actions."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1591.004",
            "attack_object_name": "Identify Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused to gather information about roles and identities within an organization if it is improperly configured or lacks sufficient access controls. Adversaries might exploit the API to query for sensitive information about users and their roles, thus leveraging the API as a tool for reconnaissance activities related to the 'Identify Roles' technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Data Encoding technique (T1132) can be used to abuse a GraphQL API by encoding malicious queries or data to evade detection mechanisms. Attackers might leverage data encoding to bypass security controls or to obfuscate the nature of their queries, making it a tool for furthering attacks on other assets or systems."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1496",
            "attack_object_name": "Resource Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API can be abused in the context of Resource Hijacking if it is used to execute resource-intensive queries that consume excessive computational resources. This could lead to denial of service or reduced availability of the API, indirectly supporting the adversary's goals of resource hijacking by overloading the system's resources."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1555.006",
            "attack_object_name": "Cloud Secrets Management Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique does not directly target GraphQL APIs, these APIs can be abused if they are used to interact with cloud secret management services. If a GraphQL API has permissions to access cloud secrets, an adversary could potentially exploit the API to retrieve secrets from the cloud secrets manager, thus abusing the GraphQL API as a tool to further their attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1213.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused in the context of 'Code Repositories' if they are used to interact with code repositories. For example, if a GraphQL API is used to manage or access a code repository, it could be leveraged by adversaries to extract sensitive information or credentials stored within the repository, thus acting as a tool to further the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1565.002",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by the Transmitted Data Manipulation technique as adversaries may intercept and alter data being transmitted to or from the API. This manipulation can compromise the integrity of the data handled by the API, potentially leading to unauthorized data exposure or incorrect data being processed by the application."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1569",
            "attack_object_name": "System Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the System Services technique (T1569) does not directly target GraphQL APIs, it can potentially abuse them as part of a broader attack strategy. For instance, if a GraphQL API is hosted on a server, adversaries might abuse system services on the server to execute malicious content, which could indirectly affect the API's operation. However, the primary focus of this technique is on system services rather than the API itself."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1059.003",
            "attack_object_name": "Windows Command Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Windows Command Shell technique does not directly target GraphQL APIs, it can be abused in scenarios where an attacker has already compromised a system hosting a GraphQL API. Once access is gained, the attacker could use the command shell to execute further commands, potentially leveraging the GraphQL API for data exfiltration or lateral movement within the network. However, this is an indirect abuse scenario where the GraphQL API is used as a tool rather than being the primary target of the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1650",
            "attack_object_name": "Acquire Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Acquire Access' technique does not directly abuse GraphQL APIs, it is possible that once access to a system is acquired, the GraphQL API could be leveraged as a tool for further exploitation. For instance, if an adversary gains access to a system hosting a GraphQL API, they could use the API to extract data or perform unauthorized actions, thus abusing the API as part of a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1213",
            "attack_object_name": "Data from Information Repositories",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries using the 'Data from Information Repositories' technique. Since GraphQL APIs are designed to provide access to data repositories, adversaries may exploit vulnerabilities in the API to extract sensitive information stored within these repositories. This can include unauthorized access to data such as credentials, network diagrams, or other sensitive information that the API is designed to serve."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1036.010",
            "attack_object_name": "Masquerade Account Name",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the GraphQL API itself is not directly targeted by the 'Masquerade Account Name' technique, it can be abused in scenarios where adversaries create or manipulate accounts that interact with the API. For example, adversaries may use masqueraded accounts to gain unauthorized access to the API or to perform actions that appear legitimate, leveraging the API as a tool to further their malicious activities."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1505",
            "attack_object_name": "Server Software Component",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The GraphQL API can be targeted by adversaries using the Server Software Component technique (T1505) as it involves exploiting vulnerabilities in server applications. GraphQL APIs, being server-side components, can be directly compromised by adversaries installing malicious components or scripts to extend and abuse the API's functionality, leading to unauthorized access or data exposure."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1505",
            "attack_object_name": "Server Software Component",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can also be abused by adversaries using the Server Software Component technique (T1505) as a means to further attacks. Once a GraphQL API is compromised, it can be leveraged to execute additional malicious activities, such as persistence or lateral movement within the network, by using the API's extensible features to install malicious components that facilitate these actions."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1485",
            "attack_object_name": "Data Destruction",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by data destruction techniques. Adversaries may exploit vulnerabilities in the GraphQL API to execute destructive operations on the data it manages. This could involve sending malicious queries that result in the deletion or overwriting of data, thereby rendering it irrecoverable and disrupting the availability of the API's services."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1132.002",
            "attack_object_name": "Non-Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by adversaries using Non-Standard Encoding to obfuscate malicious queries or data exfiltration activities. By encoding data in a non-standard way, attackers may bypass security mechanisms designed to detect standard patterns of malicious activity, using the GraphQL API as a conduit for stealthy communication."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1537",
            "attack_object_name": "Transfer Data to Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as a tool for data exfiltration to cloud accounts. Adversaries might exploit vulnerabilities in the GraphQL API, such as insufficient access controls or lack of query validation, to extract sensitive data and transfer it to a cloud account they control. This makes the GraphQL API a potential vector for abuse in the context of this technique."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1027.010",
            "attack_object_name": "Command Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries using Command Obfuscation (T1027.010) to hide malicious queries or mutations. By obfuscating the commands sent to the API, attackers can attempt to bypass detection mechanisms and execute unauthorized actions or extract sensitive data without being easily detected."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1022",
            "attack_object_name": "Data Encrypted",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the 'Data Encrypted' technique (T1022) if they are used as a means to exfiltrate data. Attackers may leverage GraphQL queries to extract sensitive data from the API, encrypt it, and then exfiltrate it to avoid detection. In this scenario, the GraphQL API serves as a tool to facilitate the exfiltration process."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1070.004",
            "attack_object_name": "File Deletion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the File Deletion technique does not directly abuse GraphQL APIs, it can be used in conjunction with attacks involving GraphQL APIs to remove evidence of malicious activity. For example, after exploiting a GraphQL API to gain access to a system, an adversary might use file deletion to cover their tracks, thereby indirectly abusing the GraphQL API as part of a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1498",
            "attack_object_name": "Network Denial of Service",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "A GraphQL API can be directly targeted by Network Denial of Service (DoS) attacks. Adversaries may attempt to exhaust the network bandwidth or processing capacity of the server hosting the GraphQL API by sending a high volume of malicious traffic. This can degrade or block the availability of the API to legitimate users, making the GraphQL API the primary victim of the attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1595.001",
            "attack_object_name": "Scanning IP Blocks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While 'Scanning IP Blocks' does not directly abuse GraphQL APIs, it can indirectly affect them by identifying the IP addresses where such APIs are hosted. This information can be used as a stepping stone for further attacks, such as probing the API for vulnerabilities or launching denial of service attacks if the API is exposed on the identified IP addresses."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1134",
            "attack_object_name": "Access Token Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Access Token Manipulation does not directly target GraphQL APIs, it can be used to abuse the API indirectly. If an adversary manipulates access tokens to gain elevated privileges on a system hosting a GraphQL API, they could misuse these privileges to execute unauthorized actions against the API, such as accessing sensitive data or altering API configurations. Thus, the technique can be used as a stepping stone to further attacks involving the GraphQL API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused in conjunction with serverless environments if adversaries use the API to indirectly interact with or manipulate serverless functions. For example, a GraphQL API might be used to trigger actions in a serverless environment, which could then be leveraged for malicious activities such as proxying traffic or hiding infrastructure. However, the primary focus of the abuse is on the serverless infrastructure itself, with the GraphQL API serving as a tool to facilitate this abuse."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1071.001",
            "attack_object_name": "Web Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the Web Protocols technique (T1071.001) as they operate over HTTP/S, which is a common web protocol. Adversaries may use GraphQL API traffic to communicate with compromised systems, blending malicious activity with legitimate API requests to avoid detection."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1136",
            "attack_object_name": "Create Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Create Account' technique does not directly target a GraphQL API, it can be abused in scenarios where the API is used to manage user accounts. If an adversary gains access to the GraphQL API and it lacks proper access controls, they could potentially misuse the API to create unauthorized accounts, thereby abusing the API as a tool to further their attack objectives."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be hosted on a compromised server, which is the focus of technique T1584.004. In this scenario, the GraphQL API may be abused as part of the server's resources to further adversary operations, such as staging or launching attacks, or facilitating command and control. Hence, the GraphQL API may be misused as a tool when the server it resides on is compromised."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1526",
            "attack_object_name": "Cloud Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Cloud Service Discovery technique does not directly target GraphQL APIs, it can abuse them as a means to gather information about cloud services. If a GraphQL API is improperly secured, adversaries could potentially use it to query and enumerate cloud resources and services, leveraging the API as a tool for further discovery within a cloud environment."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1018",
            "attack_object_name": "Remote System Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While GraphQL APIs are not directly targeted by the Remote System Discovery technique, they can be abused in the context of this technique. An adversary could use a GraphQL API to query for information about network systems or services if the API is improperly configured to expose such data. This misuse aligns with the concept of abusing an asset type to further an attack, as the API could inadvertently provide information useful for discovering remote systems."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1046",
            "attack_object_name": "Network Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be indirectly involved in Network Service Discovery if they are exposed as a network service. Adversaries may use this technique to identify the presence of a GraphQL API as part of a broader network service enumeration, potentially leading to further probing or exploitation attempts."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1590.001",
            "attack_object_name": "Domain Properties",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Domain Properties technique is primarily about gathering information, a GraphQL API could potentially be abused in this context if it exposes domain-related information through its queries. If a GraphQL API is improperly configured or lacks adequate access controls, adversaries might leverage it to gather domain-related data that can be used for further reconnaissance or attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1518",
            "attack_object_name": "Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Software Discovery technique can be used to abuse a GraphQL API by leveraging it to enumerate software and software versions. An adversary may use the API to gather information about the software environment, which could then be used to plan further attacks, such as identifying vulnerable software versions or security measures in place."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1105",
            "attack_object_name": "Ingress Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused in the context of the Ingress Tool Transfer technique if it is used as a conduit to transfer malicious tools or files into a network. For example, if an adversary can exploit a GraphQL API to upload files or execute commands, it could be leveraged as a tool to facilitate the ingress of malicious payloads into a target environment."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1648",
            "attack_object_name": "Serverless Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of Serverless Execution if they are used as a frontend to trigger serverless functions. Adversaries could exploit vulnerabilities in the GraphQL API to indirectly invoke serverless functions for malicious purposes, such as executing unauthorized code or escalating privileges in a cloud environment."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1665",
            "attack_object_name": "Hide Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as part of the 'Hide Infrastructure' technique by adversaries who may leverage the API's capabilities to obfuscate or redirect network traffic. For example, adversaries might use a GraphQL API to serve benign content while masking the true intent of their infrastructure, thus aiding in evasion from detection and prolonging the effectiveness of their malicious infrastructure."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1204.001",
            "attack_object_name": "Malicious Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Malicious Link' technique does not directly target GraphQL APIs, it can be used to abuse them indirectly. For instance, a malicious link could lead to a script or tool that interacts with a GraphQL API to perform unauthorized queries or exploit vulnerabilities in the API, using the API as a tool to further an attack."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries using stolen application access tokens. These tokens can be used to bypass authentication mechanisms and access the API with the same privileges as the legitimate user, potentially leading to unauthorized data exposure or manipulation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries leveraging stolen access tokens to perform actions on behalf of a legitimate user. This abuse can facilitate lateral movement or further attacks on other connected services by exploiting the API's capabilities to access additional resources or services."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1078.004",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused in the context of the 'Cloud Accounts' technique if an adversary gains access to cloud accounts that have permissions to interact with the API. This can lead to unauthorized data access or manipulation through the API, leveraging the compromised cloud account credentials."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1480.001",
            "attack_object_name": "Environmental Keying",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused by Environmental Keying if the API is used to gather target-specific environmental values that are then used to derive decryption keys for malicious payloads. This would involve leveraging the API as a tool to facilitate the execution of environmentally keyed malware, rather than directly attacking the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1008",
            "attack_object_name": "Fallback Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of a fallback communication channel if adversaries leverage the API to establish alternate command and control paths. This could occur if the GraphQL API is improperly secured, allowing it to be used as a conduit for malicious communication."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1053.002",
            "attack_object_name": "At",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'At' technique itself does not directly target GraphQL APIs, it can be used to abuse the underlying server environment where the GraphQL API is hosted. By scheduling tasks to execute malicious code, adversaries can potentially affect the availability or integrity of the GraphQL API, leveraging it as a tool for persistence, lateral movement, or privilege escalation."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1086",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While PowerShell does not directly target GraphQL APIs, it can be used to abuse them indirectly. For instance, an adversary could use PowerShell to automate attacks against a GraphQL API, such as sending a series of crafted queries to exploit vulnerabilities or perform reconnaissance. Additionally, PowerShell scripts could be used to interact with a compromised GraphQL API to extract data or perform further malicious actions. Thus, PowerShell can be leveraged as a tool to abuse GraphQL APIs in the context of a broader attack strategy."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1588.005",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by exploits that take advantage of vulnerabilities in the GraphQL schema, query validation mechanisms, or data handling practices. These exploits can lead to unauthorized access, data exposure, or denial of service, making the GraphQL API the primary victim of such attacks."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1556",
            "attack_object_name": "Modify Authentication Process",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused in the context of the 'Modify Authentication Process' technique if an adversary uses it as a stepping stone to further an attack. For instance, if the GraphQL API is improperly secured, it might be leveraged to access or modify authentication processes indirectly by querying or manipulating data related to authentication. This could include exploiting vulnerabilities in the API to bypass authentication controls or extract sensitive information that aids in modifying authentication processes elsewhere."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1090.001",
            "attack_object_name": "Internal Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused as part of the Internal Proxy technique if an adversary leverages the API to facilitate communication between compromised systems. While the API itself is not directly targeted, it could be misused to route traffic or blend in with legitimate traffic, aiding in the adversary's efforts to conceal command and control communications."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1094",
            "attack_object_name": "Custom Command and Control Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused by adversaries using the Custom Command and Control Protocol technique (T1094) as a means to facilitate communication with compromised systems. While the API itself is not the direct target, it could be leveraged to establish or disguise command and control channels, especially if the API is exposed to the internet and lacks proper security controls."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1102.001",
            "attack_object_name": "Dead Drop Resolver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could potentially be abused as part of the Dead Drop Resolver technique if adversaries leverage them as a legitimate web service to host or relay information pointing to additional C2 infrastructure. This would involve using the GraphQL API as a tool to facilitate communication with C2 infrastructure, rather than directly attacking the API itself."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1001.001",
            "attack_object_name": "Junk Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs could be abused by the Junk Data technique if adversaries use the API as a channel for command and control communication. By embedding junk data within legitimate GraphQL queries or responses, adversaries can obscure their malicious activities and make detection more challenging."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1043",
            "attack_object_name": "Commonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by the 'Commonly Used Port' technique as they often operate over common ports such as TCP:80 (HTTP) or TCP:443 (HTTPS). Adversaries may leverage these commonly used ports to communicate with or through a GraphQL API, blending in with normal traffic and evading detection mechanisms."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1584.001",
            "attack_object_name": "Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A GraphQL API could be abused if an adversary hijacks a domain or subdomain associated with the API. By controlling the domain, the adversary can redirect traffic intended for the legitimate GraphQL API to a malicious server, potentially capturing sensitive data or conducting further attacks. This makes the GraphQL API a tool or stepping stone in the attack process, leveraging the trust associated with the hijacked domain."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1048.003",
            "attack_object_name": "Exfiltration Over Unencrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused by adversaries to exfiltrate data over unencrypted non-C2 protocols. An attacker could leverage a GraphQL API to retrieve sensitive data and then exfiltrate it using unencrypted protocols like HTTP. The API itself is not the direct target but is used as a tool to facilitate data exfiltration."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1078.003",
            "attack_object_name": "Local Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Local Accounts' technique does not directly target GraphQL APIs, it can be used to abuse the asset type. If an adversary gains access to local accounts on the server hosting the GraphQL API, they could leverage these credentials to perform actions such as privilege escalation or lateral movement, potentially impacting the security and integrity of the GraphQL API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "GraphQL APIs can be directly targeted by adversaries exploiting vulnerabilities in the API to bypass security features. This can include exploiting schema misconfigurations or query validation weaknesses to execute unauthorized actions or access sensitive data, thereby compromising the API."
        },
        {
            "capability_id": "GraphQL API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A GraphQL API is an application programming interface that uses GraphQL, a query language for APIs, to execute queries with existing data. GraphQL provides a more efficient and powerful alternative to REST and offers significant advantages for data-driven applications by allowing clients to request exactly what they need, making it possible to get many resources in a single request. However, GraphQL APIs also present unique security challenges. These include potential vulnerabilities in the GraphQL schema, query validation mechanisms, and data handling practices. Threat vectors can range from injection attacks, denial of service (DoS) attacks due to resource-intensive queries, to unauthorized data exposure. Security considerations include the configuration of access controls, rate limiting, query depth limiting, and the security of the server on which the GraphQL API is hosted.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "GraphQL APIs can be abused as a tool for defense evasion. Adversaries might leverage the flexibility of GraphQL queries to craft complex queries that evade detection or logging mechanisms, or to perform lateral movement within an application environment by accessing interconnected data resources without triggering security alerts."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1205.002",
            "attack_object_name": "Socket Filters",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Socket Filters' technique, they could be indirectly abused if an adversary uses socket filters to monitor network traffic and identify API calls. This could allow the adversary to misuse the API for further attacks, such as data exfiltration or command and control operations, by leveraging the network infrastructure that the API operates on."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1560.001",
            "attack_object_name": "Archive via Utility",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Archive via Utility' technique, they can be abused in the context of this technique. Adversaries may use REST APIs to interact with web services and collect data, which can then be compressed or encrypted using utilities before exfiltration. Thus, REST APIs can be leveraged as a tool for data collection in preparation for this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.011",
            "attack_object_name": "Fileless Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in conjunction with the Fileless Storage technique. An adversary might leverage a compromised REST API to facilitate the storage or retrieval of malicious data in a fileless manner, using the API as a conduit to interact with systems where fileless storage is employed. This can be part of a broader attack strategy where the REST API is misused to further the adversary's goals, such as persistence or evasion."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1557",
            "attack_object_name": "Adversary-in-the-Middle",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Adversary-in-the-Middle (AiTM) technique can directly target REST APIs by intercepting and manipulating the communication between the client and the server. This can lead to unauthorized access, data theft, or manipulation of the data being transmitted. REST APIs, due to their reliance on HTTP methods and stateless communication, can be vulnerable to such interception if proper encryption and authentication mechanisms are not implemented."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1557",
            "attack_object_name": "Adversary-in-the-Middle",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the AiTM technique to facilitate further attacks. Once an adversary positions themselves between the client and the server, they can misuse the API to perform actions like credential theft, session hijacking, or data manipulation, which can then be used to attack other systems or services connected to the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1033",
            "attack_object_name": "System Owner/User Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of System Owner/User Discovery, they can be abused to facilitate this technique. If a REST API provides endpoints that expose user-related information, such as user account details or session information, adversaries could leverage these endpoints to gather user information as part of their discovery process. This abuse would depend on the specific implementation and exposure of the API endpoints."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583",
            "attack_object_name": "Acquire Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Acquire Infrastructure' technique by being used to interact with third-party web services or cloud providers to acquire or manage infrastructure. Adversaries may use REST APIs to automate the provisioning, modification, or shutdown of infrastructure resources, leveraging them as tools to facilitate their operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1613",
            "attack_object_name": "Container and Resource Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Container and Resource Discovery' as they may provide interfaces to query information about containers and resources. Adversaries can leverage REST APIs to gather information about the environment, such as available containers, configurations, and services, which can aid in further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Serverless technique (T1583.007) does not directly abuse REST APIs, it can indirectly involve REST APIs as part of the serverless infrastructure. REST APIs may be used to interact with serverless functions or services, potentially being misused as a conduit for malicious activities such as proxying traffic or executing commands. However, the primary focus of the technique is on the serverless infrastructure rather than REST APIs themselves."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1132.001",
            "attack_object_name": "Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Standard Encoding technique (T1132.001) to encode data within API requests or responses. This can help attackers obfuscate command and control traffic or data exfiltration, making it difficult for security systems to detect malicious activities leveraging the REST API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.009",
            "attack_object_name": "Embedded Payloads",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the 'Embedded Payloads' technique if the API interacts with files that may contain embedded malicious payloads. For example, if a REST API processes files uploaded by users, adversaries could embed malicious payloads within these files to exploit the API or the underlying system, using the API as a conduit for delivering the payload."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1578.004",
            "attack_object_name": "Revert Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Revert Cloud Instance' technique if they are used as part of cloud management interfaces. Adversaries might leverage REST APIs to automate the process of reverting cloud instances, thus using the API as a tool to facilitate their attack on cloud infrastructure."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1592",
            "attack_object_name": "Gather Victim Host Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the 'Gather Victim Host Information' technique to collect information about the host environment. For example, adversaries may leverage REST API endpoints to gather data such as server configurations, IP addresses, and other metadata that can be used for further reconnaissance or targeting. Additionally, REST APIs may inadvertently expose information through HTTP headers or responses that can be collected by adversaries."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1110.001",
            "attack_object_name": "Password Guessing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by password guessing attacks, especially if they require authentication via username and password. Adversaries may attempt to guess passwords to gain unauthorized access to the API and the data or services it provides."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1597.002",
            "attack_object_name": "Purchase Technical Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique does not directly abuse a REST API, the information purchased could potentially include details about REST APIs that are part of the target's infrastructure. This information could then be used to plan further attacks that might abuse the API, such as using it for reconnaissance or identifying vulnerabilities to exploit."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1602",
            "attack_object_name": "Data from Configuration Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a means to access configuration repositories if they are used to interact with or manage such repositories. Adversaries may exploit vulnerabilities in REST APIs to gain unauthorized access to configuration data, using the API as a tool to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1498.001",
            "attack_object_name": "Direct Network Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by Direct Network Flood attacks as they are web services exposed over the network. A high volume of network traffic can be sent to the REST API endpoints, resulting in a denial of service (DoS) by overwhelming the server's ability to handle requests, thus compromising the availability and functionality of the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1492",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by the Stored Data Manipulation technique as they often interact with databases or data storage systems. Adversaries may manipulate data accessed or stored by the API to affect business processes or organizational decision-making. This can involve altering the data that the API reads from or writes to a database, which directly compromises the integrity of the data handled by the REST API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1588.007",
            "attack_object_name": "Artificial Intelligence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the technique T1588.007 (Artificial Intelligence) in the sense that AI tools could be used to automate the creation of scripts or payloads that interact with or exploit vulnerabilities in REST APIs. This could include generating malicious requests or automating attacks that misuse the API for further malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1666",
            "attack_object_name": "Modify Cloud Resource Hierarchy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Modify Cloud Resource Hierarchy' if they are used to interact with cloud management services. An adversary with access to a REST API that interfaces with cloud infrastructure could potentially make API calls to modify resource hierarchies, such as creating or deleting resource groups, thus abusing the API to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1491.002",
            "attack_object_name": "External Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs, being part of web services, can be directly targeted by external defacement attacks. Adversaries may alter the API responses or the data served by the API to deliver misleading information or propaganda, similar to how websites are defaced. This can lead to a loss of trust in the API's integrity and reliability."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.013",
            "attack_object_name": "Encrypted/Encoded File",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in conjunction with the 'Encrypted/Encoded File' technique if adversaries use the API to transmit or receive encoded or encrypted data. This can be part of a larger attack strategy where the REST API is used as a conduit for transferring obfuscated malicious payloads or data, thereby facilitating evasion of detection mechanisms."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1590.005",
            "attack_object_name": "IP Addresses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be indirectly involved in technique T1590.005 (IP Addresses) as they may expose IP address information through misconfigurations or insufficient access controls. Adversaries can abuse this exposure to gather IP addresses and related information, which can then be used for further reconnaissance or targeting other assets within the network."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1499.001",
            "attack_object_name": "OS Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The OS Exhaustion Flood technique can target REST APIs by overwhelming the server's operating system with excessive TCP connection requests, such as SYN floods or ACK floods. This can exhaust the server's ability to handle new connections, directly impacting the availability of the REST API services."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by JavaScript-based attacks, particularly through injection attacks where malicious JavaScript code is executed on the server or client-side. This can lead to unauthorized access, data theft, or manipulation of the API's resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "JavaScript can be used to abuse REST APIs by embedding malicious scripts in web applications that interact with the API. These scripts can perform unauthorized actions on behalf of the user, such as sending unauthorized requests to the API, thereby misusing the API as a tool for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1590.002",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the DNS technique, they can be indirectly affected. Adversaries may use DNS information to discover REST API endpoints or related infrastructure, which can then be used to further an attack. This makes REST APIs a potential tool or stepping stone in the broader reconnaissance phase facilitated by DNS information gathering."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1485.001",
            "attack_object_name": "Lifecycle-Triggered Deletion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused to facilitate 'Lifecycle-Triggered Deletion' if they provide interfaces to manage cloud storage lifecycle policies. If an adversary gains access to a REST API with sufficient permissions, they could use it to modify lifecycle policies and delete data, thus abusing the API as a tool to execute the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1133",
            "attack_object_name": "External Remote Services",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries using the External Remote Services technique. Since REST APIs are often exposed to the internet to provide services, they can be exploited to gain unauthorized access to network resources. If a REST API lacks proper authentication mechanisms or has vulnerabilities, it can be used by attackers to access internal systems or data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1133",
            "attack_object_name": "External Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the External Remote Services technique. Once an adversary gains access to a REST API, they can use it as a stepping stone to further penetrate the network, perform lateral movement, or maintain persistence. For example, an attacker could exploit a REST API to interact with other services or systems within the network, leveraging the API's functionality to execute additional attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1539",
            "attack_object_name": "Steal Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by the 'Steal Web Session Cookie' technique as they often rely on session cookies for authentication. If an adversary can steal these cookies, they can gain unauthorized access to the REST API as an authenticated user, compromising the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1053.007",
            "attack_object_name": "Container Orchestration Job",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in conjunction with container orchestration jobs if an adversary uses a REST API to interact with the orchestration system to schedule malicious jobs. The REST API itself is not the direct target but can be a tool to facilitate the execution of malicious code within a container orchestration environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1568.002",
            "attack_object_name": "Domain Generation Algorithms",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While DGAs do not directly target REST APIs, they can be used in conjunction with REST APIs as part of a broader attack strategy. For instance, if a REST API is compromised, it could be used to facilitate communication with a command and control server that uses DGAs to avoid detection. Thus, the REST API could be abused as a communication channel in an attack leveraging DGAs."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1496.003",
            "attack_object_name": "SMS Pumping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the SMS Pumping technique when they are used as a tool to facilitate the sending of large volumes of SMS messages. This is often done through publicly available web forms that interact with REST APIs to send SMS messages, thereby misusing the API for malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1016.001",
            "attack_object_name": "Internet Connection Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Internet Connection Discovery by adversaries using them to send HTTP requests (e.g., GET requests) to external servers to check for internet connectivity. This can be part of a broader strategy to determine if a compromised system can communicate with external C2 servers."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1578",
            "attack_object_name": "Modify Cloud Compute Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Modify Cloud Compute Infrastructure' if they are used to interact with cloud services. An adversary could exploit vulnerabilities or misconfigurations in REST APIs to send unauthorized requests that modify cloud infrastructure, thereby using the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1069",
            "attack_object_name": "Permission Groups Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs themselves are not the direct target of the Permission Groups Discovery technique, they can be abused as a tool to gather information about permission groups if the API provides endpoints that expose such data. Adversaries may exploit poorly secured or misconfigured APIs to retrieve information about user permissions and groups, which can be used for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1594",
            "attack_object_name": "Search Victim-Owned Websites",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of this technique if they are part of the victim-owned web resources being searched. Adversaries might look for API endpoints or documentation that could reveal sensitive information or provide insights into the organization's operations, which could be used for further reconnaissance or attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1069.003",
            "attack_object_name": "Cloud Groups",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Cloud Groups' technique if they are used to interact with cloud services to enumerate group permissions and roles. Adversaries may leverage REST APIs to automate the process of querying cloud services for group information, thus using the API as a tool to further their attack on cloud infrastructure."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1596.001",
            "attack_object_name": "DNS/Passive DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the DNS/Passive DNS technique does not directly abuse REST APIs, the information gathered through DNS reconnaissance could potentially be used to identify REST API endpoints and their configurations. This information might then be leveraged in subsequent attacks targeting the REST API, such as identifying vulnerable endpoints or misconfigurations that could be exploited."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1499.003",
            "attack_object_name": "Application Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Application Exhaustion Flood technique targets REST APIs by exploiting resource-intensive features, leading to a denial of service. This attack directly impacts the REST API by overwhelming its resources, causing it to become unavailable to legitimate users."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1195.001",
            "attack_object_name": "Compromise Software Dependencies and Development Tools",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs often rely on external software dependencies to function properly. If these dependencies are compromised, the REST API can be directly targeted and compromised through malicious code introduced in these dependencies. This can lead to unauthorized access, data breaches, or execution of malicious operations within the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1588.004",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have obtained digital certificates. These certificates can be used to establish trusted communication channels, potentially enabling adversary-in-the-middle attacks or encrypting malicious traffic to and from the REST API, thereby misusing the API as a tool for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1071.004",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the DNS technique (T1071.004) does not directly target REST APIs, it can be abused in conjunction with REST APIs. For example, if a REST API is compromised or misconfigured, it could be used to facilitate DNS tunneling by sending or receiving data that is then encoded within DNS queries or responses, thus abusing the REST API as a tool for covert communication."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1552.005",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Cloud Instance Metadata API technique if there is a Server-Side Request Forgery (SSRF) vulnerability. In such cases, a REST API could be leveraged to access the Cloud Instance Metadata API, thus misusing the REST API as a tool to gain access to sensitive information."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1522",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Cloud Instance Metadata API technique (T1522) if they are vulnerable to Server-Side Request Forgery (SSRF). An attacker could exploit such a vulnerability in a REST API to make unauthorized requests to the metadata API, thereby accessing sensitive information. In this scenario, the REST API is used as a tool to further the attack on cloud instance metadata."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1036.005",
            "attack_object_name": "Match Legitimate Name or Location",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Match Legitimate Name or Location' does not directly target REST APIs, it can be used to abuse them. For example, adversaries could deploy malicious resources that mimic legitimate API endpoints or services, thereby misleading users or systems into interacting with these malicious resources. This abuse can facilitate further attacks such as data interception, unauthorized access, or lateral movement within a network."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1172",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in conjunction with Domain Fronting to mask the true destination of API requests. Attackers can leverage REST APIs to send requests that appear to be directed to a legitimate domain, while actually routing them to a malicious endpoint. This misuse can facilitate evasion techniques and conceal malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1587.003",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using self-signed digital certificates to establish encrypted communication channels that bypass security controls. This can be part of a strategy to conduct man-in-the-middle attacks or to encrypt malicious traffic, making it harder to detect and analyze API interactions."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1565.001",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by stored data manipulation attacks. Adversaries may exploit vulnerabilities in the API to manipulate data stored on the server, such as altering database records accessed via the API. This manipulation can compromise the integrity of the data managed by the API, affecting business processes and decision-making."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1110.002",
            "attack_object_name": "Password Cracking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have successfully cracked passwords to gain unauthorized access. Once credentials are cracked, adversaries can use them to authenticate against REST APIs, potentially misusing the API for further attacks or data exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1600",
            "attack_object_name": "Weaken Encryption",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs often rely on encryption to secure data in transit. The 'Weaken Encryption' technique can target REST APIs by compromising their encryption mechanisms, potentially leading to unauthorized data disclosure or manipulation. This makes the REST API a direct victim of the attack as its primary security feature is undermined."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1606.002",
            "attack_object_name": "SAML Tokens",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the SAML Tokens technique when forged SAML tokens are used to authenticate and interact with APIs that rely on SAML 2.0 for authentication. This allows adversaries to misuse the API for unauthorized actions, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1192",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by spearphishing links, they can be abused indirectly. For example, if a user is tricked into clicking a malicious link that steals application access tokens, those tokens could be used to abuse REST APIs by gaining unauthorized access to them or performing actions on behalf of the user."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1036.008",
            "attack_object_name": "Masquerade File Type",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could potentially be abused by the 'Masquerade File Type' technique if they handle file uploads or downloads. An adversary might exploit a REST API to upload a malicious file disguised as a benign file type, leveraging the API as a conduit to introduce malware into a system. This misuse aligns with the abuse of the asset type, where the API acts as a tool to facilitate the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1489",
            "attack_object_name": "Service Stop",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While a REST API itself is not directly targeted by the 'Service Stop' technique, it can be indirectly affected if the underlying services it relies on are stopped. For example, if the web server or application server hosting the REST API is stopped, the API becomes unavailable, thus abusing the REST API as a tool to disrupt service availability."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1587.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by malware developed under technique T1587.001. Malware may leverage REST APIs as part of its communication strategy, such as using them for command and control (C2) communications or data exfiltration. In this context, REST APIs serve as a tool or conduit for furthering malicious activities, making them susceptible to abuse by malware."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1591.003",
            "attack_object_name": "Identify Business Tempo",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be leveraged to gather information about business operations if they expose endpoints that reveal operational data, such as business hours or transaction times. Thus, REST APIs can be abused to indirectly support the 'Identify Business Tempo' technique by providing adversaries with insights into the organization's business operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1063",
            "attack_object_name": "Security Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of 'Security Software Discovery,' they can be abused as a means to gather information about the security environment. An adversary might use a REST API to query and retrieve data about security software configurations if the API provides such access. This would involve leveraging the API to indirectly gain insights into the security posture of the system, thus abusing the API for furthering the discovery process."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1071.005",
            "attack_object_name": "Publish/Subscribe Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused by adversaries using the Publish/Subscribe Protocols technique (T1071.005) as a means to communicate with compromised systems. By leveraging REST API endpoints, adversaries can blend their communication within normal API traffic, using pub/sub protocols to send and receive commands or data, thus misusing the API as a tool for covert communication."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1080",
            "attack_object_name": "Taint Shared Content",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Taint Shared Content technique, they can be abused in scenarios where they interact with shared content or storage locations. For example, a REST API could be used to upload or modify files in a shared repository, potentially allowing an adversary to taint the shared content. In such cases, the REST API acts as a tool or conduit to facilitate the tainting of shared content, aligning with the abuse aspect of the technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1573.001",
            "attack_object_name": "Symmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique Symmetric Cryptography (T1573.001) can be abused in the context of a REST API by encrypting malicious command and control traffic to evade detection. While the REST API itself is not the direct victim, it can be leveraged as a communication channel for encrypted traffic, thereby facilitating malicious activities such as data exfiltration or command execution without being easily detected."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1527",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs are directly targeted by attackers using compromised application access tokens. These tokens allow adversaries to bypass authentication mechanisms and gain unauthorized access to the API, potentially leading to data exposure or unauthorized actions within the application."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1527",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who leverage stolen application access tokens to perform unauthorized actions on behalf of a user. This abuse allows attackers to use the API as a tool to access resources or perform actions that further their attack objectives, such as lateral movement or data exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1568.001",
            "attack_object_name": "Fast Flux DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by Fast Flux DNS, they can be abused in scenarios where an API is used to interact with domains that employ Fast Flux DNS. For instance, if a REST API is used to communicate with a backend service or external resource that is hidden behind a Fast Flux DNS setup, the API could be inadvertently used to facilitate communication with malicious infrastructure, thereby becoming part of the attack chain."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1053.003",
            "attack_object_name": "Cron",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Cron technique itself does not directly target REST APIs, it can be used to schedule tasks that interact with or abuse REST APIs. For example, an adversary might schedule a cron job to repeatedly call a REST API to exfiltrate data or perform unauthorized operations, thereby abusing the API as a tool for malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1588.006",
            "attack_object_name": "Vulnerabilities",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries exploiting known vulnerabilities. These vulnerabilities may exist in the API code itself, in the underlying server infrastructure, or in the authentication mechanisms. Adversaries can use information about these vulnerabilities to compromise the REST API, leading to unauthorized access, data theft, or service disruption."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1566.002",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by Spearphishing Link, they can be abused indirectly. For example, adversaries may use spearphishing links to steal application access tokens via OAuth 2.0 consent phishing. These tokens can then be used to make unauthorized API calls, abusing the REST API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1070.002",
            "attack_object_name": "Clear Linux or Mac System Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs themselves are not directly targeted by the technique 'Clear Linux or Mac System Logs', they can be indirectly involved. If a REST API is used to interact with system components or logs, adversaries might abuse the API to facilitate log clearing operations as part of a broader attack strategy to cover their tracks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1499.004",
            "attack_object_name": "Application or System Exploitation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by the Application or System Exploitation technique. Adversaries may exploit vulnerabilities within the REST API to cause it to crash or become unavailable, leading to a denial of service condition. This directly impacts the REST API as it is the primary victim of the exploitation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1098.003",
            "attack_object_name": "Additional Cloud Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Additional Cloud Roles' if they are used to interact with cloud services for role or permission modifications. An adversary could leverage REST API calls to execute actions such as updating IAM policies or attaching new roles, thus using the API as a tool to further their attack on cloud account configurations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.008",
            "attack_object_name": "Stripped Payloads",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Stripped Payloads' technique, they can be abused to deliver or interact with stripped payloads. For instance, adversaries might use REST APIs to transmit or execute stripped payloads, leveraging the API as a conduit for delivering obfuscated or difficult-to-analyze malware to other systems or services."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1119",
            "attack_object_name": "Automated Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Automated Collection technique to facilitate the collection of data. Adversaries may leverage REST APIs to programmatically access and extract data from services or applications, using them as a tool to automate the data collection process."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by botnets as part of their operations. For example, a botnet could use a REST API to perform large-scale automated tasks such as sending requests to overwhelm a service (DDoS) or to automate interactions with other services as part of a larger attack strategy. In this context, the REST API is used as a tool or stepping stone to further the botnet's malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1608.004",
            "attack_object_name": "Drive-by Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of a Drive-by Target attack if they are part of the infrastructure serving malicious content. For example, if a REST API is compromised, it could be used to serve malicious scripts or data to a website, which is then used in a drive-by attack to exploit users visiting that site."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1040",
            "attack_object_name": "Network Sniffing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by network sniffing attacks when sensitive data, such as authentication credentials or API keys, are transmitted over the network without proper encryption. If the API communications are not secured with protocols like HTTPS, adversaries can capture this data in transit, compromising the confidentiality and integrity of the API interactions."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1530",
            "attack_object_name": "Data from Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries to access data from cloud storage. APIs are often used to interact with cloud storage services, and if not properly secured, they can be leveraged by attackers to retrieve sensitive data. This makes REST APIs a potential tool for adversaries to execute the 'Data from Cloud Storage' technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1565.003",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The REST API can be directly targeted by the Runtime Data Manipulation technique. Adversaries may manipulate the data being processed or displayed by the API, affecting the integrity of the data and potentially impacting business processes or decision making. This can be achieved by altering the API's runtime environment or the data it handles, making the API a direct victim of this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1590.004",
            "attack_object_name": "Network Topology",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of the Network Topology technique, they can be abused as a source of information about the network. Adversaries might leverage REST APIs to gather information about the network topology, such as endpoints, services, and configurations, which can then be used to plan further attacks or reconnaissance activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1082",
            "attack_object_name": "System Information Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the System Information Discovery technique to gather information about the underlying infrastructure, such as cloud instances or virtual machines. APIs provided by cloud service providers can be queried to obtain system information, which can aid adversaries in shaping their attack strategies. Therefore, while REST APIs are not the direct target, they can be leveraged as a tool to access system information."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1071",
            "attack_object_name": "Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Application Layer Protocol technique (T1071) as adversaries may use the API communication channels to send commands or exfiltrate data while blending in with normal API traffic. This abuse leverages the REST API as a tool for stealthy communication, making it difficult to detect malicious activities amidst legitimate API requests and responses."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1074.002",
            "attack_object_name": "Remote Data Staging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Remote Data Staging technique (T1074.002) in scenarios where they are used to facilitate the transfer or staging of data. An adversary might leverage a REST API to move or store data in preparation for exfiltration, using the API as a tool to interact with the data staging environment. This misuse aligns with the technique's goal of minimizing detection by staging data before exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1098.006",
            "attack_object_name": "Additional Container Cluster Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Additional Container Cluster Roles' if they are used to interact with container orchestration systems. An adversary could exploit a REST API to modify role bindings or permissions if the API provides access to such functionalities in a container orchestration environment. This misuse would involve leveraging the API as a tool to gain or escalate privileges within the container orchestration system."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1590.003",
            "attack_object_name": "Network Trust Dependencies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Network Trust Dependencies' by adversaries who gather information about network trust relationships. If a REST API is part of a network trust relationship, adversaries might leverage it to gain insights into the network's structure and trust dependencies, potentially using it as a stepping stone for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1498.002",
            "attack_object_name": "Reflection Amplification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can potentially be abused in a Reflection Amplification attack if they are misconfigured or lack proper security controls. If a REST API is exposed to the internet and can be manipulated to generate larger response traffic, it could be used as a reflector to amplify attack traffic towards a victim. However, this is not a common use case for REST APIs as they are not typically designed to produce significantly larger responses than requests."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1499.002",
            "attack_object_name": "Service Exhaustion Flood",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Service Exhaustion Flood technique directly targets REST APIs by overwhelming them with a large number of HTTP requests. This can exhaust the resources required by the REST API to provide its service, leading to a denial of service. As REST APIs are often exposed over the web, they are susceptible to such volumetric attacks that aim to compromise their availability."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1070.007",
            "attack_object_name": "Clear Network Connection History and Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While a REST API is not directly targeted by the technique 'Clear Network Connection History and Configurations', it can be abused in the context of this technique. Adversaries may interact with a REST API to modify or delete network configurations or logs stored by the application hosting the API. This can be part of a broader strategy to conceal malicious activities, especially if the REST API interfaces with systems that log network connections."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1600.001",
            "attack_object_name": "Reduce Key Space",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Reduce Key Space' technique, they can be abused if an adversary has already compromised a network device that the API communicates with. By reducing the encryption strength on the network device, adversaries can intercept and decrypt data transmitted between the REST API and its clients, thereby abusing the API as a means to access sensitive information."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1202",
            "attack_object_name": "Indirect Command Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by 'Indirect Command Execution', they can be abused as a means to execute commands indirectly. For instance, if a REST API endpoint allows command execution on the server, adversaries might exploit this functionality to execute commands indirectly, bypassing direct command-line restrictions."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1024",
            "attack_object_name": "Custom Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused by adversaries using Custom Cryptographic Protocols to hide malicious activities or data exfiltration within legitimate API traffic. By embedding encrypted data within API requests or responses, attackers can leverage the API as a conduit for concealed communication, thus misusing the API for malicious purposes."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1536",
            "attack_object_name": "Revert Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Revert Cloud Instance' technique when they are used to interact with cloud management services. An adversary might leverage REST APIs to programmatically revert cloud instances to a previous state, thus using the API as a tool to facilitate the attack on cloud infrastructure."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Data from Local System' technique, they can be abused if an adversary gains access to the local system where the API server is hosted. The adversary could potentially use the API to access or exfiltrate data from the local system, leveraging the API as a tool to facilitate data gathering or exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Deobfuscate/Decode Files or Information' if they are used to transmit or process obfuscated or encoded data. An adversary might leverage a REST API to facilitate the deobfuscation or decoding process as part of a larger attack, using the API as a tool to handle or transform data that is part of a malicious payload."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562",
            "attack_object_name": "Impair Defenses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Impair Defenses' technique if they are used to interact with or configure security settings within an application or system. For example, if a REST API provides endpoints that allow modification of security configurations or logging settings, an adversary could abuse these endpoints to impair defenses. This abuse would involve leveraging the API to disable or alter security mechanisms, thereby facilitating further malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1586.003",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Cloud Accounts' technique, they can be abused as part of the broader attack strategy. Compromised cloud accounts might provide adversaries with access to REST APIs hosted in the cloud, which can then be used to facilitate further malicious activities, such as data exfiltration or lateral movement within a cloud environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1608.001",
            "attack_object_name": "Upload Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Upload Malware' technique when adversaries use them to upload malicious payloads to a server. The API itself is not the direct victim but is leveraged as a tool to facilitate the upload and distribution of malware, potentially leading to further attacks on other systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by supply chain compromises if the API code or its dependencies are manipulated during the development or distribution process. This could lead to the introduction of vulnerabilities or malicious code that compromises the API and its data handling capabilities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1190",
            "attack_object_name": "Exploit Public-Facing Application",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Exploit Public-Facing Application' directly targets REST APIs as they are often exposed to the internet and can have vulnerabilities that adversaries exploit to gain unauthorized access. REST APIs are susceptible to various attacks such as injection attacks, misconfigurations, and exploitation of software bugs, making them primary targets for this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1555",
            "attack_object_name": "Credentials from Password Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the technique 'Credentials from Password Stores', they can be abused if credentials obtained through this technique are used to access or interact with the API. Once adversaries have credentials, they can misuse the API to perform unauthorized actions, access sensitive data, or further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1567",
            "attack_object_name": "Exfiltration Over Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Exfiltration Over Web Service' technique as they provide a legitimate channel through which adversaries can exfiltrate data. Since REST APIs are often used for communication with web services, they can be leveraged to hide malicious data transfers within normal API traffic."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1219",
            "attack_object_name": "Remote Access Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the primary target of the 'Remote Access Software' technique, they can be abused as part of an attack chain. For example, adversaries might use remote access software to control systems that interact with REST APIs, potentially leveraging these APIs to further their attack objectives, such as data exfiltration or lateral movement within a network."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583.001",
            "attack_object_name": "Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the 'Domains' technique. Malicious domains can be used to host REST APIs that serve malicious content or to impersonate legitimate REST API endpoints for phishing or data exfiltration purposes. This abuse leverages the REST API as a tool to further the attack, rather than directly targeting it."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1560.002",
            "attack_object_name": "Archive via Library",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Archive via Library' technique, they can be abused in the context of this technique. An attacker could use a REST API to facilitate the transfer of data that has been archived using this technique, leveraging the API as a conduit for exfiltrating compressed or encrypted data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1079",
            "attack_object_name": "Multilayer Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Multilayer Encryption technique (T1079) as a means to facilitate encrypted communication channels. An adversary could use a REST API to tunnel encrypted data, leveraging the API's communication capabilities to obscure malicious traffic within legitimate API requests and responses."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could potentially be abused in the context of a Masquerading attack if an adversary manipulates API requests or responses to appear legitimate, thereby evading detection. For example, an attacker might alter the metadata or naming conventions of API endpoints or responses to disguise malicious activity as benign, using the API as a tool to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by attackers seeking unsecured credentials. If credentials are stored insecurely within the API's configuration files or code, adversaries can exploit this vulnerability to gain unauthorized access to the API or its resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1070.008",
            "attack_object_name": "Clear Mailbox Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused as part of the 'Clear Mailbox Data' technique if they provide interfaces to interact with email systems or manage email data. Adversaries might leverage REST APIs to execute commands or scripts that clear mailbox data, using the API as a tool to facilitate the attack on email systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by content injection attacks where adversaries inject malicious content into the API's communication channels. This can compromise the API by altering the data being transmitted or received, potentially leading to unauthorized access or data manipulation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in content injection attacks by using them as conduits to deliver malicious payloads or manipulate data in transit. This abuse can facilitate further attacks on other systems by leveraging the API's communication channels to distribute malicious content."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1567.004",
            "attack_object_name": "Exfiltration Over Webhook",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Exfiltration Over Webhook' technique as they can be used to set up webhook endpoints or interact with them. Adversaries can leverage REST APIs to automate the process of sending data to webhook endpoints, thereby misusing the API as a tool for data exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1205",
            "attack_object_name": "Traffic Signaling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of Traffic Signaling if an adversary uses the API to send crafted requests that mimic signaling traffic. For example, an API endpoint could be misused to send specific sequences or 'magic values' that trigger hidden functionalities or open ports on a server. This would involve leveraging the API as a tool to facilitate the signaling process, rather than directly attacking the API itself."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1032",
            "attack_object_name": "Standard Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the 'Standard Cryptographic Protocol' (T1032) to encrypt malicious traffic. This abuse allows adversaries to hide their command and control communications within legitimate API traffic, making it difficult to detect malicious activity. The REST API is not the direct target but serves as a conduit for encrypted communication."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1497.003",
            "attack_object_name": "Time Based Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused as part of a Time Based Evasion strategy by adversaries who use the API to delay execution or perform benign operations that serve as a cover for malicious activities. This could involve making repeated API calls to introduce delays or to overload analysis environments, thus using the REST API as a tool to further the evasion technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1029",
            "attack_object_name": "Scheduled Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Scheduled Transfer technique (T1029) as they may be used to facilitate the exfiltration of data. An adversary could leverage a REST API to schedule and automate the transfer of exfiltrated data at specific times, blending the malicious activity with normal API traffic patterns."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1572",
            "attack_object_name": "Protocol Tunneling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Protocol Tunneling technique as they often use standard HTTP/HTTPS protocols, which can be leveraged by adversaries to tunnel other protocols within HTTP/HTTPS traffic. This can help conceal malicious activities and bypass network filtering, making REST APIs a potential tool for protocol tunneling."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1599.001",
            "attack_object_name": "Network Address Translation Traversal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Network Address Translation Traversal technique, they can be indirectly affected if an adversary successfully modifies NAT configurations to gain unauthorized access to networks where REST APIs are hosted. This abuse allows adversaries to potentially reach and exploit REST APIs that were otherwise protected by network boundaries."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1608.002",
            "attack_object_name": "Upload Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the 'Upload Tool' technique if they are used as a means to upload tools to adversary-controlled infrastructure. For example, if a REST API is improperly secured, adversaries could exploit it to upload malicious tools to a server, which can then be used for further attacks. Thus, the REST API serves as a conduit for malicious activities, aligning with the concept of being abused by this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Use Alternate Authentication Material' technique when adversaries use stolen tokens or credentials to authenticate to the API. This allows them to perform unauthorized actions or access sensitive data through the API, leveraging it as a tool for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1011",
            "attack_object_name": "Exfiltration Over Other Network Medium",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a medium for data exfiltration. An adversary could leverage a REST API to send data over a different network medium, such as a cellular or Bluetooth connection, especially if the API is accessible through such mediums. This makes the REST API a tool or stepping stone in the exfiltration process rather than the direct target."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1589",
            "attack_object_name": "Gather Victim Identity Information",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be targeted by adversaries using the 'Gather Victim Identity Information' technique to extract identity-related data such as usernames, email addresses, and potentially sensitive information. This can occur if the API lacks proper access controls or input validation, allowing adversaries to exploit vulnerabilities and gather identity information."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.004",
            "attack_object_name": "Disable or Modify System Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs themselves are not the direct target of the technique 'Disable or Modify System Firewall', they can be indirectly affected. If a system firewall is disabled or modified, it could allow unauthorized access to REST APIs, facilitating further attacks such as data exfiltration or lateral movement through the API. Thus, REST APIs can be abused as part of a broader attack strategy enabled by this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1560",
            "attack_object_name": "Archive Collected Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Archive Collected Data' technique if they are used as a conduit for data exfiltration. An adversary could use a REST API to send compressed and/or encrypted data to an external server. In this scenario, the REST API is not the direct victim but is misused to facilitate the exfiltration of archived data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1185",
            "attack_object_name": "Browser Session Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by 'Browser Session Hijacking', they can be abused indirectly. If an adversary hijacks a browser session, they may gain unauthorized access to REST API endpoints that the user has access to, leveraging the session to perform actions or extract data through the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1021",
            "attack_object_name": "Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Remote Services technique, they can be abused as part of the attack chain. If an adversary gains access to a REST API using valid credentials, they could potentially use the API to perform actions that facilitate further attacks, such as exfiltrating data or manipulating resources, similar to how remote services are leveraged for lateral movement or remote code execution."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1556.007",
            "attack_object_name": "Hybrid Identity",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of the Hybrid Identity technique if they are used as part of the authentication or identity management process. For example, if a REST API is used to configure or manage identity synchronization settings or to register new authentication agents, an adversary could exploit this API to modify authentication processes or register malicious agents. Thus, while the REST API itself is not the primary target, it can be leveraged as a tool to facilitate the attack on hybrid identity systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1595.002",
            "attack_object_name": "Vulnerability Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Vulnerability Scanning directly targets REST APIs to identify weaknesses in their configuration, software versions, or exposed endpoints. The REST API is the primary victim as the scan seeks to find exploitable vulnerabilities that could be used to compromise the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.009",
            "attack_object_name": "Cloud API",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The REST API is directly targeted by the Cloud API technique as adversaries may exploit vulnerabilities in the API to execute malicious commands. REST APIs are often used in cloud environments, and if not properly secured, they can be compromised to gain unauthorized access or execute arbitrary commands."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.009",
            "attack_object_name": "Cloud API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The REST API can be abused by the Cloud API technique when adversaries leverage it as a tool to further their attack. For example, once access is gained, the REST API can be used to interact with other cloud services, perform lateral movements, or escalate privileges within the cloud environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1596",
            "attack_object_name": "Search Open Technical Databases",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Search Open Technical Databases' technique, information about REST APIs, such as endpoints, configurations, or vulnerabilities, may be discovered through open technical databases. This information can be abused by adversaries to plan further attacks on REST APIs, making them a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1610",
            "attack_object_name": "Deploy Container",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Deploy Container' technique. Adversaries may leverage REST APIs, such as Docker's create and start APIs, to deploy containers. This abuse allows adversaries to misuse the REST API as a tool to execute or manage containers, potentially leading to further malicious activities within the environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1145",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the T1145 technique if they are used to manage or store private keys. If an adversary gains access to a REST API that handles cryptographic keys, they could potentially exploit the API to retrieve these keys and use them for unauthorized authentication or decryption purposes."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1580",
            "attack_object_name": "Cloud Infrastructure Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs are leveraged by adversaries in the Cloud Infrastructure Discovery technique (T1580) as a means to access and enumerate cloud resources. Cloud providers offer APIs that can be used to discover infrastructure components, and adversaries may abuse these APIs to gather information about the cloud environment, making REST APIs a tool or stepping stone in this context."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1491",
            "attack_object_name": "Defacement",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by defacement attacks where adversaries modify the content served by the API. This could involve altering the data returned by the API to include offensive or misleading information, thereby compromising the integrity of the API's output and affecting the users who rely on it."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1535",
            "attack_object_name": "Unused/Unsupported Cloud Regions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Unused/Unsupported Cloud Regions' technique, they can be abused as part of cloud infrastructure management. If adversaries gain access to REST APIs that manage cloud resources, they could potentially create instances in unused regions to evade detection, thus abusing the REST API as a tool for furthering their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1557.003",
            "attack_object_name": "DHCP Spoofing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by DHCP Spoofing, they can be indirectly affected if adversaries use DHCP Spoofing to manipulate network traffic. This can lead to REST API communications being intercepted or redirected, potentially compromising data integrity and confidentiality."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1563",
            "attack_object_name": "Remote Service Session Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs themselves are not directly targeted by Remote Service Session Hijacking, they can be abused if an adversary hijacks a session that has access to the API. This can allow the adversary to misuse the API for unauthorized actions, leveraging the hijacked session as a stepping stone."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1505.003",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by Web Shells as they provide a means to interact with the web server. Once a Web Shell is established on a server hosting a REST API, the API can be leveraged to perform malicious activities, such as executing commands or exfiltrating data, using the API's functionality as a conduit for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1552.004",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using stolen private keys to authenticate and interact with the API. If an adversary gains access to private keys that are used for API authentication, they can impersonate legitimate users or services, thereby abusing the REST API to perform unauthorized actions or access sensitive data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique T1583.004 (Server) does not directly abuse REST APIs, adversaries could potentially use REST APIs hosted on their acquired servers to facilitate malicious activities such as command and control, data exfiltration, or other operations. In this context, REST APIs could be leveraged as part of the infrastructure set up by adversaries."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1078.001",
            "attack_object_name": "Default Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be targeted by attackers exploiting default accounts to gain unauthorized access. If a REST API is configured with default credentials that are not changed, adversaries can use these credentials to access the API and potentially compromise the application, leading to unauthorized data access or manipulation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1595",
            "attack_object_name": "Active Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by active scanning techniques as adversaries probe the API endpoints to gather information about the API structure, available resources, and potential vulnerabilities. This information can be used to identify weaknesses in the API that can be exploited for unauthorized access or data extraction."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1110.003",
            "attack_object_name": "Password Spraying",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be targeted by password spraying attacks if they are protected by authentication mechanisms that require username and password combinations. Adversaries may attempt to use common passwords across many accounts to gain unauthorized access to the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1090.002",
            "attack_object_name": "External Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the External Proxy technique (T1090.002) if they are used as intermediaries for redirecting network communications. An adversary could leverage a compromised REST API to route traffic through it, thereby masking the true destination of command and control communications. This misuse aligns with the concept of using external proxies to obfuscate network traffic paths."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1056.003",
            "attack_object_name": "Web Portal Capture",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Portal Capture technique can target REST APIs, especially those that serve as authentication portals or interfaces for web services. Attackers may exploit vulnerabilities in the API to install malicious code that captures user credentials during login attempts. This makes the REST API a direct victim of the attack, as the compromise occurs at the API level, affecting its integrity and security."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1589.002",
            "attack_object_name": "Email Addresses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of technique T1589.002 'Email Addresses' if they expose endpoints that allow enumeration of email addresses. Adversaries may leverage REST APIs to gather email addresses by querying publicly available API endpoints, which can then be used for further attacks such as phishing or brute force attempts."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1054",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be indirectly abused by the 'Indicator Blocking' technique if they are used to interact with systems that collect or report telemetry data. For example, if a REST API is used to configure or control a system that gathers telemetry, an adversary might exploit the API to alter settings and block indicators. However, the REST API itself is not the primary focus of the attack but rather a means to achieve the blocking of indicators."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1108",
            "attack_object_name": "Redundant Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Redundant Access' by adversaries who leverage them as a means to maintain persistent access to a network. For example, if a REST API is exposed to the internet, adversaries might use it as a channel to deploy web shells or other remote access tools, thereby maintaining access even if other access methods are detected and mitigated."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1098.004",
            "attack_object_name": "SSH Authorized Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused to modify SSH authorized_keys files in cloud environments. Adversaries may use REST API calls to update the authorized_keys file of a virtual machine, thereby gaining unauthorized access or escalating privileges. This makes the REST API a tool or vector for executing the SSH Authorized Keys technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1593.002",
            "attack_object_name": "Search Engines",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs may be indirectly affected by the 'Search Engines' technique if adversaries use search engines to discover exposed or misconfigured APIs. This can lead to further attacks where the REST API is abused as a tool for gathering sensitive information or as an entry point for more sophisticated attacks. However, the REST API is not the direct target of the search engine queries."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1548.005",
            "attack_object_name": "Temporary Elevated Cloud Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Temporary Elevated Cloud Access' if they are used to interact with cloud services and manage permissions. An adversary could exploit a REST API to request or manipulate temporary elevated permissions, thereby using the API as a tool to further their attack on cloud resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1016",
            "attack_object_name": "System Network Configuration Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the System Network Configuration Discovery technique to gather information about the network environment in which the API operates. By interacting with the API, adversaries may discover network-related information that can be used to shape further attacks, such as identifying network configurations or understanding the API's role within the network."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1578.003",
            "attack_object_name": "Delete Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a tool to execute the 'Delete Cloud Instance' technique. An adversary may leverage REST API endpoints that manage cloud resources to delete instances, especially if the API lacks proper authentication and authorization controls."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1593.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique T1593.003 'Code Repositories' can indirectly lead to the abuse of REST APIs. If adversaries find API keys or credentials in public code repositories, they can use these to access or manipulate REST APIs, leveraging the API as a tool to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1496.002",
            "attack_object_name": "Bandwidth Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in Bandwidth Hijacking scenarios if they are used to facilitate network-intensive operations, such as serving as a conduit for botnet traffic or proxyjacking activities. The API itself may not be the direct target, but it can be leveraged to misuse the underlying network resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1087",
            "attack_object_name": "Account Discovery",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries using the Account Discovery technique to enumerate user accounts or service accounts exposed by the API. This can occur if the API endpoints are misconfigured or lack proper access controls, allowing adversaries to retrieve account information."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1090",
            "attack_object_name": "Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Proxy' technique (T1090) as adversaries might use the API as a conduit to proxy network traffic. This can be part of a strategy to disguise the source of malicious traffic or to leverage the API's existing trusted communication paths to avoid detection while communicating with command and control servers."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Command and Scripting Interpreter technique (T1059) to execute malicious scripts or commands. For instance, if an API endpoint is vulnerable to injection attacks, an adversary could exploit this to run scripts or commands on the server hosting the API, using it as a stepping stone for further attacks. This misuse aligns with the abuse of command and scripting interpreters to execute arbitrary commands."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.006",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of Indicator Blocking, they could be abused as part of a broader strategy to evade detection. For example, an adversary could use a compromised REST API to alter configurations or settings related to telemetry and logging systems, thereby indirectly contributing to the Indicator Blocking technique. This would involve using the API as a tool to facilitate the blocking of indicators."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1136.002",
            "attack_object_name": "Domain Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Domain Account technique does not directly abuse REST APIs, it can indirectly affect them. If an adversary creates a domain account with sufficient privileges, they could potentially misuse the REST API by accessing it with elevated permissions. This could lead to unauthorized actions or data access through the API, leveraging the domain account as a stepping stone for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1589.003",
            "attack_object_name": "Employee Names",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of the 'Employee Names' technique, they can be abused in the sense that information gathered from REST APIs, if improperly secured, could include employee names. This information could then be used for further reconnaissance or social engineering attacks, leveraging the REST API as a means to gather such data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1020",
            "attack_object_name": "Automated Exfiltration",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by automated exfiltration techniques. Adversaries may exploit vulnerabilities in the API to automate the extraction of sensitive data. This can occur if the API lacks proper access controls or data validation, allowing attackers to programmatically gather and exfiltrate data using the API's endpoints."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1592.004",
            "attack_object_name": "Client Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Client Configurations' by adversaries who may leverage the API to gather information about client configurations. For example, APIs could be used to extract user agent strings or other configuration details that are exposed through API requests, thus using the API as a tool for reconnaissance."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.007",
            "attack_object_name": "Disable or Modify Cloud Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of the technique 'Disable or Modify Cloud Firewall', they can be abused as a result of this technique. By modifying cloud firewall rules, adversaries can potentially gain unauthorized access to REST APIs hosted in the cloud. This can lead to misuse of the REST API for malicious activities such as data exfiltration or lateral movement within the cloud environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1070",
            "attack_object_name": "Indicator Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Indicator Removal technique, they can be abused as part of this technique. An adversary could leverage a REST API to perform actions that result in the removal or modification of logs or other indicators of compromise. For example, if a REST API provides access to system management functions, it could be used to delete logs or alter configurations to hide malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1048.001",
            "attack_object_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the technique T1048.001 to exfiltrate data. The API can be leveraged as a channel to send data over a symmetrically encrypted protocol, thus misusing the API for malicious data exfiltration activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583.003",
            "attack_object_name": "Virtual Private Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Virtual Private Server' (T1583.003) does not directly abuse REST APIs, it can be indirectly related. Adversaries may use a VPS to host malicious services or proxies that interact with REST APIs as part of a broader attack strategy, such as sending malicious requests or exfiltrating data through the API. Thus, the VPS can serve as a platform to abuse REST APIs in furthering an attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1213.001",
            "attack_object_name": "Confluence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Confluence technique does not directly abuse REST APIs, it can indirectly involve REST APIs if the information gathered from Confluence repositories includes API documentation, credentials, or access details. This information can then be used to misuse or exploit REST APIs as part of a broader attack strategy."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1609",
            "attack_object_name": "Container Administration Command",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a means to interact with container administration services like the Kubernetes API server. If an adversary gains access to a REST API that interfaces with container management services, they can potentially execute commands within containers, leveraging the API as a stepping stone for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1083",
            "attack_object_name": "File and Directory Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the File and Directory Discovery technique, they can be abused to facilitate this technique. An adversary could use a compromised REST API to gather information about files and directories on the underlying server or network by making API calls that expose file system information, especially if the API has endpoints that interact with the file system and lack proper access controls."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1568",
            "attack_object_name": "Dynamic Resolution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Dynamic Resolution technique to facilitate command and control communications. While the REST API itself is not the direct target, it can be leveraged as a conduit for malicious activities, such as dynamically resolving domains or IPs for C2 communication, thereby aiding in evasion and persistence."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1020.001",
            "attack_object_name": "Traffic Duplication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by Traffic Duplication as part of a broader network traffic analysis or exfiltration strategy. Adversaries may use traffic mirroring to capture data being transmitted via REST APIs, leveraging the API as a conduit for data that can be mirrored and analyzed elsewhere."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1188",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Multi-hop Proxy technique (T1188) as part of a broader attack strategy. Adversaries may use REST APIs as part of their proxy chain to relay malicious traffic, leveraging the API's ability to handle HTTP requests and responses. This abuse does not compromise the REST API itself but uses it as a tool to obfuscate the source of the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1074",
            "attack_object_name": "Data Staged",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Data Staged' technique by being used as a conduit to transfer or stage data within a network. An adversary might leverage a REST API to move data to a centralized location before exfiltration, thus using the API as a tool for staging data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1649",
            "attack_object_name": "Steal or Forge Authentication Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have stolen or forged authentication certificates. These certificates can be used to authenticate against REST APIs, allowing unauthorized access or actions, thereby abusing the API as a tool to further an attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1098.005",
            "attack_object_name": "Device Registration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Device Registration technique, they can be abused as part of the process. REST APIs may be used to interact with device management or authentication systems (like MFA systems) to register devices. An adversary could exploit vulnerabilities in these APIs to facilitate unauthorized device registration, thereby misusing the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1049",
            "attack_object_name": "System Network Connections Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the System Network Connections Discovery technique, they can be abused as part of the discovery process. An adversary could leverage a REST API to gather information about network connections or configurations if the API provides such data, making it a tool to further the discovery of network connections."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584",
            "attack_object_name": "Compromise Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Compromise Infrastructure' technique if they are hosted on compromised infrastructure. Adversaries may use compromised REST APIs to blend malicious traffic with legitimate API requests, making it difficult to detect malicious activities. Additionally, compromised REST APIs could be used to stage or launch further attacks, leveraging the API's functionality to interact with other systems or data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1064",
            "attack_object_name": "Scripting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Scripting technique can be used to abuse REST APIs by automating interactions with the API for malicious purposes. For example, scripts can be used to automate brute force attacks on authentication endpoints, scrape data, or perform automated exploitation of known vulnerabilities in the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1612",
            "attack_object_name": "Build Image on Host",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused as part of the 'Build Image on Host' technique if they are used to interact with container orchestration or management systems. An adversary might exploit vulnerabilities in REST APIs to send unauthorized build requests to container management systems, leveraging the API as a tool to execute the attack on the container environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1586",
            "attack_object_name": "Compromise Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have compromised accounts. Once an account is compromised, the adversary can use the API to perform unauthorized actions, access sensitive data, or further their attack objectives. The REST API serves as a tool through which the compromised account can be leveraged to execute malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted to form a botnet, they can be abused by botnets for malicious activities. For example, a botnet could use REST APIs to perform large-scale automated tasks such as sending phishing messages or executing Distributed Denial of Service (DDoS) attacks. In this context, the REST API acts as a tool or conduit for the botnet's operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.010",
            "attack_object_name": "Downgrade Attack",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by downgrade attacks, particularly in scenarios where the API supports multiple protocol versions or encryption standards. An adversary might force the API to use a less secure version of a protocol, such as downgrading from HTTPS to HTTP, thereby exposing sensitive data in transit to potential interception and manipulation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1102",
            "attack_object_name": "Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The T1102 Web Service technique can abuse REST APIs by leveraging them as a tool for command and control (C2) communication. REST APIs can be used to relay data to/from a compromised system, providing adversaries with a means to hide malicious activities within legitimate web service traffic."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be targeted by the 'Credentials In Files' technique when adversaries search for configuration files or source code that may contain hardcoded credentials or insecurely stored credentials. These credentials can be exploited to gain unauthorized access to the API or the underlying systems it interacts with."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1568.003",
            "attack_object_name": "DNS Calculation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the DNS Calculation technique, they can be abused in scenarios where an adversary uses DNS manipulation to redirect API traffic or to establish a command and control channel through a compromised API endpoint. This abuse can facilitate further attacks or data exfiltration by leveraging the API as a conduit for malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1608",
            "attack_object_name": "Stage Capabilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Stage Capabilities' technique by being used as a platform to host or stage malicious capabilities. Adversaries may leverage REST APIs to upload or manage malicious tools and resources that are intended for use in subsequent stages of an attack, such as initial access or post-compromise activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1608.005",
            "attack_object_name": "Link Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Link Target' technique if they are used to host or serve malicious content that is referenced by a link. For example, an adversary could use a REST API to dynamically generate or serve malicious pages that are linked to in phishing campaigns, leveraging the API as a tool to facilitate the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1104",
            "attack_object_name": "Multi-Stage Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the Multi-Stage Channels technique by serving as communication endpoints for different stages of command and control. Adversaries may leverage REST APIs to facilitate communication between different stages, using them to transmit commands or data between compromised systems and command and control servers. This misuse of REST APIs can aid in obfuscating the command and control channels, making detection more challenging."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1657",
            "attack_object_name": "Financial Theft",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries seeking financial theft through vulnerabilities such as injection attacks or weak authentication mechanisms. These vulnerabilities can be exploited to gain unauthorized access to financial data or to manipulate transactions, leading to direct monetary loss."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1657",
            "attack_object_name": "Financial Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of a larger attack strategy for financial theft. For example, an attacker might use a compromised REST API to facilitate unauthorized transactions or to exfiltrate sensitive financial data, leveraging the API as a tool to achieve their financial theft objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1480",
            "attack_object_name": "Execution Guardrails",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Execution Guardrails technique as adversaries may use conditions specific to the API environment to control the execution of malicious actions. For example, adversaries might configure guardrails to ensure that their payloads only execute when interacting with a specific REST API endpoint or when certain API conditions are met, thus using the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1619",
            "attack_object_name": "Cloud Storage Object Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries to enumerate cloud storage objects if the API provides access to cloud storage services. APIs that expose endpoints for listing or accessing cloud storage objects can be leveraged by attackers to perform discovery operations, making the REST API a tool in the attack process."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1606.001",
            "attack_object_name": "Web Cookies",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The REST API can be directly targeted by the Web Cookies technique because adversaries may forge web cookies to gain unauthorized access to the REST API. This technique exploits vulnerabilities in the authentication mechanisms of the API, potentially allowing attackers to bypass security controls and access protected resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1654",
            "attack_object_name": "Log Enumeration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs may be abused in the context of Log Enumeration if they are used to access or expose logging data. For example, if a REST API provides endpoints that allow access to system or application logs, adversaries could exploit these endpoints to enumerate logs and gather valuable information about the environment. This makes the REST API a tool or stepping stone in the execution of the Log Enumeration technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1134.001",
            "attack_object_name": "Token Impersonation/Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Token Impersonation/Theft technique, they can be abused in scenarios where an adversary has already obtained a token through impersonation and uses it to interact with the API. This can lead to unauthorized access to API resources, allowing the adversary to perform actions with elevated privileges or access sensitive data. Thus, the REST API can be misused as a tool to further an attack once token impersonation has been achieved."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1567.001",
            "attack_object_name": "Exfiltration to Code Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries to exfiltrate data to code repositories. The APIs provide a means for adversaries to interact with code repositories over HTTPS, which can be leveraged to exfiltrate data while avoiding detection. Thus, REST APIs serve as a tool or conduit in this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1021.007",
            "attack_object_name": "Cloud Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Cloud Services' technique (T1021.007) as they may serve as an interface for adversaries to interact with cloud services. By leveraging valid credentials, adversaries can use REST APIs to perform unauthorized actions on cloud resources, making the API a tool or stepping stone in the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1205.001",
            "attack_object_name": "Port Knocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by Port Knocking, they could be indirectly involved if an adversary uses port knocking to open a port on a server that hosts the REST API. This could allow the adversary to establish a covert channel for communication or control, potentially abusing the server environment where the REST API is hosted."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1583.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Web Services technique (T1583.006) as they might leverage these APIs to facilitate command and control, exfiltration, or other malicious activities. The REST API itself is not the direct victim but can be misused to interact with web services that adversaries have registered for."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1528",
            "attack_object_name": "Steal Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The REST API can be directly targeted by adversaries seeking to steal application access tokens. These tokens are often used to authenticate API requests and access resources, making them a primary target for attackers who wish to gain unauthorized access to the API and its associated data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1528",
            "attack_object_name": "Steal Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The REST API can be abused by adversaries who have already obtained application access tokens. Once in possession of these tokens, attackers can misuse the API to perform unauthorized actions, access sensitive data, or escalate privileges within the environment, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1098.001",
            "attack_object_name": "Additional Cloud Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Additional Cloud Credentials' technique as they may be used to interact with cloud services to add or manage credentials. Adversaries can exploit REST APIs to programmatically add credentials, thereby misusing the API as a tool to further their attack on cloud environments."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1491.001",
            "attack_object_name": "Internal Defacement",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct targets of 'Internal Defacement,' they can be abused as part of an attack chain. An adversary could exploit vulnerabilities in a REST API to gain unauthorized access to internal systems, which could then be defaced. The REST API serves as a conduit or tool to facilitate the attack on other assets."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1134.003",
            "attack_object_name": "Make and Impersonate Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Make and Impersonate Token' technique, they can be abused if an adversary uses impersonated tokens to interact with the API. This could allow unauthorized access to API resources or actions, leveraging the API as a tool to further an attack, such as accessing sensitive data or performing unauthorized operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1048.002",
            "attack_object_name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using technique T1048.002 to exfiltrate data. Since REST APIs often handle sensitive data and may use encrypted protocols like HTTPS, they can be leveraged as a conduit for exfiltrating data over an encrypted channel. The REST API itself is not compromised, but rather misused to facilitate data exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1087.004",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of the 'Cloud Account' technique if they are used to interact with cloud services. An adversary with access to a REST API that interfaces with cloud services could potentially misuse it to enumerate cloud accounts, especially if the API lacks proper access controls and authentication mechanisms."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1496.004",
            "attack_object_name": "Cloud Service Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Cloud Service Hijacking as they often serve as interfaces to cloud services. Adversaries may exploit REST APIs to interact with cloud services and perform unauthorized actions, such as enabling services or sending large quantities of data. This misuse aligns with the technique's goal of leveraging cloud services for malicious purposes, thereby indirectly abusing REST APIs as a means to execute the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1072",
            "attack_object_name": "Software Deployment Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused as part of the 'Software Deployment Tools' technique if they are integrated into software deployment or configuration management systems. Adversaries could potentially leverage REST APIs to interact with these systems, executing commands or deploying software across the network. However, the REST API itself is not the primary target but rather a tool that can be misused within the context of software deployment operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1041",
            "attack_object_name": "Exfiltration Over C2 Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Exfiltration Over C2 Channel' if they are used as a conduit for data exfiltration. Adversaries may leverage REST APIs to send exfiltrated data over an existing command and control channel, especially if the API is improperly secured or monitored, making it a tool in the exfiltration process."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1591",
            "attack_object_name": "Gather Victim Org Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a source of organizational information if they expose sensitive data or metadata about the organization. Adversaries may leverage publicly accessible REST APIs to gather details about the organization, such as endpoints, resources, or data structures, which can aid in further reconnaissance activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1606",
            "attack_object_name": "Forge Web Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Forge Web Credentials technique as they often rely on tokens or session cookies for authentication. Adversaries can use forged credentials to interact with REST APIs, thereby misusing the API to access or manipulate resources without proper authorization. This misuse aligns with the concept of abusing the asset type to further an attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1621",
            "attack_object_name": "Multi-Factor Authentication Request Generation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of this technique if they are used to facilitate the generation of MFA requests. For example, if a REST API is involved in the authentication process or in managing MFA settings, adversaries may exploit it to trigger excessive MFA requests, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1552.008",
            "attack_object_name": "Chat Messages",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of the 'Chat Messages' technique, they can be abused if credentials collected from chat messages include API keys or authentication tokens. These credentials can be used to interact with REST APIs, potentially leading to unauthorized access or actions within the API's scope."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by PowerShell, they can be abused in scenarios where an adversary uses PowerShell to interact with or manipulate the API. For example, an attacker could use PowerShell scripts to automate API requests to exfiltrate data, perform unauthorized actions, or exploit vulnerabilities within the API. This makes the REST API a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1026",
            "attack_object_name": "Multiband Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could potentially be abused in a multiband communication scenario if they are used as part of the communication channels. For example, an attacker might use a REST API to send or receive data as part of a broader strategy to split communications across multiple protocols to evade detection. However, this would be an indirect use of the REST API as a tool rather than a direct attack on the API itself."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1071.002",
            "attack_object_name": "File Transfer Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the T1071.002 technique by embedding malicious commands or data within API requests or responses. This can allow adversaries to blend malicious traffic with legitimate API traffic, potentially using the API as a conduit for data exfiltration or command and control communication, mimicking normal, expected traffic patterns."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries seeking to exploit vulnerabilities in the API's authentication mechanisms or other software vulnerabilities to gain unauthorized access to credentials. This can include exploiting flaws in how the API handles authentication tokens or credentials, potentially leading to unauthorized access or privilege escalation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1102.003",
            "attack_object_name": "One-Way Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the One-Way Communication technique as they may be used as a channel for sending commands to compromised systems. Adversaries can leverage REST APIs to facilitate covert communication, taking advantage of their legitimate use and encryption to blend in with normal traffic."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1590",
            "attack_object_name": "Gather Victim Network Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Gather Victim Network Information' by adversaries who exploit publicly accessible API endpoints to gather network-related data. This could include information about IP ranges, domain names, or other network details that the API might expose, intentionally or unintentionally, which can be leveraged for further reconnaissance."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Exploitation of Remote Services technique (T1210) targets REST APIs as they are remote services that can be exploited by adversaries to gain unauthorized access. REST APIs, being web services, are susceptible to exploitation if they contain vulnerabilities such as improper input validation, weak authentication mechanisms, or unpatched software. These vulnerabilities can be leveraged by attackers to execute malicious code or gain unauthorized access to the API and its resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Exploitation of Remote Services technique (T1210) as a means to facilitate further attacks. Once an adversary gains access to a REST API, they can use it to perform lateral movement within a network, access sensitive data, or leverage the API to interact with other systems and services. This abuse can enable attackers to maintain persistence, escalate privileges, or evade detection by using the API as a conduit for malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1534",
            "attack_object_name": "Internal Spearphishing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Internal Spearphishing technique, they can be abused as part of the attack chain. For instance, compromised credentials obtained through spearphishing could be used to access REST APIs, thereby misusing the API to extract data or perform unauthorized actions within the application environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1199",
            "attack_object_name": "Trusted Relationship",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the Trusted Relationship technique if they are part of the infrastructure that a third-party provider has access to. An adversary could exploit a trusted relationship to misuse the REST API as a tool to further their attack, such as by accessing sensitive data or performing unauthorized actions through the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1136.003",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Cloud Account' technique does not directly target REST APIs, it can abuse them indirectly. REST APIs may be used as a tool to interact with cloud services, including the creation and management of cloud accounts. Adversaries could leverage REST APIs to automate the creation of cloud accounts or manage permissions, thereby using the API as a stepping stone to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1593",
            "attack_object_name": "Search Open Websites/Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique 'Search Open Websites/Domains' does not directly abuse REST APIs, it can indirectly involve REST APIs if they are publicly exposed and contain information that can be used for reconnaissance. Adversaries may search for REST API endpoints or documentation that is publicly available to gather information about the API's structure, functionality, or potential vulnerabilities, which can then be used to plan further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1098",
            "attack_object_name": "Account Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Account Manipulation if they expose endpoints that allow for account creation, modification, or deletion. An adversary with access to such APIs could manipulate accounts to maintain or escalate privileges, especially if the API lacks proper authentication and authorization controls."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1048",
            "attack_object_name": "Exfiltration Over Alternative Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Exfiltration Over Alternative Protocol' technique as they provide a means to transfer data over HTTP/S, which is an alternative protocol. Adversaries may leverage REST APIs to exfiltrate data by sending it to an alternate network location, exploiting the API's ability to handle data transfers."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1588.002",
            "attack_object_name": "Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique T1588.002 (Tool) is primarily about acquiring tools, these tools can be used to abuse REST APIs. For example, tools obtained through this technique could be used to perform attacks on REST APIs, such as exploiting vulnerabilities or conducting unauthorized operations, making the REST API a means to further an attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1566",
            "attack_object_name": "Phishing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by phishing, they can be abused indirectly. For instance, if phishing is successful in compromising user credentials or gaining unauthorized access to systems, adversaries could use these credentials to interact with REST APIs maliciously, exploiting them to extract data or perform unauthorized actions."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1496.001",
            "attack_object_name": "Compute Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Compute Hijacking, particularly when they are exposed and unsecured. Adversaries may exploit vulnerabilities in REST APIs to deploy or manage containerized environments, which can then be used for compute hijacking activities such as cryptocurrency mining. This abuse leverages the REST API as a means to access and control the underlying compute resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1090.003",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the Multi-hop Proxy technique by being used as an intermediary or proxy in a chain of proxies. Adversaries might exploit REST APIs to relay malicious traffic, thereby contributing to the obfuscation of the original source of the attack. This misuse aligns with the concept of leveraging assets as tools or stepping stones in an attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by brute force attacks as adversaries attempt to gain unauthorized access to accounts managed by the API. This involves systematically guessing passwords for accounts that interact with the API, potentially compromising the API's security and gaining unauthorized access to its resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.004",
            "attack_object_name": "Unix Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Unix Shell technique if the API has vulnerabilities that allow command injection. For example, if a REST API endpoint improperly handles input and allows shell command execution, an attacker could exploit this to run Unix shell commands on the server hosting the API, thereby abusing the API as a means to execute further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.001",
            "attack_object_name": "Disable or Modify Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of the 'Disable or Modify Tools' technique, they can be abused in scenarios where adversaries leverage APIs to interact with or disable security tools. For example, if a REST API is used to manage or configure security tools, adversaries might abuse it to modify settings or disable functionalities, thus furthering their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1565",
            "attack_object_name": "Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs are directly targeted by the Data Manipulation technique as adversaries can manipulate the data being processed or stored by the API. This can compromise the integrity of the data, leading to potential business process disruption or incorrect decision-making based on altered data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1559",
            "attack_object_name": "Inter-Process Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by IPC techniques, they can be abused in scenarios where an adversary uses the API to facilitate communication between processes or systems. For instance, an attacker might exploit a REST API to send commands or data that trigger IPC mechanisms on a server or within an application, thereby indirectly leveraging IPC for malicious purposes."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1001",
            "attack_object_name": "Data Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using Data Obfuscation techniques to disguise malicious traffic or commands within legitimate API requests. This makes it difficult to detect malicious activities, as the obfuscation can hide the true intent of the API interactions, allowing adversaries to misuse the API for command and control purposes."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the T1584.006 'Web Services' technique. Adversaries may leverage REST APIs provided by third-party web services to facilitate their operations, such as using APIs for Command and Control, data exfiltration, or phishing. The REST API itself is not the direct target but is used as a tool to further the adversary's objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1574",
            "attack_object_name": "Hijack Execution Flow",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Hijack Execution Flow technique, they can be abused in scenarios where an adversary uses the API to deliver or execute malicious payloads indirectly. For example, if a REST API is used to interact with backend systems or services, an attacker could exploit vulnerabilities in the API to inject malicious code or commands that hijack execution flow in those systems, thereby abusing the API as a conduit for attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.011",
            "attack_object_name": "Lua",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Lua execution technique can be used to abuse REST APIs if the API allows for Lua script execution or if the API interacts with systems that can execute Lua scripts. In such cases, adversaries may leverage Lua scripts to execute malicious code or perform unauthorized actions through the API, using it as a tool or stepping stone in their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1543.005",
            "attack_object_name": "Container Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of the Container Service technique if they are used to interact with container management tools. For example, if a REST API is used to manage container deployments or configurations, it could be leveraged by adversaries to modify container services, thus abusing the API as a tool to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries using the Valid Accounts technique. Attackers may obtain and use valid credentials to access the API, bypassing authentication mechanisms. This can lead to unauthorized access to the API's resources, data theft, or manipulation of the API's operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have obtained valid credentials. Once authenticated, attackers can leverage the API to perform further malicious activities, such as lateral movement within a network, data exfiltration, or executing unauthorized actions, all while appearing as legitimate users."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1571",
            "attack_object_name": "Non-Standard Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Non-Standard Port technique to obfuscate their communication with the API. By using non-standard ports, attackers can bypass network security measures that are configured to monitor or block traffic on standard ports, thus leveraging the REST API as a tool to further their attack without directly compromising it."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of a broader attack strategy where an adversary might exploit a vulnerability within the API to gain unauthorized access or execute code. Once access is gained, the adversary could use the API to perform actions that aid in privilege escalation, such as accessing sensitive data or executing further commands that exploit other vulnerabilities in the system."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1531",
            "attack_object_name": "Account Access Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by 'Account Access Removal', they can be abused in scenarios where adversaries manipulate account access to disrupt API functionality. For instance, if API access relies on specific user accounts, removing or locking these accounts could indirectly affect the availability and functionality of the REST API, thus abusing the API as a means to further the attack's impact."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1110.004",
            "attack_object_name": "Credential Stuffing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by credential stuffing attacks as adversaries attempt to gain unauthorized access to the API by using stolen or leaked credentials. This is particularly relevant for REST APIs that require authentication and are exposed to the internet, making them susceptible to such attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Obfuscated Files or Information' technique as adversaries may use obfuscation to hide malicious payloads or commands transmitted via the API. This can be part of an evasion strategy to bypass detection mechanisms when interacting with the API, making it a tool for furthering an attack rather than the direct target."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1556.006",
            "attack_object_name": "Multi-Factor Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of technique T1556.006 if they are used to interact with or manage multi-factor authentication settings. An adversary could exploit a REST API to modify or disable MFA configurations, thereby leveraging the API as a tool to facilitate the attack on authentication mechanisms. This misuse aligns with the technique's goal of bypassing or altering MFA defenses."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1114.002",
            "attack_object_name": "Remote Email Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the primary target of the Remote Email Collection technique, they can be abused as part of the attack chain. For instance, if an adversary gains access to a REST API that interfaces with an email service, they could potentially misuse the API to facilitate unauthorized access to email data. This makes REST APIs a potential tool for furthering the attack on email systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1505.004",
            "attack_object_name": "IIS Components",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be hosted on IIS web servers, and if the server is compromised using the T1505.004 technique, the REST API could be abused as part of the attack. Malicious IIS components could observe or modify API traffic, execute commands, or proxy command and control traffic, thereby abusing the REST API as a means to further the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.014",
            "attack_object_name": "Polymorphic Code",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by polymorphic code, they can be abused as a delivery mechanism for polymorphic malware. An attacker could use a REST API to distribute or execute polymorphic code, leveraging the API's functionality to evade detection and further an attack on other systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1201",
            "attack_object_name": "Password Policy Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries to discover password policies in cloud environments. For example, adversaries may use available APIs such as 'GetAccountPasswordPolicy' in AWS to gather information about password policies. This makes REST APIs a tool or stepping stone for further attacks, such as crafting password lists for brute force attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1546",
            "attack_object_name": "Event Triggered Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs themselves are not directly targeted by the 'Event Triggered Execution' technique, they can be abused as part of a broader attack strategy. For instance, if an adversary gains access to a system through a REST API vulnerability, they could potentially set up event triggers within the system to maintain persistence or escalate privileges. Thus, REST APIs can be leveraged as a stepping stone in the execution of this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1599",
            "attack_object_name": "Network Boundary Bridging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Network Boundary Bridging technique, they can be abused in scenarios where an adversary has already bypassed network boundaries. Once inside a network, adversaries may leverage REST APIs to interact with internal services, exfiltrate data, or perform lateral movement, using the API as a tool to further their attack objectives within the compromised network environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1486",
            "attack_object_name": "Data Encrypted for Impact",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by the 'Data Encrypted for Impact' technique. If an adversary gains access to the server hosting the REST API or the underlying data storage, they can encrypt the data that the API interacts with, rendering it inaccessible and disrupting the availability of the API services. This can be particularly impactful if the API is critical for business operations, as it can lead to significant downtime and potentially require ransom payments to restore access."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Subvert Trust Controls' if an adversary uses a compromised or fraudulent certificate to interact with the API. This could allow an attacker to bypass trust checks, potentially leading to unauthorized access or manipulation of API resources. Thus, while the API is not directly targeted, it can be abused as part of a broader strategy to subvert trust controls."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1573",
            "attack_object_name": "Encrypted Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Encrypted Channel technique (T1573) as they may be used to facilitate encrypted command and control communications. While the REST API itself is not the target, it can be leveraged to transmit encrypted data, thereby aiding in the concealment of malicious traffic."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1002",
            "attack_object_name": "Data Compressed",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "A REST API could be abused in the context of the 'Data Compressed' technique if an attacker uses the API to facilitate the compression and subsequent exfiltration of data. For example, if a REST API is used to access or retrieve data, an attacker might compress this data before exfiltration to minimize network usage or evade detection."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1567.003",
            "attack_object_name": "Exfiltration to Text Storage Sites",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of this technique if they are used to facilitate the exfiltration of data to text storage sites. An adversary might exploit a REST API to send data to such sites, leveraging the API as a conduit for data exfiltration rather than targeting it directly."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1081",
            "attack_object_name": "Credentials in Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be targeted by the 'Credentials in Files' technique if sensitive information, such as API keys or user credentials, is stored in configuration files or source code associated with the API. Adversaries may search these files to extract credentials and gain unauthorized access to the API or its resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1592.002",
            "attack_object_name": "Software",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The REST API can be directly targeted by adversaries using the T1592.002 technique to gather information about the software running on the host. This can include details about the API itself, such as its version and configuration, which may be exposed through API responses or server banners. Such information can be used to identify vulnerabilities or plan further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1056",
            "attack_object_name": "Input Capture",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by input capture techniques if adversaries exploit vulnerabilities in the API to intercept or capture sensitive data such as credentials. For example, if an API endpoint is vulnerable to injection attacks, adversaries might capture input data sent to the API, thereby compromising the asset."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1587.004",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by exploits due to potential vulnerabilities in the API code, such as improper input validation or weak authentication mechanisms. Adversaries may develop or use exploits to take advantage of these vulnerabilities, leading to unauthorized access, data theft, or execution of malicious code."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1213.004",
            "attack_object_name": "Customer Relationship Management Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be used to interface with CRM software, allowing for data retrieval and manipulation. If an adversary gains access to a REST API that interacts with CRM software, they could potentially abuse the API to extract customer data from the CRM system. Thus, while the REST API itself is not the direct target, it can be abused as a tool to facilitate the attack on the CRM software."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be targeted by adversaries seeking to gather credentials, as they often handle authentication and authorization processes. Vulnerabilities in the API code, such as improper authentication mechanisms or weak access controls, can be exploited to gain unauthorized access to credentials."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries to further their credential gathering efforts. For example, compromised APIs can be used to harvest credentials from users interacting with the API, or to facilitate phishing attacks by impersonating legitimate services."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1195.002",
            "attack_object_name": "Compromise Software Supply Chain",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by the Compromise Software Supply Chain technique. Adversaries may manipulate the source code or distribution mechanisms of the REST API software to introduce vulnerabilities or backdoors before it is deployed by the end user. This can lead to the compromise of the REST API itself, potentially allowing unauthorized access or data manipulation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1102.002",
            "attack_object_name": "Bidirectional Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Bidirectional Communication technique as a means to send commands to and receive data from compromised systems. The REST API serves as a conduit for C2 communication, leveraging its legitimate functionality to hide malicious activities within normal traffic."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by exploitation techniques if there are vulnerabilities in the API code itself. Adversaries may exploit these vulnerabilities to execute arbitrary code on the server hosting the API, potentially compromising the application and gaining unauthorized access to data or resources."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1595.003",
            "attack_object_name": "Wordlist Scanning",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Wordlist Scanning can directly target REST APIs by probing for endpoints and resources using common or custom wordlists. This technique aims to discover hidden or undocumented API endpoints that could be vulnerable to further exploitation, such as unauthorized access or data exposure."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.011",
            "attack_object_name": "Spoof Security Alerting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by 'Spoof Security Alerting,' they could be abused in scenarios where an adversary uses the API to manipulate or spoof security alerts. For instance, if a REST API is part of a security monitoring system, an adversary might exploit the API to send false alerts or modify alert data, thereby misleading defenders about the true state of security tools or systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1573.002",
            "attack_object_name": "Asymmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using 'Asymmetric Cryptography' to conceal command and control traffic or data exfiltration. While the API itself is not the direct victim, it can be leveraged as a communication channel where encrypted data is transmitted, making it difficult to detect malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1567.002",
            "attack_object_name": "Exfiltration to Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Exfiltration to Cloud Storage' by being used as a conduit for transferring data to cloud storage services. If an attacker gains access to a REST API, they could potentially use it to send data to cloud storage, leveraging the API's functionality to facilitate data exfiltration."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1570",
            "attack_object_name": "Lateral Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Lateral Tool Transfer if adversaries leverage the API to facilitate the transfer of tools or files between systems. For example, if a REST API provides file upload or download capabilities, it could be misused to transfer malicious tools or files across systems, aiding in lateral movement within a compromised environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1608.003",
            "attack_object_name": "Install Digital Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who install digital certificates to establish secure communication channels for malicious activities, such as encrypting command and control (C2) traffic. This abuse leverages the REST API's communication capabilities to further the adversary's operations without directly targeting the API itself."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1100",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of the Web Shell technique, they can be abused if a web shell is deployed on the same server hosting the API. An adversary could leverage the web shell to manipulate the REST API, using it as a tool to further their attack, such as accessing sensitive data or performing unauthorized operations through the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1095",
            "attack_object_name": "Non-Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Non-Application Layer Protocol' technique, they can be abused in conjunction with this technique. For example, adversaries might use REST APIs to facilitate communication or data exfiltration over non-application layer protocols, leveraging the API as a tool to further their attack without directly compromising it."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.003",
            "attack_object_name": "Steganography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by Steganography, they can be abused in scenarios where steganographic data is transmitted through the API. For instance, an adversary might use a REST API to upload or download media files that contain hidden data, leveraging the API as a conduit for the steganographic technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584.002",
            "attack_object_name": "DNS Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the DNS Server technique, they can be indirectly affected. If an adversary compromises a DNS server and redirects traffic, REST APIs could be abused by directing legitimate API requests to malicious servers. This can facilitate man-in-the-middle attacks or data interception, making REST APIs a tool in the broader attack strategy."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1001.003",
            "attack_object_name": "Protocol or Service Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Protocol or Service Impersonation' technique as adversaries may manipulate HTTP headers, URI endpoints, and transmitted data to mimic legitimate API traffic. This can be used to disguise malicious activities or command and control communications, leveraging the REST API as a tool for blending in with normal network traffic."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1030",
            "attack_object_name": "Data Transfer Size Limits",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Data Transfer Size Limits' technique as they often handle data transfers over the network. An adversary could exploit a REST API to exfiltrate data in small chunks to avoid detection, using the API as a conduit for data transfer without directly compromising the API itself."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1550.004",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs often use web session cookies for authentication purposes. Adversaries can target REST APIs by stealing these session cookies to gain unauthorized access to the API, bypassing authentication mechanisms such as multi-factor authentication. This makes the REST API a direct target of the Web Session Cookie technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1078.002",
            "attack_object_name": "Domain Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Domain Accounts' technique, they can be abused if an adversary obtains domain account credentials. With these credentials, an attacker could potentially gain unauthorized access to REST API endpoints that are protected by domain authentication, allowing them to misuse the API for further attacks, such as accessing sensitive data or performing unauthorized operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1506",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs often rely on session cookies for maintaining user sessions after authentication. The Web Session Cookie technique targets these session cookies to gain unauthorized access to the REST API, effectively compromising the API by allowing adversaries to impersonate legitimate users and perform actions on their behalf."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1553.004",
            "attack_object_name": "Install Root Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Install Root Certificate' technique, they can be abused as part of a broader attack strategy. By installing a root certificate, adversaries can intercept and manipulate communications between clients and REST APIs, potentially leading to data exposure or man-in-the-middle attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1499",
            "attack_object_name": "Endpoint Denial of Service",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by Endpoint Denial of Service (DoS) attacks. Adversaries may attempt to exhaust the resources of the server hosting the REST API, causing the service to become unavailable to legitimate users. This is a direct attack on the REST API, aiming to degrade or block its availability."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1065",
            "attack_object_name": "Uncommonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Uncommonly Used Port' technique as adversaries may configure the API server or client to communicate over non-standard ports. This can help them evade detection by network security devices that are configured to monitor or block traffic on standard ports."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1614",
            "attack_object_name": "System Location Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of System Location Discovery if they expose endpoints that provide location-related information, such as IP addresses or metadata that could be used to infer the geographical location of a system. Adversaries might leverage such APIs to gather location information indirectly, using the API as a tool to further their discovery efforts."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1656",
            "attack_object_name": "Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the Impersonation technique does not directly target REST APIs, it can be used to abuse them. For example, an adversary could impersonate a legitimate user or service to gain unauthorized access to a REST API, exploiting trust to perform actions or extract data. This abuse leverages the API as a tool to further the adversary's goals."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1578.005",
            "attack_object_name": "Modify Cloud Compute Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the technique does not directly target REST APIs, it can abuse them as a means to interact with cloud services and modify configurations. REST APIs may be used to programmatically change cloud compute settings, making them a tool in executing this technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1494",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by runtime data manipulation attacks. Adversaries may alter the data being processed or displayed by the API, affecting the integrity of the data and potentially leading to incorrect business decisions or actions. This manipulation can exploit vulnerabilities in the API's code or data handling mechanisms, making the REST API a direct victim of such attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1090.004",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Domain Fronting if they are hosted on a CDN that supports multiple domains. An adversary could leverage the API's hosting infrastructure as part of a domain fronting scheme to disguise the true destination of their traffic, using the API's domain as a front. This misuse allows attackers to evade detection and bypass network filtering."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1557.002",
            "attack_object_name": "ARP Cache Poisoning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by ARP Cache Poisoning, they can be abused if the network traffic to and from the API is intercepted through ARP Cache Poisoning. This can lead to man-in-the-middle attacks where the adversary can sniff, alter, or relay the data being transmitted to or from the REST API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1562.008",
            "attack_object_name": "Disable or Modify Cloud Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Disable or Modify Cloud Logs' technique if they are used to interact with cloud services that manage logging configurations. If a REST API provides endpoints for managing cloud logging settings, an adversary with sufficient permissions could misuse these endpoints to disable or modify logging, thereby abusing the REST API as a tool to further their attack on cloud logging mechanisms."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1518.001",
            "attack_object_name": "Security Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused by adversaries using the 'Security Software Discovery' technique to gather information about security software in cloud environments. Adversaries might leverage REST APIs to interact with cloud services and discover security configurations or monitoring tools, using the API as a means to further their attack objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1493",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs are often targeted by transmitted data manipulation attacks because they rely on the transmission of data over networks using standard HTTP methods. Adversaries can intercept and alter the data being transmitted to and from the API to manipulate outcomes, such as altering the data being sent to a client or modifying requests to the server. This can lead to unauthorized actions, data corruption, or misleading information being processed by the application."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.006",
            "attack_object_name": "Python",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Python execution technique (T1059.006) as Python scripts can be used to interact with REST APIs. Adversaries may write Python scripts to automate interactions with REST APIs, potentially exploiting vulnerabilities in the API or using the API to further their attack objectives, such as data exfiltration or unauthorized access."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1591.004",
            "attack_object_name": "Identify Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could potentially be abused in the process of gathering information about identities and roles. For example, if a REST API exposes endpoints that provide access to user information or organizational roles, adversaries could leverage these APIs to collect the necessary data for the 'Identify Roles' technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Data Encoding technique (T1132) can be used to abuse a REST API by encoding data in API requests or responses to evade detection mechanisms. This abuse allows adversaries to use the REST API as a conduit for encoded command and control traffic, making it difficult for security systems to detect malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1496",
            "attack_object_name": "Resource Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in Resource Hijacking scenarios by leveraging their functionality to facilitate the hijacking of resources. For example, an attacker might exploit a REST API to execute unauthorized operations that consume excessive system resources, indirectly contributing to resource hijacking activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1585",
            "attack_object_name": "Establish Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Establish Accounts' technique, they can be abused in scenarios where adversaries use established accounts to interact with REST APIs. For example, adversaries could use these accounts to make API requests that further their malicious activities, such as accessing or manipulating data, or using the API to automate operations related to their personas or infrastructure acquisition."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1556.009",
            "attack_object_name": "Conditional Access Policies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of 'Conditional Access Policies' by adversaries who have modified these policies to bypass security measures. This can allow unauthorized access to the API, leveraging it as a tool to further their attack, such as accessing sensitive data or performing unauthorized operations."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1555.006",
            "attack_object_name": "Cloud Secrets Management Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by this technique if they are used to interact with cloud secrets management stores. An adversary with sufficient privileges could misuse a REST API to request secrets from the secrets manager, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1213.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Code Repositories' technique if they are used to interact with code repositories. For example, if a REST API is used to manage or access a code repository, it could be leveraged by adversaries to extract sensitive information or credentials stored within the repository. In this way, the REST API serves as a tool or conduit for accessing the repository, rather than being the direct target of the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1565.002",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs are directly targeted by the Transmitted Data Manipulation technique because they often handle data transmission over network connections. Adversaries can manipulate data being transmitted through REST APIs to affect business processes, organizational understanding, or decision-making. This manipulation can compromise the integrity of the data processed by the REST API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1569",
            "attack_object_name": "System Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the System Services technique, they can be indirectly abused if an adversary uses a compromised system service to interact with a REST API. For example, if a system service is manipulated to execute malicious code, that code could potentially make unauthorized API calls or manipulate API resources as part of a broader attack strategy. Thus, REST APIs can be abused as part of the attack facilitated by compromised system services."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1059.003",
            "attack_object_name": "Windows Command Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the Windows Command Shell technique, they can be abused if an adversary gains access to the underlying server hosting the API. If the server is compromised, the attacker could use the Windows Command Shell to execute commands, potentially leveraging the API as a means to further their attack, such as manipulating data or altering API behavior."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1650",
            "attack_object_name": "Acquire Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Acquire Access' technique if they are used as a vector to gain access to other systems or networks. For example, if an adversary acquires access credentials or tokens for a REST API, they could use this access to pivot to other systems within the network, especially if the API is integrated with critical services or has high privileges."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1213",
            "attack_object_name": "Data from Information Repositories",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by adversaries using the 'Data from Information Repositories' technique. APIs often serve as interfaces to access information repositories, and if improperly secured, they can be exploited to extract sensitive data such as credentials, network diagrams, or other valuable information stored in the repository."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1036.010",
            "attack_object_name": "Masquerade Account Name",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Masquerade Account Name' technique, they can be abused in scenarios where adversaries create or use masqueraded accounts to interact with the API. For example, an attacker might use a masqueraded account to gain unauthorized access to the API, perform actions, or extract data, leveraging the API as a tool to further their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1505",
            "attack_object_name": "Server Software Component",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using technique T1505 if they are part of a server application that includes extensible features. Adversaries may exploit these features to install malicious components that misuse the API for persistence or further attacks. The REST API, in this context, serves as a tool or vector for the adversary's objectives."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1485",
            "attack_object_name": "Data Destruction",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by data destruction attacks. Adversaries may exploit vulnerabilities in the API to gain unauthorized access and delete or overwrite data exposed by the API, rendering it irrecoverable. This can disrupt the availability of services that rely on the API and result in significant data loss."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1132.002",
            "attack_object_name": "Non-Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Non-Standard Encoding technique as they often handle data transmission over HTTP. Adversaries may use non-standard encoding within the data transmitted through a REST API to evade detection mechanisms, leveraging the API as a conduit for obfuscated command and control communication."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1537",
            "attack_object_name": "Transfer Data to Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries to facilitate the 'Transfer Data to Cloud Account' technique. An attacker could leverage a compromised or misconfigured REST API to transfer data to a cloud account they control. This abuse occurs when REST APIs are used to interact with cloud services, and the attacker uses these interactions to move data within the cloud environment, potentially bypassing traditional monitoring mechanisms."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1027.010",
            "attack_object_name": "Command Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by Command Obfuscation, they can be abused by adversaries who use obfuscated commands to interact with the API in a way that evades detection. For example, an attacker might use obfuscated commands to manipulate API requests or responses, making it difficult for security systems to detect malicious activity. This makes REST APIs a potential tool or stepping stone in attacks involving command obfuscation."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1130",
            "attack_object_name": "Install Root Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'Install Root Certificate' technique does not directly target REST APIs, it can be used to abuse them by intercepting and manipulating the secure communications between clients and REST APIs. By installing a malicious root certificate, an adversary can perform man-in-the-middle attacks on the HTTPS traffic to and from a REST API, potentially capturing sensitive data or injecting malicious responses."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1022",
            "attack_object_name": "Data Encrypted",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of the 'Data Encrypted' (T1022) technique if the API is used to facilitate data exfiltration. An attacker might use a REST API to transfer encrypted data out of a network, leveraging the API as a conduit for exfiltration. The API itself is not compromised by the encryption process, but it is used as a tool to move encrypted data, potentially making the exfiltration less conspicuous."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1498",
            "attack_object_name": "Network Denial of Service",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by Network Denial of Service attacks. These attacks aim to exhaust the network bandwidth and resources that the REST API relies on, thereby degrading or blocking the availability of the API to legitimate users. The REST API, being a web-based application, is susceptible to such attacks which can overwhelm the server hosting the API, making it unavailable to users."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1651",
            "attack_object_name": "Cloud Administration Command",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not the direct target of 'Cloud Administration Command', they can be abused as part of the attack chain. REST APIs may be used to interact with cloud management services or to facilitate the execution of commands within virtual machines, especially if they are improperly secured or exposed to unauthorized access."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1595.001",
            "attack_object_name": "Scanning IP Blocks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be indirectly involved in the 'Scanning IP Blocks' technique as they may be hosted on IP addresses that are scanned by adversaries. The information gathered from such scans can be used to identify potential targets, including REST APIs, for further attacks. Thus, while not directly abused in the scanning process, REST APIs can be indirectly affected as part of the broader reconnaissance efforts."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1134",
            "attack_object_name": "Access Token Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Access Token Manipulation does not directly target REST APIs, it can be used to abuse them. An adversary who has manipulated access tokens to escalate privileges could use those tokens to authenticate to a REST API with elevated permissions, potentially allowing unauthorized access to sensitive operations or data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1111",
            "attack_object_name": "Multi-Factor Authentication Interception",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Multi-Factor Authentication Interception' technique, they can be abused if they are part of an authentication process that includes MFA. For instance, if a REST API is used to handle authentication requests, an adversary might intercept MFA codes or credentials transmitted via the API to gain unauthorized access, thereby abusing the API as a tool in the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in conjunction with serverless infrastructure. An adversary could leverage a compromised serverless function to interact with REST APIs as part of their operations, using the API as a tool to facilitate actions such as data exfiltration or command and control. The serverless environment can act as an intermediary, making it difficult to trace malicious activities back to the adversary."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1071.001",
            "attack_object_name": "Web Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique T1071.001 (Web Protocols) can abuse REST APIs by using them as a means to communicate with compromised systems. REST APIs, which use HTTP/S, can be leveraged by adversaries to send commands and receive data while mimicking legitimate API traffic, thus aiding in evasion and stealthy communication."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1136",
            "attack_object_name": "Create Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the 'Create Account' technique if the API provides account creation functionality. An adversary could exploit this to create unauthorized accounts, which can then be used to access or manipulate resources through the API. This misuse of the API's account creation feature can facilitate further attacks or unauthorized access to other systems."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have compromised servers to further their operations. Once a server hosting a REST API is compromised, the API can be misused to facilitate malicious activities such as data exfiltration, command and control, or lateral movement within a network."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1526",
            "attack_object_name": "Cloud Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the Cloud Service Discovery technique (T1526) as they may be used to interact with cloud services and enumerate resources. Adversaries can leverage APIs to gather information about the cloud environment, such as available services and configurations, which can then be used to plan further attacks. The REST API serves as a tool for accessing and retrieving this information, making it an asset that can be abused in this context."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1018",
            "attack_object_name": "Remote System Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in the context of Remote System Discovery if an adversary uses the API to gather information about networked systems. For example, if a REST API provides endpoints that expose network topology or system information, an adversary could leverage these endpoints to discover other systems in the network, thereby using the API as a tool for furthering their attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1046",
            "attack_object_name": "Network Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be leveraged during Network Service Discovery as they may expose endpoints that provide information about available services. Adversaries may abuse REST APIs to enumerate services and gather information about the network environment, using the API as a tool to further their discovery efforts."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1590.001",
            "attack_object_name": "Domain Properties",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a source of information for gathering domain properties, especially if they expose domain-related data through publicly accessible endpoints. Adversaries may leverage REST APIs to collect domain information that can be used for further reconnaissance or planning attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1518",
            "attack_object_name": "Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused during Software Discovery (T1518) as adversaries may leverage APIs to enumerate software details, configurations, and versions. This information can be used to identify potential vulnerabilities or security measures, aiding in further attacks such as privilege escalation or lateral movement."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1105",
            "attack_object_name": "Ingress Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as a means to facilitate the Ingress Tool Transfer technique. Adversaries might leverage REST APIs to transfer malicious tools or files into a network by exploiting weak access controls or authentication mechanisms. This makes REST APIs a potential vector for abuse in the context of transferring tools into a compromised environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1648",
            "attack_object_name": "Serverless Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused in conjunction with serverless execution by adversaries who leverage APIs to trigger serverless functions. This can be part of an attack chain where REST APIs are used to invoke serverless functions that execute malicious code or perform unauthorized actions in a cloud environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1665",
            "attack_object_name": "Hide Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the 'Hide Infrastructure' technique by serving as intermediaries or proxies to obfuscate command and control (C2) communications. Adversaries may exploit REST APIs to blend malicious traffic with legitimate API traffic, making it harder to detect and analyze their activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1596.005",
            "attack_object_name": "Scan Databases",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs may be indirectly involved in this technique if their details (such as endpoints, open ports, or IP addresses) are exposed in public scan databases. Adversaries can abuse this information to plan further attacks or reconnaissance activities against the REST API or the infrastructure it resides on."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1001.002",
            "attack_object_name": "Steganography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused by the Steganography technique (T1001.002) as a medium to transfer steganographically hidden data. While the REST API itself is not the direct victim, it can be leveraged to transmit hidden command and control messages or other data, thus being misused as a conduit for malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1204.001",
            "attack_object_name": "Malicious Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by the 'Malicious Link' technique, they can be abused if a malicious link is used to exploit vulnerabilities in applications that interact with the API. For example, if a client application is tricked into executing malicious code via a link, it could then be used to send malicious requests to a REST API, thereby abusing the API as a tool to further an attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs are directly targeted by adversaries using stolen application access tokens to bypass authentication and access restricted resources. The API itself is the primary victim as the adversary uses the token to make unauthorized requests to the API, potentially compromising the data and operations it manages."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs are abused by adversaries who leverage stolen application access tokens to perform unauthorized actions on behalf of a user or service. The API serves as a tool for the adversary to execute further attacks, such as accessing other services or data, without directly compromising the API itself."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1078.004",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries who have compromised cloud accounts. Once an adversary gains access to a cloud account, they can use REST APIs to interact with cloud services, potentially executing unauthorized actions, accessing sensitive data, or deploying malicious configurations. This makes REST APIs a tool or stepping stone for further attacks within the cloud environment."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1480.001",
            "attack_object_name": "Environmental Keying",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While Environmental Keying does not directly target REST APIs, it can abuse them by using the API environment as part of its environmental keying mechanism. For instance, the adversary could leverage specific environmental values accessible through the API to derive decryption keys, thus using the API as a tool to facilitate the attack."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1008",
            "attack_object_name": "Fallback Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused as part of fallback channels if adversaries leverage them to establish alternate communication paths. For instance, if a REST API is used to transmit data or commands, it could be misused to maintain communication when primary channels are disrupted."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1053.002",
            "attack_object_name": "At",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the 'At' technique does not directly target REST APIs, it can be abused in scenarios where a REST API is hosted on a server. Adversaries may use the 'At' utility to schedule tasks that could affect the server hosting the REST API, potentially impacting the API indirectly through persistence, lateral movement, or privilege escalation on the server."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1086",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by PowerShell, they can be abused in scenarios where PowerShell scripts are used to interact with or manipulate REST APIs. For instance, an adversary could use PowerShell scripts to automate interactions with a REST API to exfiltrate data, perform unauthorized actions, or further propagate an attack within a network. Thus, PowerShell can be used as a tool to abuse REST APIs as part of a broader attack strategy."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1588.005",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs can be directly targeted by exploits that take advantage of vulnerabilities in the API code or its configuration. These exploits can lead to unauthorized access, data breaches, or execution of malicious code on the server hosting the API."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1556",
            "attack_object_name": "Modify Authentication Process",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "REST APIs often include authentication mechanisms to control access to resources. The 'Modify Authentication Process' technique can target REST APIs by altering these authentication mechanisms to gain unauthorized access or bypass security controls. This can lead to the compromise of the API, allowing attackers to execute unauthorized operations or access sensitive data."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1090.001",
            "attack_object_name": "Internal Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs could be abused in the context of the Internal Proxy technique if an adversary gains control over an API server or endpoint. In such a scenario, the REST API could be used as a conduit to redirect or proxy command and control traffic, leveraging its existing network connections and trusted status within the environment to conceal malicious activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1094",
            "attack_object_name": "Custom Command and Control Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the Custom Command and Control Protocol technique (T1094) to facilitate communication with compromised systems. An attacker might leverage a REST API as a communication channel, using custom protocols to send commands or exfiltrate data, thereby misusing the API as a conduit for command and control activities."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1102.001",
            "attack_object_name": "Dead Drop Resolver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused as part of the Dead Drop Resolver technique if they are used as a legitimate web service to host information that points to additional C2 infrastructure. Adversaries may post content on REST APIs to redirect infected systems, leveraging the API as a tool to further their attack without directly compromising it."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1001.001",
            "attack_object_name": "Junk Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by the Junk Data technique (T1001.001) in scenarios where the API is used as a communication channel for command and control purposes. Adversaries may insert junk data into API requests or responses to obfuscate the true nature of the communication, making it difficult for defenders to detect malicious activity. In this context, the REST API serves as a tool or medium for the attack rather than being the direct target."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1043",
            "attack_object_name": "Commonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs often use standard HTTP/HTTPS ports (TCP:80 and TCP:443). Adversaries can abuse these commonly used ports to communicate with compromised systems or to exfiltrate data, blending in with legitimate API traffic to avoid detection."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1552.007",
            "attack_object_name": "Container API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries in container environments to access sensitive information or credentials. The technique T1552.007 involves using APIs to gather credentials, which can include REST APIs if they are part of the container management system. Thus, REST APIs can be leveraged as a means to further an attack by accessing and misusing credentials."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1584.001",
            "attack_object_name": "Domains",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While REST APIs are not directly targeted by domain hijacking, they can be abused if an adversary gains control over a domain or subdomain associated with the API. The adversary could use the hijacked domain to redirect traffic to malicious endpoints or impersonate the legitimate API, thereby abusing the REST API as a tool for further attacks."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1505.001",
            "attack_object_name": "SQL Stored Procedures",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using the SQL Stored Procedures technique if the API interacts with a SQL database. An attacker could exploit vulnerabilities in the API to execute malicious SQL commands, potentially invoking stored procedures to gain persistence or execute arbitrary commands on the database server. Thus, while the REST API itself is not directly targeted, it can be a vector for abusing the SQL Stored Procedures technique."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1048.003",
            "attack_object_name": "Exfiltration Over Unencrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "REST APIs can be abused by adversaries using technique T1048.003 to exfiltrate data. Since REST APIs often use HTTP, an unencrypted protocol, adversaries can exploit this to send data to alternate locations without encryption. The REST API serves as a conduit for data transfer, making it a tool for exfiltration rather than a direct target."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The REST API can be directly targeted by adversaries exploiting vulnerabilities to bypass security features. Such exploitation can lead to unauthorized access or control over the API, compromising its integrity and confidentiality."
        },
        {
            "capability_id": "REST API",
            "capability_group": "Applications & Workloads",
            "capability_description": "A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. It uses standard HTTP methods like GET, POST, PUT, DELETE to perform operations on resources, which are represented in either XML or JSON format. REST APIs are stateless, meaning that each request from a client to a server must contain all the information needed to understand and process the request. While REST APIs offer a powerful and flexible way to interact with web services, they also present security challenges. These include potential vulnerabilities in the API code, user authentication mechanisms, and data handling practices. Threat vectors can range from injection attacks, man-in-the-middle attacks, to data exposure due to weak access controls. Security considerations include the configuration of access controls, encryption of sensitive data, and the security of the server on which the REST API is hosted.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "While the primary focus of T1211 is on exploiting vulnerabilities for defense evasion, REST APIs can be abused as a stepping stone to evade security measures. For instance, exploiting an API's vulnerability might allow an attacker to bypass logging or monitoring mechanisms, using the API as a conduit for further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.011",
            "attack_object_name": "Extra Window Memory Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Extra Window Memory Injection. An adversary could use a script to automate the process of injecting code into a target process's memory space. The script acts as a tool to execute the injection, leveraging the flexibility and automation capabilities of scripting languages to perform the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.005",
            "attack_object_name": "Scheduled Task",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Scheduled Task technique as they can be scheduled to execute at specific times or intervals. This allows adversaries to use scripts as a tool for persistence, lateral movement, or executing malicious activities without directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1205.002",
            "attack_object_name": "Socket Filters",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Socket Filters' technique as they may be used to automate the installation or configuration of socket filters. Scripts could be leveraged to execute commands that attach filters to sockets or to manage the network traffic that these filters monitor. Thus, scripts can serve as a tool to facilitate the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1066",
            "attack_object_name": "Indicator Removal from Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Indicator Removal from Tools' as they can be used to automate the process of modifying malicious tools or malware to remove indicators. Scripts can facilitate the repackaging or alteration of malicious code to evade detection, making them a tool leveraged in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1560.001",
            "attack_object_name": "Archive via Utility",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the use of utilities for compressing or encrypting data as part of the 'Archive via Utility' technique. Scripts can be written to execute these utilities, making them a tool for facilitating data exfiltration."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.005",
            "attack_object_name": "VNC",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the VNC technique as adversaries may use scripts to automate tasks or execute commands on a system that is being remotely controlled via VNC. This makes scripts a tool or stepping stone in the broader context of a VNC-based attack, where scripts can be executed to perform malicious activities under the control of the adversary."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1047",
            "attack_object_name": "Windows Management Instrumentation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Windows Management Instrumentation (WMI) technique to execute malicious commands and payloads. WMI can be leveraged to run scripts for various purposes such as discovery, execution, and lateral movement, making scripts a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1156",
            "attack_object_name": "Malicious Shell Modification",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Malicious Shell Modification' directly targets scripts by modifying shell configuration scripts to execute malicious commands. These scripts, such as ~/.bash_profile or ~/.zshrc, are specifically targeted to establish persistence by adversaries, making the script itself the primary victim of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1113",
            "attack_object_name": "Screen Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Screen Capture technique (T1113). Adversaries may use scripts to automate the process of taking screenshots by calling native utilities or APIs that perform screen capturing. This allows them to gather visual information from the system as part of their attack operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.011",
            "attack_object_name": "Fileless Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to facilitate fileless storage techniques. Scripts may be used to execute commands or payloads that leverage fileless storage mechanisms, such as storing malicious data in memory or other non-file formats, to avoid detection and maintain persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037",
            "attack_object_name": "Boot or Logon Initialization Scripts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique T1037 targets scripts by using them as boot or logon initialization scripts to establish persistence. The scripts are directly manipulated to execute automatically, making them the primary victim of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037",
            "attack_object_name": "Boot or Logon Initialization Scripts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by this technique as they are leveraged to perform administrative functions or escalate privileges. The scripts themselves are used as a tool to maintain persistence or execute other programs, thus being misused for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1557",
            "attack_object_name": "Adversary-in-the-Middle",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of an Adversary-in-the-Middle attack by being used to automate the interception, manipulation, or redirection of network traffic. For example, scripts may be employed to configure network settings, deploy malicious proxies, or automate the process of capturing and analyzing intercepted data. Thus, scripts serve as tools to facilitate AiTM attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1033",
            "attack_object_name": "System Owner/User Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to perform System Owner/User Discovery by executing commands or scripts that retrieve user information. Adversaries may leverage scripts to automate the collection of user data, making scripts a tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.011",
            "attack_object_name": "Rundll32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Rundll32 technique can be used to execute scripts, such as JavaScript, by leveraging the rundll32.exe process. This makes scripts a tool or stepping stone in the execution of malicious code, thus abusing the script asset type."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1613",
            "attack_object_name": "Container and Resource Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of discovering containers and resources within a containerized environment. Adversaries may write or use scripts to query Docker or Kubernetes APIs to gather information about the environment. In this context, scripts are abused as tools to facilitate the discovery process, making them a means to execute the attack rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1583.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Serverless technique by being deployed as serverless functions (e.g., AWS Lambda, Google Apps Scripts) to facilitate adversary operations. This abuse leverages scripts to execute tasks in a serverless environment, making it difficult to attribute actions back to the adversary and potentially hiding malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1143",
            "attack_object_name": "Hidden Window",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Hidden Window technique to execute malicious activities without alerting users. For example, scripting languages like PowerShell can be used to run scripts with hidden windows, allowing adversaries to conduct operations stealthily."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1132.001",
            "attack_object_name": "Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement 'Standard Encoding' as part of their functionality. Adversaries may use scripts to encode data using standard encoding systems like Base64 or hexadecimal to obfuscate command and control traffic, leveraging the script as a tool to execute this encoding process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.009",
            "attack_object_name": "Embedded Payloads",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Embedded Payloads technique as adversaries may embed malicious payloads within scripts to conceal their activities. This results in the script being compromised, allowing unauthorized execution of the embedded malicious content."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.009",
            "attack_object_name": "Embedded Payloads",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Embedded Payloads technique as they can serve as carriers for malicious payloads. While the script itself is not the primary target, it is misused to execute or deliver the embedded payload, facilitating further attacks such as process injection or subverting trust controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1150",
            "attack_object_name": "Plist Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Plist Modification technique. An adversary may leverage scripts to automate the modification of plist files, thereby enabling the execution of malicious code or achieving persistence on a system. In this context, scripts serve as a tool to facilitate the plist modification process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556.003",
            "attack_object_name": "Pluggable Authentication Modules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the PAM technique by being used to automate the modification of PAM components or to deploy malicious code into PAM modules. This abuse allows adversaries to facilitate unauthorized access or credential theft by leveraging scripts to manipulate PAM systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1578.004",
            "attack_object_name": "Revert Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Revert Cloud Instance' technique by being used to automate the process of reverting cloud instances. An adversary might use scripts to interact with cloud APIs to restore snapshots or reset instances, thus leveraging scripts as tools to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1148",
            "attack_object_name": "HISTCONTROL",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the HISTCONTROL technique. An adversary could use scripts to automate the execution of commands with leading spaces, ensuring these commands are not logged in the shell history. This misuse of scripts aids in maintaining stealth during an attack, as the commands executed by the script would not be recorded in the history file."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1592",
            "attack_object_name": "Gather Victim Host Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Gather Victim Host Information' by being used to automate the collection of host information. For example, scripts may be employed to parse and extract data from user-agent HTTP headers or to automate scanning activities that gather host information. In this way, scripts serve as tools to facilitate the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1056.001",
            "attack_object_name": "Keylogging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement keylogging functionality. Adversaries may use scripts written in languages like Python, Bash, or PowerShell to automate the process of capturing keystrokes, process the captured data, or exfiltrate it to an external server. Thus, scripts can be a tool for executing keylogging attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.012",
            "attack_object_name": "File/Path Exclusions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the 'File/Path Exclusions' technique to execute malicious activities while avoiding detection. Scripts may be placed in excluded paths to evade antivirus scans, allowing adversaries to use them as tools for further attacks without being detected."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1222.002",
            "attack_object_name": "Linux and Mac File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by this technique if an adversary modifies the permissions of script files to execute them with elevated privileges or to prevent legitimate users from accessing or modifying them. This misuse can facilitate further attacks, such as persistence or privilege escalation, by leveraging the modified script permissions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1110.001",
            "attack_object_name": "Password Guessing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate password guessing attacks by leveraging scripting languages to systematically attempt different password combinations against authentication services. This makes scripts a tool that can be abused to facilitate the Password Guessing technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1216.001",
            "attack_object_name": "PubPrn",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The PubPrn technique abuses scripts by leveraging them as a tool to proxy execution of malicious remote files. Adversaries use scripts like PubPrn.vbs to bypass security controls and execute payloads hosted on remote sites."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003",
            "attack_object_name": "OS Credential Dumping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of OS Credential Dumping by using them to automate the process of dumping credentials. Adversaries may write or use scripts to execute commands or leverage tools that perform credential dumping, thus using scripts as a means to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1129",
            "attack_object_name": "Shared Modules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Shared Modules technique (T1129) as they may be used to automate the loading and execution of shared modules. Scripts can facilitate the execution of malicious payloads by invoking shared modules, thus serving as a tool or stepping stone in the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1602",
            "attack_object_name": "Data from Configuration Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of this technique if they are used to interact with configuration repositories. Adversaries may leverage scripts to automate the extraction or manipulation of data from these repositories, using the script as a tool to achieve their objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1561.002",
            "attack_object_name": "Disk Structure Wipe",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that facilitate a Disk Structure Wipe. For example, a script could be used to automate the execution of commands that overwrite critical disk structures, leveraging scripting languages to perform malicious actions on disk data structures."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1498.001",
            "attack_object_name": "Direct Network Flood",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate a Direct Network Flood attack. For example, adversaries may use scripts to automate the sending of high volumes of network traffic or to control botnets that execute such attacks. In this context, scripts serve as a tool to orchestrate and execute the network flood, making them an asset that can be abused in the process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1492",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries using the Stored Data Manipulation technique. Adversaries may manipulate scripts to alter their behavior, inject malicious code, or change the data they process. This can lead to unauthorized execution of actions, data breaches, or manipulation of business processes."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.007",
            "attack_object_name": "Path Interception by PATH Environment Variable",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by this technique as they often rely on the PATH environment variable to locate and execute binaries. By intercepting the PATH variable, adversaries can manipulate scripts to execute malicious binaries, thus abusing the script's execution process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1213.002",
            "attack_object_name": "Sharepoint",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the SharePoint technique (T1213.002) as they may be used to automate the extraction or processing of information from SharePoint repositories. Adversaries might use scripts to systematically gather and analyze data from SharePoint, leveraging the script's capabilities to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1006",
            "attack_object_name": "Direct Volume Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be used to execute utilities like 'NinjaCopy' that perform Direct Volume Access. In this context, scripts are abused as tools to facilitate the technique, allowing adversaries to bypass access controls and monitoring by directly interacting with the file system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1044",
            "attack_object_name": "File System Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'File System Permissions Weakness' if they are used to automate the replacement or manipulation of binaries with improper permissions. An adversary could leverage a script to automate the process of identifying and replacing vulnerable binaries, thus using the script as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588.007",
            "attack_object_name": "Artificial Intelligence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the technique T1588.007 (Artificial Intelligence) as AI tools can be used to generate, refine, or enhance malicious scripts. This includes creating scripts for automation of attacks, obfuscation, and payload development, making scripts a tool or stepping stone in executing further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1666",
            "attack_object_name": "Modify Cloud Resource Hierarchy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the modification of cloud resource hierarchies. An adversary may use scripts to interact with cloud APIs to add, delete, or modify resource groups within an IaaS environment. This abuse allows scripts to serve as tools for executing the 'Modify Cloud Resource Hierarchy' technique, facilitating unauthorized changes to cloud infrastructure."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.008",
            "attack_object_name": "Email Hiding Rules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused to create or modify email rules as part of the 'Email Hiding Rules' technique. Adversaries can use scripts to automate the process of setting up malicious email rules, leveraging the script's ability to interact with system APIs and email clients."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1491.002",
            "attack_object_name": "External Defacement",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of External Defacement if they are used to automate the defacement process. For example, a script could be employed to modify web pages, upload defaced content, or exploit vulnerabilities in web applications to achieve defacement. Thus, while the script is not the direct victim, it can be leveraged as a tool to facilitate the defacement attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.013",
            "attack_object_name": "Encrypted/Encoded File",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Encrypted/Encoded File' technique as they can be used to execute or interpret encoded or encrypted content. Adversaries may use scripts to decode or decrypt obfuscated files, leveraging the script as a tool to reveal malicious content at the time of execution."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1014",
            "attack_object_name": "Rootkit",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by rootkits to execute hidden or unauthorized actions. A rootkit may leverage scripts to automate the installation or execution of malicious components, thereby using the script as a tool to further its concealment and persistence on the system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.013",
            "attack_object_name": "PowerShell Profile",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The PowerShell Profile technique directly targets scripts by modifying PowerShell profile scripts to include malicious content. This results in the unauthorized execution of these scripts whenever PowerShell is launched, compromising the integrity and security of the script."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.013",
            "attack_object_name": "PowerShell Profile",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, specifically PowerShell profiles, are abused by adversaries to gain persistence and potentially escalate privileges. The modified scripts serve as a tool to execute malicious activities each time a PowerShell session is initiated, leveraging the script as a means to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The JavaScript technique (T1059.007) targets scripts as it involves executing JavaScript code, which can be used to exploit vulnerabilities in scripts. This can lead to unauthorized execution, code injection, and data breaches, directly compromising the script asset."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.007",
            "attack_object_name": "JavaScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The JavaScript technique (T1059.007) can also abuse scripts by leveraging them to execute malicious behaviors, such as hosting malicious scripts on websites or downloading and executing script files as secondary payloads. This misuse of scripts can facilitate further attacks, such as drive-by compromises or obfuscation of malicious content."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1590.002",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of gathering DNS information. Adversaries may use scripts to query DNS records, perform zone transfers, or collect passive DNS data. In this context, scripts serve as tools to facilitate the DNS information gathering process, making them an asset that can be abused by this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1501",
            "attack_object_name": "Systemd Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Systemd Service technique by being executed through service unit files. Adversaries can create or modify service unit files to execute scripts at system startup or other service events, leveraging the script as a tool for persistence or execution of malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1514",
            "attack_object_name": "Elevated Execution with Prompt",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Elevated Execution with Prompt' by being used to call the AuthorizationExecuteWithPrivileges API. Malicious scripts can be crafted to exploit this API, prompting users for credentials and executing with elevated privileges, thereby misusing the script as a tool for privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1123",
            "attack_object_name": "Audio Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Audio Capture technique by interacting with audio devices or applications through available APIs. Scripts may be used to automate the process of capturing audio, storing it, and potentially exfiltrating it. Thus, scripts act as a tool to execute the audio capture process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1543",
            "attack_object_name": "Create or Modify System Process",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Create or Modify System Process' technique by being used to automate the creation or modification of system processes. Adversaries may leverage scripts to deploy or modify services, daemons, or agents, thus using scripts as a tool to facilitate persistence or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1133",
            "attack_object_name": "External Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with 'External Remote Services' as they can be used to automate the process of connecting to remote services, execute commands remotely, or manipulate data once access is gained. Scripts can facilitate the exploitation of remote services by automating tasks such as credential harvesting or executing commands on remote systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1539",
            "attack_object_name": "Steal Web Session Cookie",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Steal Web Session Cookie' technique by injecting malicious JavaScript into websites. This malicious script can be used to steal session cookies from users who execute the script in their browsers. Thus, scripts serve as a tool to facilitate the theft of session cookies."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.007",
            "attack_object_name": "Container Orchestration Job",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the technique T1053.007, Container Orchestration Job, as they can be used within the containers scheduled by orchestration jobs to execute malicious tasks. The scripts are leveraged as tools to perform actions within the containers, making them a means to execute the attack rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1568.002",
            "attack_object_name": "Domain Generation Algorithms",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement Domain Generation Algorithms (DGAs). Adversaries may write scripts in languages like Python, Bash, or PowerShell to automate the generation of domains using DGAs. These scripts can be used as a tool to facilitate the dynamic identification of command and control servers, making scripts a means to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.007",
            "attack_object_name": "Double File Extension",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Double File Extension technique when they are used as part of the payload. An adversary may use a script with a double extension to disguise it as a non-executable file, tricking users into executing it. This abuse leverages the script as a tool to execute malicious activities once the user is deceived into opening the file."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548.002",
            "attack_object_name": "Bypass User Account Control",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to bypass User Account Control by executing commands or binaries with elevated privileges without user consent. For instance, a script can be crafted to leverage known UAC bypass methods, such as using 'eventvwr.exe' to auto-elevate and execute a specified script or binary."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1099",
            "attack_object_name": "Timestomp",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to execute the Timestomp technique as they can automate the modification of file timestamps. In this context, scripts are abused as a tool to carry out the technique, enabling adversaries to obfuscate their activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1496.003",
            "attack_object_name": "SMS Pumping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the SMS Pumping technique as they may be used to automate the process of interacting with web forms or APIs that generate SMS messages. This automation can facilitate the large-scale generation of SMS traffic required for the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1016.001",
            "attack_object_name": "Internet Connection Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to perform Internet Connection Discovery. Adversaries may leverage scripts to automate the process of checking for Internet connectivity by executing commands such as Ping, tracert, or HTTP requests. In this context, scripts serve as a tool to facilitate the discovery process, making them an asset that can be abused by this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548.003",
            "attack_object_name": "Sudo and Sudo Caching",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the exploitation of sudo caching vulnerabilities or misconfigurations. Adversaries may use scripts to execute sudo commands without requiring user passwords by leveraging cached credentials or modifying sudoers configurations, thus abusing the script's ability to interact with system commands and configurations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1560.003",
            "attack_object_name": "Archive via Custom Method",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement custom archival methods for data compression or encryption. Adversaries may use scripts to automate the process of archiving data using custom methods, leveraging the flexibility and automation capabilities of scripts to facilitate data exfiltration."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1578",
            "attack_object_name": "Modify Cloud Compute Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the modification of cloud compute infrastructure. An adversary may leverage scripts to programmatically create, delete, or alter cloud resources, thereby abusing the script as a tool to execute the 'Modify Cloud Compute Infrastructure' technique. This allows the attacker to evade detection and manipulate cloud resources efficiently."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.008",
            "attack_object_name": "Network Devices",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with compromised network devices to automate tasks such as payload hosting or command execution. While the technique primarily targets network devices, scripts may be used as tools to facilitate further malicious activities once the network device is compromised."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1583.008",
            "attack_object_name": "Malvertising",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Malvertising if they are used to automate the creation or distribution of malicious ads, or if they are embedded within the ads themselves to execute malicious actions when users interact with the ads. Thus, scripts can serve as a tool to facilitate the malvertising process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1069",
            "attack_object_name": "Permission Groups Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Permission Groups Discovery technique as they can be used to automate the process of querying and extracting group and permission information from a system. An adversary might use a script to efficiently gather this data, leveraging the script's ability to interact with system APIs or execute system commands."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1114",
            "attack_object_name": "Email Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the collection of emails by interacting with email servers or clients. Adversaries may use scripts to extract, forward, or manipulate email data as part of the 'Email Collection' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.002",
            "attack_object_name": "Security Account Manager",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the execution of the Security Account Manager (SAM) technique. For example, adversaries may use scripts to automate the process of accessing the SAM database, extracting its contents, or executing tools like Mimikatz or secretsdump.py. Scripts can serve as a means to execute these tools and commands, making them a stepping stone in the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1596.002",
            "attack_object_name": "WHOIS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of querying WHOIS data. Adversaries may write scripts to systematically collect and analyze WHOIS information for reconnaissance purposes. Thus, scripts can be abused as tools to facilitate the execution of the WHOIS technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1069.003",
            "attack_object_name": "Cloud Groups",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of discovering cloud groups and permissions. For example, adversaries may write scripts using PowerShell, Azure CLI, or other scripting interfaces to programmatically enumerate cloud group memberships and permissions. This makes scripts a tool or stepping stone in executing the 'Cloud Groups' technique, as they facilitate the gathering of sensitive information about cloud environments."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.011",
            "attack_object_name": "Services Registry Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be used to manipulate registry entries as part of the 'Services Registry Permissions Weakness' technique. Scripts can automate the process of altering registry keys to redirect service execution paths, thereby abusing the script to facilitate persistence or privilege escalation through registry manipulation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1499.003",
            "attack_object_name": "Application Exhaustion Flood",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of sending repeated requests to resource-intensive features of an application, thereby facilitating an Application Exhaustion Flood attack. Scripts can be used as tools to generate the necessary traffic to exhaust application resources."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1163",
            "attack_object_name": "Rc.common",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Rc.common technique involves modifying or adding malicious code to the rc.common script file in macOS. This script is executed during the boot process, making it a direct target for adversaries seeking persistence. By targeting this script, attackers can ensure their code runs with root privileges on each reboot."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1195.001",
            "attack_object_name": "Compromise Software Dependencies and Development Tools",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries through the manipulation of software dependencies and development tools. This technique involves compromising the scripts themselves or the dependencies they rely on, potentially leading to unauthorized execution or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1583.002",
            "attack_object_name": "DNS Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the DNS Server technique by being used to automate the setup, configuration, or interaction with malicious DNS servers. Scripts could be used to facilitate DNS-based command and control operations or to manipulate DNS queries and responses, making them a tool or stepping stone in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1561",
            "attack_object_name": "Disk Wipe",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute Disk Wipe operations if they contain instructions that facilitate disk wiping activities. For example, a malicious script could be used to automate the process of wiping disk data by executing system commands that overwrite disk sectors. In this context, scripts serve as a tool to carry out the Disk Wipe technique, leveraging their ability to interact with system APIs and execute commands."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1071.004",
            "attack_object_name": "DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate DNS tunneling (T1071.004) by embedding malicious code that leverages DNS for covert communication. Scripts may be used to automate the process of encoding and decoding data within DNS queries and responses, thus misusing the script as a tool to execute DNS-based communication with attacker-controlled systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.005",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to access the Cloud Instance Metadata API if they are executed within a compromised cloud instance. Scripts may contain logic to query the metadata API, and if an adversary gains control over such a script, they can misuse it to extract sensitive information from the metadata API."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1615",
            "attack_object_name": "Group Policy Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused to perform Group Policy Discovery. Adversaries may leverage scripts to automate the process of gathering information about Group Policy settings using commands like 'Get-DomainGPO'. In this context, scripts are used as tools to facilitate the discovery process rather than being the direct target of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1025",
            "attack_object_name": "Data from Removable Media",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Data from Removable Media' by automating the process of searching and extracting data from removable media. An adversary might use a script to automate the collection of data from connected removable media, leveraging the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1116",
            "attack_object_name": "Code Signing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused using the Code Signing technique when adversaries use stolen or forged code signing certificates to sign malicious scripts. This abuse allows malicious scripts to appear legitimate, bypassing security controls that require scripts to be signed before execution. Thus, scripts can be misused as tools to further an attack by masquerading as legitimate code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.013",
            "attack_object_name": "Mavinject",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the execution of mavinject.exe to perform code injection into processes. This means scripts can be abused as a tool to facilitate the Mavinject technique, enabling adversaries to automate and streamline the injection process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1522",
            "attack_object_name": "Cloud Instance Metadata API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate requests to the Cloud Instance Metadata API, especially if a script is running on a compromised instance. This allows attackers to programmatically extract sensitive information like credentials from the metadata API."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1093",
            "attack_object_name": "Process Hollowing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the execution of Process Hollowing by preparing and executing the necessary commands and code to perform the injection into a target process. Thus, scripts can be abused as tools to facilitate the Process Hollowing technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1074.001",
            "attack_object_name": "Local Data Staging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Local Data Staging technique as they may be used to automate the process of collecting and staging data. Adversaries might leverage scripts to copy or move data into a staging location, utilizing the flexibility and automation capabilities of scripting languages like Bash or PowerShell."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.005",
            "attack_object_name": "Match Legitimate Name or Location",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the 'Match Legitimate Name or Location' technique to disguise malicious scripts as legitimate ones. By placing scripts in trusted directories or naming them similarly to trusted scripts, attackers can evade detection and misuse the script for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1172",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to implement domain fronting by automating the process of manipulating HTTP and TLS headers to achieve the desired obfuscation of traffic. Thus, scripts can be abused as a tool to facilitate domain fronting."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1587.003",
            "attack_object_name": "Digital Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with digital certificates. For example, a script could be used to automate the creation or installation of self-signed certificates on a system, facilitating further malicious activities such as encrypting C2 traffic or enabling adversary-in-the-middle attacks. In this way, scripts serve as a tool to further the objectives of the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1565.001",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries using the Stored Data Manipulation technique. Attackers may manipulate the script's code or data it interacts with to alter its behavior, introduce vulnerabilities, or achieve unauthorized actions. This manipulation can compromise the integrity of the script, leading to unintended outcomes or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1565.001",
            "attack_object_name": "Stored Data Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to manipulate stored data as part of a broader attack strategy. For instance, a script may be used to automate the process of altering data in databases or files, serving as a tool to facilitate the Stored Data Manipulation technique. This abuse leverages the script's capabilities to execute commands and interact with data, making it a means to achieve the attacker's objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1110.002",
            "attack_object_name": "Password Cracking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Password Cracking (T1110.002) as they can be used to automate the process of systematically guessing passwords or applying pre-computed rainbow tables. Scripts can be leveraged to execute these tasks efficiently, thus serving as a tool to facilitate the password cracking process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1178",
            "attack_object_name": "SID-History Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could be abused to automate or facilitate the SID-History Injection process. For example, a script could be used to programmatically insert SIDs into the SID-History attribute if an attacker has the necessary privileges. Thus, scripts can be leveraged as a tool to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1114.001",
            "attack_object_name": "Local Email Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Local Email Collection technique by being used as a tool to automate the process of locating, accessing, and extracting email data from local storage. For example, a script could be written to search for and copy Outlook data files (.pst or .ost) from a user's system, facilitating the collection of email information without directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1555.001",
            "attack_object_name": "Keychain",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Keychain technique by automating the extraction of credentials from Keychain storage. For example, a malicious script could use command-line utilities to access and dump Keychain data, leveraging the script's ability to execute system commands and interact with system APIs. Thus, scripts can be a tool used in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Boot or Logon Autostart Execution technique to maintain persistence on a system. By placing a script in an autostart location or referencing it in system configuration repositories, adversaries can ensure that the script executes automatically during system boot or user logon, potentially with elevated privileges. This misuse of scripts as a tool for persistence aligns with the characteristics of abuse in this context."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.004",
            "attack_object_name": "LSA Secrets",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the LSA Secrets technique. An adversary could use a script to automate the process of accessing and extracting LSA secrets from the registry or memory, leveraging tools like Mimikatz within a script to perform the extraction. Thus, scripts can be used as a tool to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1013",
            "attack_object_name": "Port Monitors",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Port Monitors technique to facilitate the loading of malicious DLLs. For example, a script could automate the modification of registry settings to include a malicious DLL in the port monitor list, thereby using the script as a tool to execute the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1600",
            "attack_object_name": "Weaken Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to weaken encryption if they are used to automate tasks that modify encryption settings or configurations on network devices. For example, a script could be used to deploy changes that reduce key space or disable encryption, thereby facilitating the 'Weaken Encryption' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1606.002",
            "attack_object_name": "SAML Tokens",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the SAML Tokens technique if they are used to automate the process of forging or manipulating SAML tokens. Scripts may facilitate the execution of this technique by interacting with systems to generate or modify tokens, thus serving as a tool in the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1192",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Spearphishing Link technique when a user is tricked into downloading and executing a malicious script from a link. The script can then be used to perform further malicious activities on the system, such as downloading additional malware, stealing data, or establishing persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.008",
            "attack_object_name": "Masquerade File Type",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Masquerade File Type technique. Adversaries may disguise malicious scripts as benign files by altering their file extensions or headers. This allows the scripts to bypass security checks and execute malicious code when interpreted by a scripting engine."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1489",
            "attack_object_name": "Service Stop",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the stopping of services as part of an attack strategy. An adversary might use a script to systematically disable critical services on a system, leveraging the script as a tool to execute the Service Stop technique. Thus, scripts can be abused to facilitate this technique by executing commands that stop services."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1587.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1587.001 (Malware) as they may be used to develop or execute malware components. Scripts can serve as droppers or payloads within malware, facilitating the execution of malicious activities and supporting the adversary's operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1121",
            "attack_object_name": "Regsvcs/Regasm",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Regsvcs/Regasm technique as they may contain code that can be executed through these utilities. This technique leverages scripts as a means to execute code, potentially bypassing security controls like process whitelisting."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1652",
            "attack_object_name": "Device Driver Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used as tools to automate the process of device driver discovery. An adversary might write or use a script to execute commands or utilize APIs that enumerate device drivers, thereby leveraging scripts as a means to facilitate this technique. This makes scripts an asset that can be abused to perform Device Driver Discovery."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1206",
            "attack_object_name": "Sudo Caching",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the exploitation of the Sudo Caching technique. Adversaries may use scripts to manipulate sudo configurations, such as disabling 'tty_tickets', to facilitate privilege escalation without requiring user passwords repeatedly. Thus, scripts are abused as tools to carry out this attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1087.002",
            "attack_object_name": "Domain Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands that enumerate domain accounts, such as using PowerShell scripts with cmdlets like Get-ADUser. In this context, scripts serve as a tool to facilitate the execution of the Domain Account enumeration technique, making them an asset that can be misused for this purpose."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.014",
            "attack_object_name": "Active Setup",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Active Setup technique as they can be specified as the executable in the 'StubPath' registry key. This allows adversaries to execute malicious scripts during user logon, leveraging the script as a tool to maintain persistence or execute further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564",
            "attack_object_name": "Hide Artifacts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement the 'Hide Artifacts' technique. For example, a script could be used to manipulate file attributes, modify system settings, or execute commands that hide malicious artifacts from detection tools. In this context, scripts serve as a tool or mechanism to facilitate the hiding of artifacts, making them an asset that can be abused by this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1559.002",
            "attack_object_name": "Dynamic Data Exchange",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Dynamic Data Exchange (DDE) technique as they may be used to execute commands or automate tasks once DDE is used to establish a link between applications. Scripts can be leveraged to further an attack by executing malicious commands or payloads delivered through DDE."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1204.002",
            "attack_object_name": "Malicious File",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be targeted by the Malicious File technique when adversaries craft malicious scripts that are executed by users. These scripts can be embedded within files that users are tricked into opening, leading to unauthorized execution and potential compromise of the system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1063",
            "attack_object_name": "Security Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to perform Security Software Discovery (T1063). Scripts written in languages like Python, Bash, or PowerShell can be used to automate the discovery process by executing commands that gather information about installed security software and configurations. This makes scripts a tool or stepping stone in the execution of the technique, rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1071.005",
            "attack_object_name": "Publish/Subscribe Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement or facilitate communication using publish/subscribe protocols. An adversary might use scripts to automate the sending and receiving of messages through these protocols, leveraging the script as a tool to blend malicious communication with legitimate traffic."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1080",
            "attack_object_name": "Taint Shared Content",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Taint Shared Content technique. Adversaries may add malicious scripts to shared storage locations, such as network drives or code repositories, to execute malicious code when accessed by users. This results in the script being the primary victim of the attack, as it is compromised to deliver the adversary's payload."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1080",
            "attack_object_name": "Taint Shared Content",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can also be abused by the Taint Shared Content technique. Once a script is tainted and placed in a shared location, it can be used as a tool to execute malicious activities on remote systems. This leverages the script as a means to move laterally or propagate malware, rather than directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1484.002",
            "attack_object_name": "Trust Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Trust Modification by being used to automate the process of altering trust relationships. For instance, scripts may be used to interact with APIs or system commands to add or modify domain trusts or federated identity providers. This abuse leverages scripts as tools to facilitate the attack, rather than targeting them directly."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1573.001",
            "attack_object_name": "Symmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement symmetric cryptography as part of malicious activities. An adversary may use a script to automate the encryption of command and control traffic using symmetric cryptography, thereby leveraging the script as a tool to conceal malicious communications."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1087.001",
            "attack_object_name": "Local Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that enumerate local accounts, such as using system utilities or accessing system files like '/etc/passwd'. This makes scripts a potential tool for adversaries to leverage in executing the 'Local Account' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1527",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Application Access Token technique by being used to automate the process of exploiting stolen tokens. For instance, scripts can be utilized to programmatically interact with APIs using compromised tokens, thereby facilitating unauthorized access and actions on behalf of the adversary."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.009",
            "attack_object_name": "Safe Mode Boot",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of modifying boot configuration data or registry settings to force a system into safe mode. Thus, scripts can be abused as a tool to facilitate the execution of the Safe Mode Boot technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1180",
            "attack_object_name": "Screensaver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Screensaver technique by being used as payloads or components of malicious screensavers. Adversaries may craft scripts that execute malicious actions and configure them to run as screensavers, leveraging the screensaver settings to maintain persistence and execute the script after a period of user inactivity."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1543.003",
            "attack_object_name": "Windows Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Windows Service technique (T1543.003) as part of the execution payload. Adversaries may use scripts to automate the creation or modification of Windows services, enabling persistence or privilege escalation. Scripts can also be used to interact with system utilities or APIs to configure services maliciously."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1568.001",
            "attack_object_name": "Fast Flux DNS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement or facilitate Fast Flux DNS techniques. For instance, scripts may be used to automate the process of registering and deregistering IP addresses in DNS records, or to manage the infrastructure needed for Fast Flux operations. Thus, scripts can serve as tools in executing this technique, even though they are not the primary target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1497.001",
            "attack_object_name": "System Checks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate system checks for virtualization and sandbox environments. Scripts are leveraged as tools to execute these checks, making them a means to further the attack by avoiding detection or analysis."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.003",
            "attack_object_name": "Cron",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are often abused by the Cron technique as they can be scheduled to run at specific times or intervals. This abuse allows adversaries to persistently execute malicious scripts without direct interaction, leveraging the script as a tool to maintain persistence or automate attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1069.002",
            "attack_object_name": "Domain Groups",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the execution of commands that gather information about domain groups, such as using 'net group /domain' or 'ldapsearch'. In this context, scripts are abused as tools to facilitate the execution of these commands, aiding adversaries in collecting domain group information. Thus, scripts are leveraged as a means to execute the 'Domain Groups' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588.006",
            "attack_object_name": "Vulnerabilities",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries seeking to exploit vulnerabilities within the script itself. These vulnerabilities may include code injection flaws, improper input validation, or insecure handling of sensitive data. By acquiring information about these vulnerabilities, adversaries can directly compromise the script, leading to unauthorized execution or data leakage."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1566.002",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Spearphishing Link technique if a user is tricked into downloading and executing a malicious script from a link. Once executed, the script can perform unauthorized actions on the system, leveraging the user's permissions and potentially leading to further compromise."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1165",
            "attack_object_name": "Startup Items",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Startup Items technique as adversaries may create or modify scripts within the StartupItems directory to establish persistence. This involves placing malicious scripts that execute during the system's boot process, thereby compromising the script asset by running unauthorized code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1165",
            "attack_object_name": "Startup Items",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Startup Items technique as they can be used as a tool to maintain persistence on a system. By placing a script in the StartupItems directory, adversaries leverage the script to execute malicious activities during system startup, thus using the script as a means to achieve persistence and potentially escalate privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.002",
            "attack_object_name": "Clear Linux or Mac System Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute the 'Clear Linux or Mac System Logs' technique. Adversaries may use scripts to automate the process of clearing logs, thereby leveraging the script as a tool to further their attack by covering their tracks on a compromised system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1499.004",
            "attack_object_name": "Application or System Exploitation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Application or System Exploitation' if they are used to automate the exploitation process. For example, a script may be used to repeatedly exploit a vulnerability to maintain a persistent denial of service condition. In this way, scripts serve as tools to facilitate the exploitation of applications or systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137",
            "attack_object_name": "Office Application Startup",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Office Application Startup' technique as they may be used within Office macros or add-ins to automate tasks or execute malicious code. This makes scripts a tool that can be leveraged to maintain persistence or execute further attacks when an Office application starts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.004",
            "attack_object_name": "InstallUtil",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the InstallUtil technique as they may be used to craft or execute malicious .NET binaries that are then executed through InstallUtil. This allows adversaries to leverage scripts to prepare or deliver payloads that InstallUtil will execute, effectively using scripts as a tool in the attack chain."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1598.003",
            "attack_object_name": "Spearphishing Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Spearphishing Link technique if they are used to automate the process of sending phishing emails or managing the infrastructure that hosts phishing websites. Scripts can facilitate the execution of the phishing campaign by automating tasks such as generating personalized emails, managing phishing kits, or analyzing collected data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.004",
            "attack_object_name": "SSH",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with SSH to automate tasks or execute commands on remote systems once access is gained. An adversary might use scripts to facilitate the execution of commands over SSH, making scripts a tool that can be leveraged for furthering attacks via SSH."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.003",
            "attack_object_name": "Additional Cloud Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of this technique by automating the process of adding or modifying cloud roles and permissions. Adversaries may use scripts to interact with cloud APIs (such as AWS IAM or Google Cloud IAM) to efficiently execute these changes, thus leveraging scripts as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1089",
            "attack_object_name": "Disabling Security Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands or actions that disable security tools. For instance, a malicious script could be used to stop security services, delete logs, or alter configurations to prevent security tools from functioning properly. In this way, scripts serve as a tool to carry out the technique of disabling security tools."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1487",
            "attack_object_name": "Disk Structure Wipe",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute the Disk Structure Wipe technique. An adversary might use a script to automate the process of overwriting critical disk structures across multiple systems, especially if the script is designed to propagate like a worm. Scripts can facilitate the execution of malicious code that performs the disk wiping, making them a tool for carrying out this attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1566.001",
            "attack_object_name": "Spearphishing Attachment",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by spearphishing attachments when the attachment contains a script file (e.g., a malicious PowerShell or Python script) that executes upon opening. This can lead to unauthorized execution of the script, potentially compromising the system by exploiting vulnerabilities within the script or executing malicious code embedded in it."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1214",
            "attack_object_name": "Credentials in Registry",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the querying of the Windows Registry for credentials. An adversary might use a script to systematically search for and extract credentials stored in the registry, leveraging the script's ability to interact with system APIs and automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.008",
            "attack_object_name": "Stripped Payloads",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Stripped Payloads technique as adversaries may strip symbols and strings from scripts to make them difficult to analyze. This targeting is aimed at obfuscating the script's functionality and hindering detection and analysis efforts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1559.001",
            "attack_object_name": "Component Object Model",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to abuse the Component Object Model (COM) by leveraging scripting languages like Python, PowerShell, or Visual Basic to interact with COM objects. This allows adversaries to execute arbitrary code, perform privilege escalation, or maintain persistence by using scripts to automate the interaction with COM components."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.001",
            "attack_object_name": "DLL Search Order Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used as a means to deploy or execute DLL Search Order Hijacking. An attacker could use a script to automate the placement of malicious DLLs in specific directories, thus abusing the script to facilitate the hijacking process. Scripts can be leveraged to manipulate system settings or file placements that contribute to the success of DLL hijacking."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1119",
            "attack_object_name": "Automated Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Automated Collection technique as they can be used to automate the process of data collection. Adversaries may leverage scripts to execute commands that search for and copy information fitting specific criteria, making scripts a tool for executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1115",
            "attack_object_name": "Clipboard Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands that access clipboard data. For example, a malicious script could be written to use system commands like 'Get-Clipboard' on Windows or 'pbpaste' on macOS/Linux to capture clipboard contents. In this way, scripts serve as a tool to facilitate the Clipboard Data technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.007",
            "attack_object_name": "Proc Filesystem",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Proc Filesystem technique. An adversary could use a script to automate the process of searching through the proc filesystem for credentials. The script acts as a tool to perform the attack, leveraging its ability to execute commands and process outputs to extract sensitive information from memory."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1583.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused as part of a botnet operation. Adversaries may use scripts to automate the control of compromised systems within a botnet, execute commands, or deploy additional payloads. Scripts provide the flexibility and automation needed to manage and coordinate activities across the botnet."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1555.005",
            "attack_object_name": "Password Managers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to interact with password managers. For example, a script could be used to automate the extraction of credentials from a password manager once it is unlocked. This makes scripts a potential tool for abusing the technique T1555.005, as they can be used to facilitate unauthorized access to credentials stored in password managers."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.001",
            "attack_object_name": "Gatekeeper Bypass",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by Gatekeeper Bypass techniques as adversaries may modify scripts to evade Gatekeeper checks. This can involve altering script attributes or embedding malicious code within scripts to bypass security controls, leading to unauthorized execution of the script."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.001",
            "attack_object_name": "Gatekeeper Bypass",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Gatekeeper Bypass by being used as a tool to execute further malicious activities. For example, a script could be used to automate the process of modifying file attributes or executing untrusted programs, thereby facilitating the bypass of Gatekeeper checks and enabling further attacks on the system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.004",
            "attack_object_name": "Drive-by Target",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts are directly targeted in the Drive-by Target technique as adversaries may upload or inject malicious scripts, such as JavaScript, into websites. This involves inserting malicious scripts into web pages or modifying script files, which directly compromises the script asset."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.004",
            "attack_object_name": "Drive-by Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused in the Drive-by Target technique as they can be used to profile a user's browser or deliver exploits once a user visits a compromised site. The script acts as a tool to further the attack, such as gathering victim host information or facilitating a drive-by compromise."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1007",
            "attack_object_name": "System Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the process of system service discovery. Scripts may be used to execute commands that gather information about system services, leveraging the script's ability to interact with system APIs and execute system commands."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1040",
            "attack_object_name": "Network Sniffing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Network Sniffing technique (T1040) to automate the process of capturing and analyzing network traffic. For example, a script could be used to set a network interface to promiscuous mode, automate the collection of network packets, or parse captured data for sensitive information. Thus, while scripts are not the direct target, they can be leveraged as tools to facilitate network sniffing activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1017",
            "attack_object_name": "Application Deployment Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Application Deployment Software technique (T1017) as they may be deployed across systems using these deployment tools. Adversaries can leverage scripts as part of the software package to execute malicious activities on multiple systems, facilitating lateral movement or executing malicious code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.002",
            "attack_object_name": "Code Signing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries who use code signing to make malicious scripts appear legitimate. By signing a script with a valid code signing certificate, attackers can bypass security policies that require signed code to execute, thereby abusing the trust model associated with code signing to facilitate the execution of malicious scripts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1530",
            "attack_object_name": "Data from Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to access cloud storage data by using them to automate interactions with cloud APIs or to execute commands that retrieve data from cloud storage. This makes scripts a tool that can facilitate the execution of the 'Data from Cloud Storage' technique, leveraging their ability to interact with cloud services and potentially misuse credentials or configurations to access sensitive data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1565.003",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Runtime Data Manipulation' by being used to automate the process of altering runtime data. An adversary could leverage scripts to consistently and systematically manipulate data during its execution, thus using the script as a tool to facilitate the manipulation of application data without directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.002",
            "attack_object_name": "Credentials in Registry",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of querying the Windows Registry to extract credentials. An adversary might use a script to systematically search for and retrieve insecurely stored credentials from the Registry, leveraging the script as a tool to facilitate this attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1135",
            "attack_object_name": "Network Share Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of discovering network shares. An adversary might use a script to execute commands that identify shared resources across a network, leveraging the script as a tool to facilitate the discovery process. This makes scripts a means to execute the Network Share Discovery technique, rather than a direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1120",
            "attack_object_name": "Peripheral Device Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of discovering peripheral devices on a system. An adversary might leverage a script to execute commands that gather information about connected peripherals, thus abusing the script as a tool to carry out the Peripheral Device Discovery technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.009",
            "attack_object_name": "Break Process Trees",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement the 'Break Process Trees' technique. Scripts written in languages like Bash or Python can execute system calls such as 'fork()' or 'daemon' to manipulate process trees, aiding in evasion tactics by breaking the parent-child process relationship."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1590.004",
            "attack_object_name": "Network Topology",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Network Topology technique by being used as tools to automate the collection of network topology information. For example, scripts written in languages like Python or PowerShell can be used to perform network scans, query network devices, or extract network configuration data, thereby facilitating the gathering of network topology information."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1587.002",
            "attack_object_name": "Code Signing Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using self-signed code signing certificates to make malicious scripts appear legitimate. This abuse leverages the trust associated with signed code to bypass security controls and execute malicious activities. Therefore, scripts can be misused as part of this technique to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1222.001",
            "attack_object_name": "Windows File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Windows File and Directory Permissions Modification' technique. For example, adversaries may modify permissions to allow scripts to execute with elevated privileges or to bypass security controls, using scripts as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137.006",
            "attack_object_name": "Add-ins",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Add-ins technique as they may be used within Office add-ins to execute malicious code. Adversaries can write scripts in languages like VBA or PowerShell within add-ins to automate malicious tasks, thereby using scripts as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1505.002",
            "attack_object_name": "Transport Agent",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to create or manage transport agents, potentially including malicious ones. In this context, scripts may be abused to automate the deployment or configuration of a malicious transport agent, leveraging their ability to interact with system APIs and automate tasks. Therefore, scripts can be a tool in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1082",
            "attack_object_name": "System Information Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that perform system information discovery. Adversaries may leverage scripts to automate the process of gathering detailed system information, using scripts as a tool to execute commands like 'systeminfo' or 'df -aH'. Thus, scripts can be misused to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1071",
            "attack_object_name": "Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Application Layer Protocol technique (T1071) by embedding malicious commands or data within legitimate protocol traffic. Scripts can automate the process of sending and receiving data over these protocols, effectively helping adversaries to blend malicious activities with normal network traffic, thus avoiding detection."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.014",
            "attack_object_name": "AppDomainManager",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to manipulate or configure .NET runtime settings, such as modifying configuration files or environment variables, to facilitate the AppDomainManager injection technique. This makes scripts a potential tool for abusing this technique, as they can automate the process of setting up the environment for malicious assembly loading."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1074.002",
            "attack_object_name": "Remote Data Staging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Remote Data Staging as they can be used to automate the process of collecting and staging data. Adversaries may leverage scripts to copy data into a staging location, manipulate files, or execute commands that facilitate the staging process, thereby using scripts as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.006",
            "attack_object_name": "Additional Container Cluster Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of this technique if they are used to automate the process of adding additional roles or permissions to user or service accounts in container orchestration systems. Scripts can facilitate the misuse of permissions to maintain persistent access, making them a tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053",
            "attack_object_name": "Scheduled Task/Job",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Scheduled Task/Job technique (T1053) as they can be scheduled to run at specific times or events, allowing adversaries to automate the execution of malicious scripts for persistence, privilege escalation, or evasion. This makes scripts a tool leveraged by this technique rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.007",
            "attack_object_name": "Msiexec",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the execution of msiexec.exe to deploy malicious payloads. This makes scripts a tool that can be abused to facilitate the Msiexec technique, leveraging their ability to execute commands and interact with system utilities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1162",
            "attack_object_name": "Login Item",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Login Item technique to achieve persistence on a macOS system. An adversary can use scripting languages like AppleScript to register their code as a login item, thereby leveraging scripts as a tool to execute malicious code each time a user logs in."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1590.003",
            "attack_object_name": "Network Trust Dependencies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of gathering information about network trust dependencies. For example, scripts may be employed to query network configurations, extract trust relationships, or automate reconnaissance tasks related to identifying network trust dependencies."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.002",
            "attack_object_name": "AppleScript",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The AppleScript technique directly targets scripts as it involves executing scripts written in the AppleScript language. This execution can lead to unauthorized actions such as interacting with applications, sending keystrokes, and executing malicious behaviors on the system, thereby compromising the script asset."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.002",
            "attack_object_name": "AppleScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "AppleScript can be abused as a tool to facilitate further attacks. Scripts can be leveraged to automate malicious activities, interact with open applications, and execute additional techniques like reverse shells. This makes scripts a means to achieve lateral movement, persistence, and evasion, rather than being the direct victim."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1176",
            "attack_object_name": "Browser Extensions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with browser extensions. Malicious scripts may be embedded within browser extensions to automate tasks such as data exfiltration or to execute further malicious activities, leveraging the browser extension's access and permissions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1499.002",
            "attack_object_name": "Service Exhaustion Flood",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate a Service Exhaustion Flood attack. An adversary could use scripts to automate the sending of a large number of requests to a target service, thereby leveraging the script as a tool to execute the denial of service attack. The script itself is not harmed but is used to perform malicious activities against another asset."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1106",
            "attack_object_name": "Native API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can abuse the Native API technique (T1106) by leveraging system calls and APIs to perform actions such as executing binaries, running commands, or interacting with system components. Scripts can serve as a means to invoke these APIs, thus being used as a tool to further an attack by interacting with the system's native functionalities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1558.005",
            "attack_object_name": "Ccache Files",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the collection and manipulation of ccache files, potentially aiding in the execution of attacks such as Pass the Ticket or Privilege Escalation. Therefore, scripts can be abused by this technique to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.007",
            "attack_object_name": "Clear Network Connection History and Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of clearing network connection history and configurations. Adversaries may leverage scripts to execute this technique efficiently, making scripts a tool or means to further the attack by automating the cleanup of traces of malicious network activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1558.004",
            "attack_object_name": "AS-REP Roasting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused to automate the process of identifying accounts with disabled preauthentication. Adversaries can use scripts to send AS-REQ messages or query domain accounts, making scripts a tool for executing the AS-REP Roasting attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1058",
            "attack_object_name": "Service Registry Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, such as PowerShell scripts, can be used to manipulate service registry keys if permissions are weak. In this context, scripts are abused as tools to execute the attack, allowing adversaries to modify service execution parameters for persistence or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.003",
            "attack_object_name": "Virtual Private Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Virtual Private Server' technique by being deployed on compromised VPSs to automate malicious activities, such as setting up command and control infrastructure or launching attacks from the VPS. Scripts serve as tools that facilitate the adversary's operations on the compromised infrastructure."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.010",
            "attack_object_name": "AutoHotKey & AutoIT",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique T1059.010 targets scripts by using AutoIT and AutoHotKey to execute malicious code. Adversaries exploit vulnerabilities in scripts to perform unauthorized actions, such as executing payloads and embedding malware."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.010",
            "attack_object_name": "AutoHotKey & AutoIT",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by adversaries using AutoIT and AutoHotKey as tools to automate malicious tasks. These scripts can be leveraged to perform actions like keylogging or phishing, using the script as a means to execute further attacks on other assets."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.003",
            "attack_object_name": "Clear Command History",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like Bash or PowerShell, can be used to execute commands that clear command history. This makes scripts a tool that can be abused to facilitate the 'Clear Command History' technique, as they can automate the process of clearing or manipulating history files."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1202",
            "attack_object_name": "Indirect Command Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Indirect Command Execution' technique as they may be used as intermediaries to execute commands indirectly. This technique leverages scripts to perform command execution while evading detection and bypassing security controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1024",
            "attack_object_name": "Custom Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement custom cryptographic protocols. Adversaries may write scripts to execute custom encryption algorithms, using them as tools to hide command and control traffic. This misuse of scripts aligns with the technique's purpose of obfuscating communications."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1536",
            "attack_object_name": "Revert Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Revert Cloud Instance' technique if they are used to automate the process of reverting cloud instances or if they are involved in executing tasks that an adversary wants to hide by reverting the instance. Scripts may be used as tools to interact with cloud APIs to perform the revert operation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1091",
            "attack_object_name": "Replication Through Removable Media",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Replication Through Removable Media' if they are used as part of the payload that is executed when the media is accessed. For example, a malicious script could be placed on removable media and executed via Autorun features or social engineering tactics, leveraging the script to perform malicious activities on the target system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the 'Data from Local System' technique. Adversaries may leverage scripts to automate the collection of data from local systems, using scripting languages to interact with the file system and retrieve sensitive information. This makes scripts a tool or stepping stone in executing the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the technique T1140 as they may contain obfuscated or encoded data that adversaries seek to decode or deobfuscate. Scripts can be used as tools to execute deobfuscation routines, making them a means to further an attack by revealing hidden information."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137.005",
            "attack_object_name": "Outlook Rules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Outlook Rules technique as they might be executed as part of the malicious rules set by an adversary. For instance, a rule could be crafted to execute a script when a specific email is received, thus using the script as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562",
            "attack_object_name": "Impair Defenses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to impair defenses by automating the modification or disabling of security mechanisms. Adversaries may use scripts to execute commands that alter system configurations, disable security tools, or manipulate logging and monitoring processes. In this context, scripts serve as a tool to facilitate the impairment of defenses, rather than being the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1586.003",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate interactions with cloud accounts, such as deploying resources, managing configurations, or accessing cloud services. In the context of the 'Cloud Accounts' technique, scripts may be abused by adversaries to automate the process of compromising cloud accounts, exfiltrating data, or deploying malicious infrastructure once access to a cloud account is obtained."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1586.002",
            "attack_object_name": "Email Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with compromised email accounts to automate the sending of phishing emails or spam campaigns. While the script itself is not the direct target, it can be used as a tool to further exploit the compromised email accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.007",
            "attack_object_name": "Additional Local or Domain Groups",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of adding accounts to local or domain groups. An attacker might use a script to execute commands like 'net localgroup' or 'usermod' to add users to privileged groups, thereby leveraging the script as a tool to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.001",
            "attack_object_name": "Upload Malware",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Upload Malware technique when adversaries upload malicious scripts to third-party or adversary-controlled infrastructure. These scripts can include payloads, droppers, or backdoors that are intended to be executed by victims, thus directly compromising the script as an asset."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.001",
            "attack_object_name": "Upload Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Upload Malware technique as adversaries may leverage scripts to automate the process of uploading malware to various platforms. Scripts can be used to interact with APIs or automate tasks that facilitate the distribution and execution of malicious software, thus serving as a tool to further the adversary's objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted in a supply chain compromise, especially when adversaries manipulate source code repositories or open-source dependencies. By altering scripts, attackers can introduce malicious code that compromises the integrity and security of the script, leading to unauthorized execution or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in a supply chain compromise when they are used as a vector to deliver malicious payloads or facilitate further attacks. For example, a compromised script in a software update mechanism can be abused to execute additional malicious actions on the system, aiding in lateral movement or persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1190",
            "attack_object_name": "Exploit Public-Facing Application",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Exploit Public-Facing Application' when they are used as part of a web application or service that is exploited. For example, if a script is part of a web application that is vulnerable, an adversary might exploit the application to execute or manipulate the script maliciously, using it as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1558",
            "attack_object_name": "Steal or Forge Kerberos Tickets",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of stealing or forging Kerberos tickets. Attackers may use scripts to execute commands that interact with Kerberos tickets, such as using the 'klist' utility to list cached tickets or automate the process of ticket forgery, thus leveraging scripts as a tool in this attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1555",
            "attack_object_name": "Credentials from Password Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of extracting credentials from password stores. An adversary might use a script to search for and extract credentials from known storage locations, leveraging the script's ability to interact with system APIs or files."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1567",
            "attack_object_name": "Exfiltration Over Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to facilitate 'Exfiltration Over Web Service'. Scripts may be used to automate the process of sending data to web services, leveraging their ability to interact with system APIs and network resources. This makes them a tool for executing the exfiltration technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1219",
            "attack_object_name": "Remote Access Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with remote access software. An adversary may use scripts to automate the deployment or configuration of remote access tools, or to execute commands via these tools once access is established. Scripts can facilitate the misuse of remote access software by automating tasks that support the adversary's objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1560.002",
            "attack_object_name": "Archive via Library",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of archiving data using libraries. An adversary might leverage scripts to execute the 'Archive via Library' technique by embedding library calls within the script to compress or encrypt data. Thus, scripts are abused as a tool to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.003",
            "attack_object_name": "Thread Execution Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used as a tool to facilitate Thread Execution Hijacking. For example, a script written in a language like PowerShell or Python could automate the process of identifying target processes, suspending them, and injecting malicious code. In this way, scripts are abused to execute the steps necessary for the hijacking process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1079",
            "attack_object_name": "Multilayer Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement multilayer encryption as part of their execution. An adversary might use scripts to automate the process of establishing encrypted communication channels, leveraging the script's flexibility to execute encryption routines and manage communication protocols. Thus, scripts can be used as a tool to facilitate multilayer encryption, making them indirectly involved in the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Masquerading technique. An adversary might modify the name or metadata of a script to make it appear legitimate or benign, thereby using the script as a tool to evade detection and further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.011",
            "attack_object_name": "Application Shimming",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with Application Shimming to execute malicious content or automate the installation of shims. Adversaries may use scripts to facilitate the creation or deployment of shims, thus leveraging scripts as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be targeted by the Unsecured Credentials technique because they may contain hardcoded credentials or sensitive information that adversaries seek to exploit. If a script is insecurely stored or executed without proper access controls, it can be directly compromised to extract these credentials."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.010",
            "attack_object_name": "Port Monitors",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Port Monitors technique by being used to automate the process of modifying registry keys or deploying malicious DLLs. Scripts can facilitate the execution of this technique by interacting with system APIs to set up or modify port monitors, thus aiding in persistence or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.008",
            "attack_object_name": "Clear Mailbox Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, such as those written in PowerShell or AppleScript, can be abused to execute the 'Clear Mailbox Data' technique. Adversaries may use scripts to automate the process of modifying or deleting mailbox data, leveraging the script as a tool to carry out the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037.002",
            "attack_object_name": "Login Hook",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by the Login Hook technique as they are used as a tool to achieve persistence. The technique involves modifying system settings to execute a script upon user login, leveraging the script to perform malicious actions with elevated privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by content injection attacks where adversaries inject malicious content into scripts. This can lead to unauthorized execution of code, manipulation of script behavior, or compromise of sensitive data handled by the script."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1659",
            "attack_object_name": "Content Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in content injection scenarios by being used as a medium to deliver injected content to other systems. For example, a script that processes network traffic might be manipulated to include malicious payloads, thereby facilitating further attacks on downstream systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055",
            "attack_object_name": "Process Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Process Injection. For instance, a script written in a language like PowerShell or Python could be used to automate the process of injecting code into a target process. This makes scripts a tool or stepping stone in the execution of the Process Injection technique, leveraging their ability to interact with system APIs and execute commands."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1567.004",
            "attack_object_name": "Exfiltration Over Webhook",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Exfiltration Over Webhook' by automating the process of sending data to a webhook endpoint. An adversary could use a script to collect and stage data, then post it to a webhook URL, leveraging the script as a tool to perform the exfiltration."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1139",
            "attack_object_name": "Bash History",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Bash History technique if they are executed in a Bash shell and contain sensitive information like credentials. When such scripts are run, the commands may be recorded in the Bash history, which attackers can then exploit to gather sensitive data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1205",
            "attack_object_name": "Traffic Signaling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement Traffic Signaling by using them to send crafted packets or sequences that trigger specific responses on a network device or system. Scripts can automate the process of sending these signals, thus being used as a tool to facilitate the Traffic Signaling technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1503",
            "attack_object_name": "Credentials from Web Browsers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of extracting credentials from web browsers. For example, a script could be written to locate browser credential files, execute SQL queries to retrieve encrypted credentials, and use system API functions to decrypt them. In this context, scripts are abused as tools to facilitate the execution of the 'Credentials from Web Browsers' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218",
            "attack_object_name": "System Binary Proxy Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the System Binary Proxy Execution technique as they may be executed through trusted system binaries. This allows adversaries to misuse scripts to carry out malicious activities while bypassing security controls that rely on process or signature-based defenses."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1153",
            "attack_object_name": "Source",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Source' technique as it allows adversaries to execute scripts or functions within the current shell context. This can be leveraged to execute malicious code or manipulate the environment, using scripts as a means to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1038",
            "attack_object_name": "DLL Search Order Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to facilitate DLL Search Order Hijacking by automating the placement of malicious DLLs in strategic locations to exploit vulnerable programs. Scripts may be employed to manipulate file paths, create necessary directories, or deploy malicious DLLs, thus abusing the script's capability to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1050",
            "attack_object_name": "New Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'New Service' technique by being used as the executable payload for a newly created service. An adversary might leverage a script to perform malicious actions when the service is started, thus using the script as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.006",
            "attack_object_name": "Timestomp",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Timestomp technique as they may be used to automate the process of modifying file timestamps. An adversary might use a script to systematically apply Timestomp to multiple files, including scripts, to obscure malicious activity and evade forensic analysis."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1557.004",
            "attack_object_name": "Evil Twin",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Evil Twin' technique by automating the setup and management of malicious Wi-Fi access points. For example, scripts could be used to automate the process of setting up a Wi-Fi Pineapple, configuring network parameters, or capturing network traffic and credentials from connected devices."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1620",
            "attack_object_name": "Reflective Code Loading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like PowerShell, can be abused to facilitate Reflective Code Loading. For example, PowerShell scripts can use methods such as 'Assembly.Load()' to load code reflectively into memory, making scripts a tool or stepping stone in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1016.002",
            "attack_object_name": "Wi-Fi Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of Wi-Fi Discovery by executing commands or leveraging APIs that gather Wi-Fi information. Adversaries may use scripts to streamline the discovery process, making the script a tool for executing the Wi-Fi Discovery technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1480.002",
            "attack_object_name": "Mutual Exclusion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Mutual Exclusion technique (T1480.002) to manage the execution of malicious code. A script could be used to create or check for the presence of a mutex to determine whether to execute or terminate, thus leveraging the script as a tool to control malware behavior and ensure only a single instance runs at a time."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.011",
            "attack_object_name": "Ignore Process Interrupts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands that ignore process interrupts, using techniques like 'nohup' or PowerShell's '-ErrorAction SilentlyContinue'. This allows scripts to continue running despite system events that would typically interrupt them, thus misusing the script's execution environment for evasion purposes."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1611",
            "attack_object_name": "Escape to Host",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Escape to Host' technique as they may be used to execute commands or automate tasks that facilitate container escape. For example, a script could be used to automate the mounting of the host's filesystem or to execute system calls that aid in privilege escalation or container escape."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.009",
            "attack_object_name": "Shortcut Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Shortcut Modification technique as they can be set as the target of a modified shortcut. This allows adversaries to execute scripts indirectly through the shortcut, leveraging scripts as a tool to achieve persistence or execute malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1010",
            "attack_object_name": "Application Window Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to perform Application Window Discovery. Scripts, especially those executed via command and scripting interpreters, can be used to automate the process of enumerating open application windows. This makes scripts a tool that can be leveraged to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1032",
            "attack_object_name": "Standard Cryptographic Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement the 'Standard Cryptographic Protocol' technique. Scripts may be used to automate the process of encrypting communication channels or embedding cryptographic routines, thereby facilitating the concealment of command and control traffic. This makes scripts a tool in executing this technique, rather than a direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1087.003",
            "attack_object_name": "Email Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of gathering email addresses and accounts, especially through the use of PowerShell cmdlets like 'Get-GlobalAddressList'. In this context, scripts serve as a tool to execute the technique, leveraging their ability to interact with system APIs and automate tasks, thus being abused to facilitate the attack on email accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1497.003",
            "attack_object_name": "Time Based Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Time Based Evasion technique to introduce delays or manipulate time-based properties to evade detection. Scripts may include sleep commands or loops to delay execution, making them a tool for implementing this evasion strategy."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.003",
            "attack_object_name": "CMSTP",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The CMSTP technique can abuse scripts by executing them indirectly through malicious INF files. Scripts can be used as part of the payload executed by CMSTP.exe, leveraging the script's capabilities to perform malicious actions such as executing commands or bypassing security controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1563.001",
            "attack_object_name": "SSH Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of SSH Hijacking if they are used to automate the process of hijacking SSH sessions or if scripts are used to manage SSH keys and sessions. Adversaries might use scripts to facilitate lateral movement by automating the exploitation of SSH sessions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.002",
            "attack_object_name": "Disable Windows Event Logging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to execute commands that disable Windows Event Logging. Adversaries may write scripts in languages such as PowerShell or Bash to automate the process of disabling event logging, thereby abusing the script asset type to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1029",
            "attack_object_name": "Scheduled Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused as part of the Scheduled Transfer technique by being used to automate the scheduling of data exfiltration tasks. Adversaries may write scripts to execute data transfers at specific times or intervals, leveraging the script's ability to interact with system APIs and automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.002",
            "attack_object_name": "SMB/Windows Admin Shares",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the SMB/Windows Admin Shares technique to automate the interaction with network shares. For example, a script could be used to automate the transfer of files, execute commands remotely, or perform other administrative tasks over SMB, leveraging the access provided by the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1525",
            "attack_object_name": "Implant Internal Image",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Implant Internal Image' technique as they might be used to automate the process of implanting malicious code into cloud or container images. Scripts could facilitate the deployment or modification of images, thus serving as a tool to further the attack by embedding backdoors or other malicious elements within the images."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1572",
            "attack_object_name": "Protocol Tunneling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Protocol Tunneling by executing commands or scripts that establish tunnels, such as SSH tunneling or DNS over HTTPS. Scripts can automate the setup of these tunnels, making them a tool for adversaries to conceal malicious network traffic or access restricted systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.002",
            "attack_object_name": "Control Panel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Control Panel technique (T1218.002) as they can be used to automate the execution of malicious Control Panel items or to manipulate system settings programmatically. Scripts can serve as a tool to facilitate the execution of malicious payloads via the Control Panel."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.002",
            "attack_object_name": "Upload Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Upload Tool' technique as they may be uploaded to adversary-controlled infrastructure to be used as tools in further attacks. Scripts can be leveraged for various malicious purposes once uploaded, such as automating tasks or interacting with systems, making them a valuable asset for adversaries to misuse."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1004",
            "attack_object_name": "Winlogon Helper DLL",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Winlogon Helper DLL technique. An adversary might use a script to automate the modification of registry keys to load malicious DLLs or executables, facilitating persistence. Thus, scripts can serve as a tool to implement this technique, although they are not the primary target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the use of alternate authentication materials. For example, a script could be crafted to automate the process of injecting stolen authentication tokens or hashes into a system to gain unauthorized access. This makes scripts a tool for abusing the technique to move laterally or bypass access controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1076",
            "attack_object_name": "Remote Desktop Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with RDP to automate tasks such as establishing RDP connections, executing commands on remote systems, or deploying payloads. Adversaries might use scripts to facilitate RDP-based attacks by automating credential usage or session hijacking processes."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1011",
            "attack_object_name": "Exfiltration Over Other Network Medium",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the exfiltration of data over other network mediums. An adversary could use a script to automate the process of transferring data over a different network channel, such as WiFi or Bluetooth, thus leveraging the script as a tool to execute the exfiltration technique described in T1011."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1602.002",
            "attack_object_name": "Network Device Configuration Dump",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of accessing network device configurations. Adversaries may use scripts to interact with management tools and protocols like SNMP or SMI to extract configuration data from network devices, thereby abusing the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1589",
            "attack_object_name": "Gather Victim Identity Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Gather Victim Identity Information' by automating the collection of identity information. For example, scripts can be used to scrape websites, automate phishing campaigns, or interact with APIs to gather identity data, thereby serving as a tool to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1131",
            "attack_object_name": "Authentication Package",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Authentication Package technique (T1131) if they are used to automate the process of modifying the Windows Registry to include a malicious binary in the LSA Authentication Packages. This would involve using scripts to facilitate the persistence mechanism by interacting with system APIs or automating the registry modification process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1181",
            "attack_object_name": "Extra Window Memory Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Extra Window Memory Injection by automating the process of injecting code into the memory space of Windows-based processes. A script could be used to manipulate system APIs or automate the steps required to perform the injection, thus serving as a tool to carry out this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.004",
            "attack_object_name": "Disable or Modify System Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to disable or modify system firewalls by executing commands or scripts that alter firewall settings. This abuse allows adversaries to leverage scripts as tools to perform unauthorized modifications to firewall configurations, facilitating further attacks such as lateral movement or data exfiltration."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1560",
            "attack_object_name": "Archive Collected Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement the 'Archive Collected Data' technique. An adversary may use scripts to automate the process of compressing and encrypting collected data before exfiltration. Scripts provide a flexible and efficient way to perform these tasks, making them a useful tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1152",
            "attack_object_name": "Launchctl",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Launchctl technique as they can be executed through the launchctl command. Adversaries can use scripts as payloads to be executed by launchctl, leveraging the script's functionality to perform malicious activities such as persistence or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.003",
            "attack_object_name": "SIP and Trust Provider Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of SIP and Trust Provider Hijacking if they are used to automate the modification of registry values or the deployment of malicious DLLs to hijack trust provider components. Scripts can facilitate the execution of this technique by automating the steps required to subvert trust controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1483",
            "attack_object_name": "Domain Generation Algorithms",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement Domain Generation Algorithms. Adversaries may write scripts in languages like Python, Bash, or PowerShell to automate the generation of domains using DGAs. These scripts can be executed to facilitate command and control operations by dynamically generating domain names, thus leveraging the script as a tool for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1185",
            "attack_object_name": "Browser Session Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Browser Session Hijacking' if they are used to automate the injection of malicious code into a browser or to manipulate browser sessions. For example, a script could be used to automate the setup of a proxy for redirecting web traffic or to inject software into a browser to hijack sessions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021",
            "attack_object_name": "Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Remote Services technique to automate remote connections and execute commands on remote systems. Scripts may be used to facilitate remote access, automate tasks over remote sessions, or deploy malicious payloads once access is gained."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1071.003",
            "attack_object_name": "Mail Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to leverage 'Mail Protocols' (T1071.003) by embedding commands or data within email protocol traffic. An adversary might use a script to automate the sending or receiving of emails that contain malicious payloads or to exfiltrate data, thus misusing the script as a tool for communication over mail protocols."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556.007",
            "attack_object_name": "Hybrid Identity",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Hybrid Identity technique by being used to automate the modification or backdooring of authentication processes. For example, adversaries may use scripts to inject malicious DLLs or modify configuration files in systems that manage hybrid identities, thereby facilitating unauthorized access and persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1595.002",
            "attack_object_name": "Vulnerability Scanning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused as part of the Vulnerability Scanning process. Adversaries may use scripts to automate the scanning of systems for vulnerabilities. Scripts can facilitate the gathering of information about potential weaknesses, making them a tool leveraged by attackers to conduct vulnerability assessments and reconnaissance activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.009",
            "attack_object_name": "Cloud API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to abuse the Cloud API technique (T1059.009) by leveraging scripting languages like Python or PowerShell to interact with cloud APIs. This allows adversaries to automate the execution of malicious commands and actions within cloud environments, using scripts as a tool to facilitate these operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.015",
            "attack_object_name": "Electron Applications",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in JavaScript, can be abused within the Electron framework to execute malicious content. Adversaries may plant malicious JavaScript within Electron applications, leveraging the script's execution capabilities to perform malicious functions under the guise of legitimate applications."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.012",
            "attack_object_name": "Disable or Modify Linux Audit System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used by adversaries to automate the process of disabling or modifying the Linux audit system. For example, a script could be written to execute commands that stop the audit daemon or alter configuration files. In this way, scripts are abused as tools to facilitate the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1207",
            "attack_object_name": "Rogue Domain Controller",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could be abused in the context of the Rogue Domain Controller technique to automate the process of registering a rogue DC or manipulating Active Directory data. Scripts can facilitate the execution of commands needed to carry out this technique, making them a tool for furthering the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.006",
            "attack_object_name": "Code Signing Policy Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Code Signing Policy Modification' if adversaries use scripts to automate the modification of code signing policies. Scripts could be used to execute commands that disable or alter code signing enforcement, thereby allowing unsigned or malicious code to run."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1610",
            "attack_object_name": "Deploy Container",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the deployment of containers, including potentially malicious containers. Adversaries may leverage scripts to execute commands that deploy containers, making scripts a tool that can be abused to facilitate the Deploy Container technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1107",
            "attack_object_name": "File Deletion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the File Deletion technique by being used to automate the deletion of files. An adversary might leverage scripts to execute file deletion commands, thereby using scripts as a tool to facilitate the cleanup process and reduce their footprint after an intrusion."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1145",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the T1145 'Private Keys' technique by being used to automate the search and extraction of private keys from compromised systems. Adversaries may write or use scripts to locate and exfiltrate private keys, leveraging the script's ability to interact with the file system and automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1112",
            "attack_object_name": "Modify Registry",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute the Modify Registry technique (T1112). Adversaries may use scripts written in languages like PowerShell to automate the modification of the Windows Registry. This abuse allows scripts to act as a tool for persistence, configuration hiding, or lateral movement, leveraging the script's ability to interact with system APIs and execute commands."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1543.004",
            "attack_object_name": "Launch Daemon",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Launch Daemon technique as they might be used as the malicious payload executed by the Launch Daemon. Adversaries can configure a Launch Daemon to execute a script at startup, leveraging the script to perform malicious activities such as privilege escalation or data exfiltration."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1580",
            "attack_object_name": "Cloud Infrastructure Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Cloud Infrastructure Discovery' by being used to automate the discovery process. Adversaries may write or use scripts to interact with cloud provider APIs or CLIs to enumerate cloud resources. In this way, scripts serve as tools to facilitate the discovery of cloud infrastructure, leveraging their ability to automate tasks and interact with system APIs."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1555.003",
            "attack_object_name": "Credentials from Web Browsers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of extracting credentials from web browsers. An adversary could write a script to interact with browser files or APIs to retrieve stored credentials, leveraging the script as a tool to facilitate the attack on the browser's credential storage."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.008",
            "attack_object_name": "Path Interception by Search Order Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Path Interception by Search Order Hijacking' if they are used to execute other programs without specifying full paths. An adversary could place a malicious executable in the same directory as the script, causing the script to inadvertently execute the malicious payload due to the search order hijacking."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1491",
            "attack_object_name": "Defacement",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Defacement technique by being used to automate the process of altering web content or visual elements. An adversary could use scripts to systematically change or replace content on a website, leveraging the script's ability to interact with system APIs and automate repetitive tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1535",
            "attack_object_name": "Unused/Unsupported Cloud Regions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Unused/Unsupported Cloud Regions' technique. Adversaries may use scripts to automate the creation and management of cloud resources in these regions, facilitating activities such as resource hijacking or evading detection."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1557.003",
            "attack_object_name": "DHCP Spoofing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of DHCP spoofing by acting as rogue DHCP servers or generating DHCP messages to exhaust the DHCP allocation pool. Thus, scripts can be abused as tools to facilitate the DHCP Spoofing attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1155",
            "attack_object_name": "AppleScript",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The AppleScript technique specifically targets scripts as it involves the execution of AppleScript and other OSA language scripts. These scripts are the primary victim as they are directly executed to perform malicious activities such as interacting with applications, sending keystrokes, and potentially launching reverse shells."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1155",
            "attack_object_name": "AppleScript",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by the AppleScript technique as they are used as a tool to interact with open applications and perform actions like moving to remote machines or presenting fake dialog boxes. This misuse of scripts facilitates further attacks, making them a stepping stone for adversaries to execute additional malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1563",
            "attack_object_name": "Remote Service Session Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Remote Service Session Hijacking' if they are used to automate or facilitate the hijacking process. For example, a script could be used to monitor and capture session tokens or credentials, which are then used to hijack a session."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1505.003",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Shell technique specifically involves the use of scripts to backdoor web servers. These scripts, often written in languages like PHP, ASP, or JSP, are directly targeted by adversaries to establish persistent access to the server. The script itself is the primary victim as it is manipulated to execute unauthorized commands and provide a gateway for further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1484.001",
            "attack_object_name": "Group Policy Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Group Policy Modification by automating the process of modifying GPOs. For example, scripts like New-GPOImmediateTask can be used to automate the creation of malicious scheduled tasks by altering GPO settings. In this way, scripts serve as tools to facilitate the abuse of GPOs, enabling adversaries to execute further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1217",
            "attack_object_name": "Browser Information Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Browser Information Discovery. For example, a script could be used to automate the extraction of browser data once access is gained, leveraging the script's ability to interact with system APIs or file systems to gather and exfiltrate browser-related information."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.004",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be targeted by adversaries seeking to extract private keys that may be embedded within the script or accessed by the script during execution. This can lead to unauthorized access to sensitive cryptographic material."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.004",
            "attack_object_name": "Private Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the search and extraction of private keys from a system. They can be used to scan directories, parse files, and extract keys, thereby facilitating further attacks such as impersonation or unauthorized access to remote services."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.006",
            "attack_object_name": "Windows Remote Management",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Windows Remote Management technique as they can be executed remotely via WinRM. Adversaries may use scripts to automate tasks or execute malicious actions on remote systems through WinRM, leveraging the scripting capabilities of PowerShell or other scripting languages to perform their attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1011.001",
            "attack_object_name": "Exfiltration Over Bluetooth",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the 'Exfiltration Over Bluetooth' technique. An adversary may use a script to automate the process of transferring data over Bluetooth, leveraging the script to interact with system APIs or Bluetooth interfaces to exfiltrate data. Thus, scripts serve as a tool to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1078.001",
            "attack_object_name": "Default Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries who have obtained credentials for default accounts. Once an adversary gains access through a default account, they may use scripts to automate tasks, execute commands, or further their attack objectives, leveraging the script's capabilities to manipulate systems or data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1183",
            "attack_object_name": "Image File Execution Options Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Image File Execution Options Injection technique as a means to execute or automate the registry modifications required to set up IFEOs. This allows attackers to use scripts to facilitate persistence, privilege escalation, or defense evasion by automating the injection process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1085",
            "attack_object_name": "Rundll32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Rundll32 technique can abuse scripts by executing them indirectly. For example, it can execute scripts like JavaScript by leveraging the rundll32.exe utility to avoid detection. This makes scripts a tool or stepping stone in the attack, as the technique uses scripts to execute malicious code without directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1031",
            "attack_object_name": "Modify Existing Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used as tools to modify existing services. An adversary might leverage a script to automate the modification of service configurations, thereby abusing the script to facilitate the attack. This makes scripts a means to execute the 'Modify Existing Service' technique, rather than a direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.005",
            "attack_object_name": "Trap",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The 'Trap' technique directly targets scripts by exploiting their ability to handle interrupt signals. Adversaries can modify scripts to include trap commands that execute malicious code upon receiving specific signals, thereby compromising the script's integrity and functionality."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.006",
            "attack_object_name": "Dynamic Linker Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to set environment variables that facilitate Dynamic Linker Hijacking. For example, a script could be used to set the LD_PRELOAD or DYLD_INSERT_LIBRARIES environment variables to point to malicious libraries, thereby leveraging the script to execute the hijacking attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1136.001",
            "attack_object_name": "Local Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the creation of local accounts, especially if they are executed with sufficient privileges. An adversary could leverage scripts to programmatically execute commands that create local accounts, thus using the script as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1092",
            "attack_object_name": "Communication Through Removable Media",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Communication Through Removable Media' by being used to automate the transfer of commands and data between compromised systems. Scripts may be employed to facilitate the reading, writing, and execution of commands on removable media, thereby acting as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.001",
            "attack_object_name": "Clear Windows Event Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused to execute the 'Clear Windows Event Logs' technique. Adversaries may use scripts to automate the clearing of event logs, leveraging the script as a tool to further their attack by covering their tracks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1557.001",
            "attack_object_name": "LLMNR/NBT-NS Poisoning and SMB Relay",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of LLMNR/NBT-NS Poisoning and SMB Relay by being used to automate the process of responding to network traffic, capturing authentication materials, and relaying them to adversary-controlled systems. Tools like Responder, which are often script-based, can facilitate this attack by automating the poisoning and relay processes."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1222",
            "attack_object_name": "File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries using the File and Directory Permissions Modification technique. By altering permissions on script files, adversaries can gain unauthorized access, modify, or execute the scripts, potentially leading to unauthorized execution of code or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1222",
            "attack_object_name": "File and Directory Permissions Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries as a means to further an attack. By modifying permissions, adversaries can misuse scripts to execute malicious activities, such as persistence or lateral movement, by leveraging the script's capabilities to interact with system APIs or automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.001",
            "attack_object_name": "LSASS Memory",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of dumping LSASS memory or executing tools like Mimikatz to extract credentials. Thus, scripts can be abused as a tool to facilitate the LSASS Memory attack technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.001",
            "attack_object_name": "At (Linux)",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'At (Linux)' technique as they can be scheduled for execution using the 'at' utility. This allows adversaries to leverage scripts for persistence, privilege escalation, or lateral movement by scheduling their execution at specific times or under specific conditions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1179",
            "attack_object_name": "Hooking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Hooking technique when they are used to automate tasks that involve API calls. An adversary could use a script to implement hooking mechanisms, redirecting API calls to execute malicious code or capture sensitive information. Thus, scripts can serve as a tool to facilitate the hooking of processes."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1595",
            "attack_object_name": "Active Scanning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused during Active Scanning (T1595) as they can be used to automate the scanning process. Adversaries may write scripts in languages like Python, Bash, or PowerShell to perform systematic scans of network ranges, identify open ports, or fingerprint services, thereby leveraging scripts as tools to facilitate the reconnaissance phase of an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.011",
            "attack_object_name": "Plist Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with Plist Modification when adversaries use scripts to automate the modification of plist files. This can facilitate persistence by ensuring that malicious configurations are consistently applied, leveraging scripts as a tool to manipulate plist files."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548",
            "attack_object_name": "Abuse Elevation Control Mechanism",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands or scripts with elevated privileges by exploiting elevation control mechanisms. This makes scripts a tool for achieving privilege escalation, aligning with the 'Abuse Elevation Control Mechanism' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1134.002",
            "attack_object_name": "Create Process with Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the 'Create Process with Token' technique. For example, a script could be used to automate the process of obtaining a token and creating a new process with it, thereby misusing the script as a tool to execute this privilege escalation technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548.001",
            "attack_object_name": "Setuid and Setgid",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Setuid and Setgid technique if they are executed by a binary that has setuid or setgid bits set. In such cases, the script can run with elevated privileges, potentially allowing an adversary to misuse the script to perform unauthorized actions or escalate privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.004",
            "attack_object_name": "Winlogon Helper DLL",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Winlogon Helper DLL technique. An adversary could use a script to automate the modification of registry keys or to deploy malicious DLLs or executables that are executed by Winlogon. In this way, scripts serve as a tool to facilitate the attack, rather than being the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.003",
            "attack_object_name": "Distributed Component Object Model",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the DCOM technique as they may be used to automate the execution of DCOM commands or payloads. For example, a script could be used to execute DCOM commands to perform lateral movement or execute shellcode on remote systems, leveraging the DCOM interface as a stepping stone."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1042",
            "attack_object_name": "Change Default File Association",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Change Default File Association' technique. An adversary can alter file associations to execute a script when a file with a certain extension is opened. This misuse allows scripts to be executed in an unintended manner, leveraging the script as a tool to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1117",
            "attack_object_name": "Regsvr32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Regsvr32 technique as it can load and execute COM scriptlets, which are essentially scripts. This allows adversaries to misuse scripts as a means to execute malicious code under the guise of a legitimate process, thereby facilitating evasion of security controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1110.003",
            "attack_object_name": "Password Spraying",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of a password spraying attack if they are used to automate the process of attempting logins with commonly used passwords across multiple accounts. Scripts can facilitate the execution of the password spraying technique by automating the login attempts against various services and accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1090.002",
            "attack_object_name": "External Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the External Proxy technique by being used to automate the setup and management of proxy configurations. Scripts may be used to configure systems to route traffic through external proxies, thus facilitating the adversary's goal of obfuscating command and control communications."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1056.003",
            "attack_object_name": "Web Portal Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Web Portal Capture technique by embedding malicious code within the script that runs on a web portal. This code can capture and transmit user credentials entered into the portal, effectively using the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1589.002",
            "attack_object_name": "Email Addresses",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of gathering email addresses from various sources, such as web scraping or querying APIs. In this way, scripts can be abused as tools to facilitate the execution of the T1589.002 technique, making them a means to further the attack rather than a direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1164",
            "attack_object_name": "Re-opened Applications",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Re-opened Applications' technique if an adversary includes a script as the malicious executable in the plist files. This allows the script to be executed each time the system reboots, leveraging the script as a tool for persistence or further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1054",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused to implement Indicator Blocking. Adversaries may use scripts to automate the process of disabling or redirecting telemetry settings, such as using PowerShell cmdlets to interfere with Event Tracing for Windows (ETW) or modifying registry settings. Thus, scripts serve as a tool to execute the Indicator Blocking technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1108",
            "attack_object_name": "Redundant Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Redundant Access' technique as they may be used to automate the deployment or management of redundant access mechanisms, such as setting up web shells or managing remote access tools. Scripts can facilitate the persistence of access by automating tasks that support the adversary's ability to maintain access to a network."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1193",
            "attack_object_name": "Spearphishing Attachment",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Spearphishing Attachment technique if a script is included as part of the malicious payload. Once a user opens the attachment, a script could be executed to perform malicious activities such as downloading additional payloads, executing commands, or interacting with the system APIs. Thus, scripts can be leveraged as a tool to further the attack initiated by the spearphishing attachment."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.005",
            "attack_object_name": "Cached Domain Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the extraction of cached domain credentials. For example, adversaries may use scripts to execute tools like Mimikatz or secretsdump.py to extract cached credentials from a system. In this context, scripts serve as a tool to facilitate the attack on cached credentials."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.004",
            "attack_object_name": "SSH Authorized Keys",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the modification of SSH authorized_keys files, thereby abusing the script's capabilities to facilitate unauthorized access and persistence. Adversaries may use scripts to add their own keys to the authorized_keys file, leveraging the script as a tool to execute this attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.012",
            "attack_object_name": "Image File Execution Options Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Image File Execution Options Injection technique. An attacker might use a script to automate the modification of registry keys to set up IFEO debuggers, thus leveraging the script as a tool to facilitate the attack on executable binaries."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.008",
            "attack_object_name": "Odbcconf",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Odbcconf technique to facilitate the execution of malicious payloads. An adversary might use a script to automate the process of executing Odbcconf.exe with malicious parameters, thereby leveraging the script as a tool to exploit the Odbcconf utility."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1593.002",
            "attack_object_name": "Search Engines",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Search Engines' if adversaries use search engines to find exposed scripts or script-related information online. This can include searching for scripts that are unintentionally exposed on the internet, which may contain sensitive information or vulnerabilities that can be exploited in further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1177",
            "attack_object_name": "LSASS Driver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the exploitation of vulnerabilities in the LSASS process, such as deploying malicious drivers or executing code that interacts with LSASS. Thus, scripts may be abused as tools to facilitate attacks on the LSASS process, aligning with the LSASS Driver technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548.005",
            "attack_object_name": "Temporary Elevated Cloud Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Temporary Elevated Cloud Access' by being used to automate the process of requesting or exploiting temporarily elevated permissions in cloud environments. Scripts can be written to interact with cloud APIs to request just-in-time access or impersonate accounts, thereby facilitating the abuse of cloud permissions and roles."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1125",
            "attack_object_name": "Video Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Video Capture technique. Malicious scripts may interact with operating system APIs or application interfaces to control video capture devices and record video or images. These scripts act as tools to automate the process of capturing and potentially exfiltrating video data, leveraging the script's ability to execute commands and interact with system resources."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1144",
            "attack_object_name": "Gatekeeper Bypass",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of removing the quarantine attribute from downloaded files, effectively bypassing Gatekeeper checks. This makes scripts a tool that can be abused to facilitate the Gatekeeper Bypass technique, allowing unauthorized execution of potentially malicious applications."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1045",
            "attack_object_name": "Software Packing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute packed malicious code. While the script itself is not packed, it can be used to unpack and execute packed executables, leveraging the script as a tool to facilitate the execution of malicious payloads that have been packed to evade detection."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1016",
            "attack_object_name": "System Network Configuration Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to perform 'System Network Configuration Discovery' by executing commands or using libraries that gather network configuration details. Adversaries may use scripts to automate the discovery process, leveraging them as tools to extract network information for further malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1578.003",
            "attack_object_name": "Delete Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the deletion of cloud instances. An adversary might use a script to programmatically delete cloud instances as part of their evasion strategy, thereby misusing the script as a tool to execute the 'Delete Cloud Instance' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1593.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be targeted by adversaries searching public code repositories for sensitive information such as credentials or API keys embedded within the scripts. This information can be used to compromise the script or the systems it interacts with."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.005",
            "attack_object_name": "Executable Installer File Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with this technique if they are used to automate the process of replacing legitimate binaries with malicious ones. For example, a script could be used to place untrusted code into directories with weak permissions or to automate the exploitation of installer file permissions weaknesses, thereby facilitating privilege escalation or persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.008",
            "attack_object_name": "Accessibility Features",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Accessibility Features technique. An adversary might use a script to automate the process of replacing accessibility feature binaries or modifying registry entries to exploit these features for persistence or privilege escalation. Thus, scripts can be leveraged as a tool to facilitate this attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1496.002",
            "attack_object_name": "Bandwidth Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Bandwidth Hijacking by being used to automate the process of hijacking bandwidth. For example, scripts could be used to deploy malware that turns a system into part of a botnet, which then utilizes the system's network bandwidth for malicious activities such as denial of service attacks or proxyjacking. In this way, scripts serve as a tool to facilitate the hijacking of bandwidth."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1504",
            "attack_object_name": "PowerShell Profile",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The PowerShell Profile technique directly targets scripts, specifically PowerShell scripts, by modifying them to include malicious commands or functions. This results in the script being compromised as it is executed whenever a PowerShell session starts, potentially leading to unauthorized execution and privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1504",
            "attack_object_name": "PowerShell Profile",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, such as PowerShell profiles, are abused by adversaries as a means to gain persistence and elevate privileges. By modifying the script, adversaries can ensure that their malicious code is executed every time a PowerShell session is initiated, using the script as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1198",
            "attack_object_name": "SIP and Trust Provider Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the SIP and Trust Provider Hijacking technique if they are used to execute or facilitate the execution of malicious code that exploits these hijacked trust mechanisms. For example, a script could be used to load a malicious DLL that has been crafted to hijack SIP or trust provider components, thus abusing the script to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1087",
            "attack_object_name": "Account Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to perform Account Discovery (T1087). For example, adversaries may write or use existing scripts to automate the process of enumerating user accounts on a system. Scripts can leverage built-in commands or APIs to gather account information, making them a tool for executing the Account Discovery technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1090",
            "attack_object_name": "Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Proxy technique (T1090) as they can be used to automate the setup and management of proxy connections. Scripts may contain instructions to configure or initiate proxy services, thus acting as a tool to facilitate the redirection of network traffic or to manage command and control communications, aligning with the objectives of the Proxy technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts are directly targeted by adversaries using the Command and Scripting Interpreter technique. This technique involves executing commands and scripts to exploit vulnerabilities within the script itself, potentially leading to unauthorized execution, privilege escalation, or data breaches. Scripts are the primary victim as they are manipulated to perform unintended actions or leak sensitive information."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by adversaries as a means to further an attack using the Command and Scripting Interpreter technique. While the script itself may not be the primary victim, it is leveraged to execute malicious activities such as lateral movement, persistence, or evasion. Adversaries may use scripts to automate tasks or interact with system APIs to facilitate their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.006",
            "attack_object_name": "Indicator Blocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like PowerShell, can be abused to execute commands that block or alter indicators. For example, a PowerShell script could be used to modify registry settings or execute commands that disable event logging or interfere with telemetry processes, thereby facilitating the 'Indicator Blocking' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1136.002",
            "attack_object_name": "Domain Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1136.002 by automating the creation of domain accounts. Adversaries may use scripts to execute commands like 'net user /add /domain' to programmatically create domain accounts, thus leveraging scripts as tools to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1482",
            "attack_object_name": "Domain Trust Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of Domain Trust Discovery. Adversaries may write scripts to execute commands or use APIs that gather information about domain trusts, leveraging the script's capabilities to facilitate the discovery process. This makes scripts a tool for executing the technique rather than a target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1558.001",
            "attack_object_name": "Golden Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Golden Ticket technique by automating the process of interacting with the Key Distribution Center (KDC) to forge Kerberos tickets or to automate the extraction of the KRBTGT password hash. Scripts may be used as tools to facilitate the execution of the Golden Ticket attack, leveraging their ability to automate complex tasks and interact with system APIs."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1175",
            "attack_object_name": "Component Object Model and Distributed COM",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to interact with COM and DCOM interfaces, potentially abusing these components for executing commands or payloads. Adversaries may use scripts to automate the exploitation of COM and DCOM for lateral movement or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1020",
            "attack_object_name": "Automated Exfiltration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Automated Exfiltration (T1020) as they can be used to automate the process of data exfiltration. Scripts can be written to collect, package, and send data out of the network, thus being leveraged as a tool to facilitate the exfiltration process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1592.004",
            "attack_object_name": "Client Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to gather client configuration information by executing commands or scripts that retrieve system details. Adversaries may leverage scripts to automate the collection of such information, making scripts a tool in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.007",
            "attack_object_name": "Disable or Modify Cloud Firewall",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the process of disabling or modifying cloud firewalls. By writing and executing scripts, adversaries can efficiently introduce new firewall rules or modify existing ones to facilitate unauthorized access and movement within a cloud environment."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.002",
            "attack_object_name": "Right-to-Left Override",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the RTLO technique as they can be renamed using the RTLO character to appear as benign file types. This can lead to scripts being executed under false pretenses, leveraging the script as a tool to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588.001",
            "attack_object_name": "Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by malware obtained through T1588.001. Adversaries may use scripts as a means to execute or deploy malware, automate malicious activities, or interact with compromised systems. Thus, scripts serve as a tool or stepping stone in the execution of malware-related activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070",
            "attack_object_name": "Indicator Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Indicator Removal technique (T1070) to automate the process of deleting or modifying artifacts. Scripts can be crafted to execute commands that remove logs, clear command histories, or alter other indicators of compromise, thereby aiding in evasion and hindering forensic analysis."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1048.001",
            "attack_object_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement or facilitate the exfiltration of data using symmetric encryption over non-C2 protocols. An adversary might use a script to automate the process of encrypting data and sending it over a network, leveraging the script as a tool to execute the exfiltration technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137.001",
            "attack_object_name": "Office Template Macros",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly VBA macros, are abused by the Office Template Macros technique. Adversaries insert malicious scripts into Office templates to execute code when the application starts, leveraging scripts as a tool for persistence and further attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1213.001",
            "attack_object_name": "Confluence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Confluence technique if they are stored within Confluence repositories. Adversaries may leverage scripts found in these repositories to further their attacks, such as using them to automate tasks, manipulate data, or interact with system APIs, potentially leading to unauthorized access or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1550.003",
            "attack_object_name": "Pass the Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of 'Pass the Ticket' attacks by executing commands that leverage stolen Kerberos tickets for lateral movement. Scripts can facilitate the misuse of valid Kerberos tickets to authenticate and access resources without needing the actual credentials."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1609",
            "attack_object_name": "Container Administration Command",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Container Administration Command' can target scripts by executing them within a container. Adversaries may specify an entrypoint during container deployment that executes a script, or they may use commands like 'docker exec' or 'kubectl exec' to run scripts within running containers. This results in the script being the primary victim as it is directly executed to achieve the adversary's objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1609",
            "attack_object_name": "Container Administration Command",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Container Administration Command' technique as a means to further an attack. Once executed within a container, scripts can be used to automate malicious activities, manipulate data, or interact with system APIs, potentially leading to lateral movement, persistence, or evasion within the containerized environment."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1083",
            "attack_object_name": "File and Directory Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the File and Directory Discovery technique to automate the enumeration of files and directories. Scripts can be written or executed to perform these discovery tasks, leveraging their ability to interact with system APIs and execute commands that list files and directories. This makes scripts a useful tool for adversaries to gather information about the file system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1568",
            "attack_object_name": "Dynamic Resolution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement dynamic resolution mechanisms. Adversaries may use scripts to automate the process of dynamically resolving domain names or IP addresses to maintain communication with command and control servers. In this context, scripts serve as tools to facilitate the dynamic resolution process, making them susceptible to abuse by this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.004",
            "attack_object_name": "Masquerade Task or Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Masquerade Task or Service' technique by being used to create or modify tasks or services that appear legitimate. An adversary may use a script to automate the creation of a masqueraded task or service, leveraging the script as a tool for this purpose."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.004",
            "attack_object_name": "Asynchronous Procedure Call",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to facilitate APC injection. For instance, a script written in a language like PowerShell or Python could be used to automate the process of finding a target process, obtaining the necessary handles, and injecting code into the APC queue. In this scenario, the script is not the target but is abused as a tool to carry out the APC injection attack on a process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1020.001",
            "attack_object_name": "Traffic Duplication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Traffic Duplication by automating the configuration of network devices to enable traffic mirroring or redirection. Adversaries may use scripts to interact with network APIs or execute commands that modify network settings, thus leveraging scripts as a tool to implement the Traffic Duplication technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1138",
            "attack_object_name": "Application Shimming",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by Application Shimming when adversaries use scripts to automate the deployment or manipulation of shims. Scripts may be used to install or configure shims that allow for privilege escalation or bypassing security controls, leveraging the script as a tool to facilitate these actions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1647",
            "attack_object_name": "Plist File Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the modification of plist files as part of the Plist File Modification technique. An adversary may use a script to systematically alter plist files to achieve persistence or evade detection, thereby abusing the script as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.009",
            "attack_object_name": "AppCert DLLs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the AppCert DLLs technique by being used to automate the deployment or configuration of malicious DLLs. Scripts may also be used to manipulate the registry keys associated with AppCert DLLs, facilitating persistence or privilege escalation. In this context, scripts serve as a tool to further the attack by interacting with system components that enable the AppCert DLLs technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1191",
            "attack_object_name": "CMSTP",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the CMSTP technique as they can be embedded within INF files or COM scriptlets that CMSTP.exe executes. This abuse allows adversaries to execute arbitrary scripts or commands, leveraging the legitimate CMSTP.exe process to bypass security controls such as AppLocker."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1188",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Multi-hop Proxy technique (T1188) by being used to automate the setup of proxy chains. Scripts written in languages like Python or Bash can be employed to configure and manage multiple proxy servers, facilitating the chaining process and enabling adversaries to obscure their true origin."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1114.003",
            "attack_object_name": "Email Forwarding Rule",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the creation or modification of email forwarding rules. Adversaries might use scripts to programmatically set up these rules, leveraging the script as a tool to abuse email systems for information gathering or persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1074",
            "attack_object_name": "Data Staged",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Data Staged' technique to automate the process of collecting and staging data. Adversaries may use scripts to manipulate, organize, and prepare data for exfiltration, leveraging the flexibility and automation capabilities of scripting languages to facilitate data staging operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1649",
            "attack_object_name": "Steal or Forge Authentication Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the 'Steal or Forge Authentication Certificates' technique. Adversaries may use scripts to automate the process of extracting certificates from systems or to interact with certificate services for malicious purposes. Scripts can also be used to deploy tools or commands that steal or forge certificates, making them a useful tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.005",
            "attack_object_name": "Device Registration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Device Registration technique if they are used to automate the process of registering devices to an adversary-controlled account. For example, a script could be used to programmatically enroll devices in a device management system or MFA system, thereby facilitating unauthorized access or persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1049",
            "attack_object_name": "System Network Connections Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that perform network discovery, such as using 'netstat' or other network utilities within a script. This allows adversaries to automate the process of gathering network connection information, leveraging the script as a tool to further their reconnaissance efforts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584",
            "attack_object_name": "Compromise Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Compromise Infrastructure' by being used as tools to automate the compromise process or to manage compromised infrastructure. For example, scripts could be used to deploy malware, manage botnets, or automate interactions with compromised servers, thus facilitating the use of compromised infrastructure in further attack phases."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.005",
            "attack_object_name": "Mark-of-the-Web Bypass",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Mark-of-the-Web Bypass technique when they are included in container files that are not tagged with the MOTW after extraction. This allows scripts to be executed without the usual security warnings or restrictions, thus abusing the script as a tool to execute potentially malicious actions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1064",
            "attack_object_name": "Scripting",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts are directly targeted by adversaries to execute unauthorized actions, automate tasks, and manipulate data. They can be exploited through code injection attacks, privilege escalation, and data breaches, making them primary victims of such attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1064",
            "attack_object_name": "Scripting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are often abused by adversaries to facilitate further attacks, such as lateral movement, persistence, and evasion. They can be used to bypass security mechanisms and execute malicious activities on other assets, making them tools for advancing an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1612",
            "attack_object_name": "Build Image on Host",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Build Image on Host' technique as they may be used to automate the process of building a container image. An adversary could use scripts to send remote build requests to the Docker API, including scripts within the Dockerfile to download and execute malicious code, thereby leveraging scripts as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1051",
            "attack_object_name": "Shared Webroot",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Shared Webroot technique as they may be uploaded to a web server's shared directory and executed to perform malicious actions. This abuse leverages the script as a tool to execute code on the server, often leading to further compromise."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.002",
            "attack_object_name": "Portable Executable Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Portable Executable Injection. For example, a script written in a language like PowerShell or Python could be used to automate the process of injecting a PE into a target process. The script acts as a tool to perform the injection, leveraging system APIs to execute the attack. Thus, while the script is not the direct victim, it is misused to carry out the PE injection attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.012",
            "attack_object_name": "Verclsid",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Verclsid technique when they are used as payloads or components within COM objects. Adversaries may use scripts to perform malicious actions once executed via the verclsid.exe process, leveraging the script's capabilities to interact with system APIs or automate tasks maliciously."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1586",
            "attack_object_name": "Compromise Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Compromise Accounts' technique by automating the process of account compromise. For example, scripts may be used to automate phishing attacks, brute force attempts, or to manage and deploy compromised credentials across multiple accounts or services. Thus, scripts serve as a tool to facilitate the compromise of accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1569.001",
            "attack_object_name": "Launchctl",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the execution of Launchctl commands, thereby abusing the script asset type to facilitate the execution of malicious commands or programs via launchd. This makes scripts a tool or stepping stone for adversaries to misuse Launchctl for executing Launch Agents or Daemons."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.005",
            "attack_object_name": "Botnet",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of a Botnet by being used to automate the compromise of systems or to execute commands across the botnet. Scripts may be used to deploy malware, establish communication with C2 servers, or perform other tasks that facilitate the operation and maintenance of a botnet."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.008",
            "attack_object_name": "Network Device CLI",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the technique T1059.008 'Network Device CLI' as they can be used to automate and execute commands on network devices through their CLIs. This allows adversaries to extend the functionality of the CLI and potentially misuse scripts to perform unauthorized actions on network devices."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.003",
            "attack_object_name": "Bash History",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Bash History technique if they contain sensitive information like credentials that are executed in the command line. The history of these script executions might be stored in the bash history file, which can then be accessed by adversaries to extract sensitive data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.010",
            "attack_object_name": "Downgrade Attack",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by downgrade attacks when adversaries attempt to execute older, less secure versions of scripting interpreters like PowerShell. This allows them to bypass security features such as Script Block Logging, thereby compromising the script's execution environment and potentially leading to unauthorized execution of malicious scripts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1559.003",
            "attack_object_name": "XPC Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the XPC Services technique by being used to send malicious requests to XPC services. An adversary could leverage a script to interact with XPC services, potentially exploiting vulnerabilities in the service to execute malicious content or escalate privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1497",
            "attack_object_name": "Virtualization/Sandbox Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement Virtualization/Sandbox Evasion techniques. For instance, scripts can contain logic to detect virtual environments or sandboxes and alter their behavior accordingly, facilitating evasion of security analysis."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1102",
            "attack_object_name": "Web Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to interact with web services as part of the Web Service technique (T1102). Adversaries may use scripts to automate the process of communicating with external web services for data exfiltration or C2 communication, leveraging the script's ability to execute commands and interact with APIs."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the 'Credentials In Files' technique as they may contain hardcoded credentials or configuration files with sensitive information. Adversaries may search scripts for embedded passwords or API keys, making scripts a primary victim of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1568.003",
            "attack_object_name": "DNS Calculation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement DNS Calculation techniques. Adversaries may use scripts to automate the process of performing calculations on DNS responses to determine IP addresses and ports for command and control traffic. This misuse of scripts facilitates the execution of the DNS Calculation technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.005",
            "attack_object_name": "Mshta",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by the Mshta technique as they are executed through mshta.exe to perform malicious activities. The technique leverages scripts to bypass security controls and execute code, making the script a tool in the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.015",
            "attack_object_name": "Login Items",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Login Items' technique as they can be used to automate the addition of malicious executables to login items. This allows adversaries to leverage scripting languages like AppleScript to manipulate login items and achieve persistence or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608",
            "attack_object_name": "Stage Capabilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Stage Capabilities' technique as they may be uploaded or staged on compromised or adversary-controlled infrastructure to facilitate further attacks. Scripts can be used to automate tasks, deploy malware, or interact with systems, making them a valuable tool for adversaries in staging capabilities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.005",
            "attack_object_name": "Link Target",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly client-side scripts like JavaScript, can be abused in the 'Link Target' technique. Adversaries may use scripts to dynamically serve content or execute malicious actions when a link is accessed. This abuse involves leveraging scripts to enhance the effectiveness of the malicious link, such as by cloaking the true destination or serving different content based on user interaction."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1104",
            "attack_object_name": "Multi-Stage Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Multi-Stage Channels technique as they may be used to automate the setup of command and control channels or to execute commands in different stages of the attack. Scripts can facilitate the transition between stages by downloading additional payloads, executing commands, or establishing communication with subsequent command and control servers."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1657",
            "attack_object_name": "Financial Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Financial Theft' by being used as tools to automate or facilitate the theft process. For example, scripts may be used to automate unauthorized transfers of funds, execute social engineering attacks, or deploy ransomware that leads to financial extortion. Thus, scripts can serve as a means to carry out the financial theft, making them susceptible to abuse in this context."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1480",
            "attack_object_name": "Execution Guardrails",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Execution Guardrails technique to ensure that malicious code embedded within the script only executes under specific conditions. This allows adversaries to leverage scripts as a means to execute targeted attacks while minimizing exposure and avoiding detection in unintended environments."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1619",
            "attack_object_name": "Cloud Storage Object Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute the 'Cloud Storage Object Discovery' technique. Adversaries may write or use scripts to automate the process of enumerating objects in cloud storage by leveraging cloud service provider APIs. In this context, scripts serve as tools to facilitate the discovery of cloud storage objects, making them an asset that can be abused for this purpose."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1606.001",
            "attack_object_name": "Web Cookies",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the process of forging web cookies. Adversaries may use scripts to automate the generation of forged cookies by leveraging known cookie generation methods or tools. Scripts can facilitate the manipulation of cryptographic values or automate interactions with web applications to produce and use forged cookies, making them a tool in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1654",
            "attack_object_name": "Log Enumeration",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like PowerShell, can be used to automate the process of log enumeration. Adversaries may leverage scripts to systematically access, collect, and export log data, using the script as a tool to facilitate the enumeration process. Thus, scripts can be abused to execute the Log Enumeration technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1134.001",
            "attack_object_name": "Token Impersonation/Theft",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Token Impersonation/Theft by executing them with elevated privileges once a token has been impersonated. This allows adversaries to misuse scripts to perform actions under the context of a higher-privileged user, facilitating further malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1567.001",
            "attack_object_name": "Exfiltration to Code Repository",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the exfiltration of data to code repositories. An adversary might use a script to automate the process of collecting data and uploading it to a code repository, leveraging the script as a tool to execute the exfiltration technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.007",
            "attack_object_name": "Cloud Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Cloud Services' technique by being used to automate the process of logging into cloud services or managing cloud resources. Adversaries can leverage scripts to execute cloud service commands, such as using PowerShell or CLI scripts to connect to cloud accounts and perform actions, thus making scripts a tool for furthering the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1205.001",
            "attack_object_name": "Port Knocking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to implement or automate port knocking sequences. Adversaries may leverage scripts to send the specific sequence of packets required to trigger port knocking, thereby abusing the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.012",
            "attack_object_name": "LNK Icon Smuggling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the LNK Icon Smuggling technique post-compromise. Malicious scripts may execute LNK files on an infected host to download additional payloads. In this context, scripts are used as a tool to facilitate further attacks by executing the malicious LNK file."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1583.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Web Services' technique (T1583.006) as they may be used to automate interactions with web services. Scripts can be employed to send or receive data to/from these services, facilitating activities such as data exfiltration or command and control operations. Thus, scripts can be misused as tools to further the adversary's objectives when leveraging web services."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1528",
            "attack_object_name": "Steal Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to steal application access tokens if they are used to automate interactions with APIs or services that require such tokens. An adversary could modify or inject malicious code into a script to capture and exfiltrate tokens during execution, leveraging the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1598.002",
            "attack_object_name": "Spearphishing Attachment",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by spearphishing attachments when adversaries include malicious scripts within attachments. These scripts can be executed by the recipient, leading to unauthorized execution and potential compromise of the system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.001",
            "attack_object_name": "Additional Cloud Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like Python, Bash, or PowerShell, can be abused to automate the process of adding additional cloud credentials. Adversaries may use scripts to interact with cloud APIs or command-line interfaces to programmatically add credentials, thereby facilitating persistence and privilege escalation within cloud environments."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1204",
            "attack_object_name": "User Execution",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the User Execution technique when adversaries craft malicious scripts and rely on users to execute them. This can happen through social engineering tactics where users are tricked into running a script that appears legitimate but contains malicious code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1204",
            "attack_object_name": "User Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the User Execution technique when they are used as a vehicle to execute other malicious actions. For example, a script may be used to download and execute additional payloads or to perform actions on behalf of the adversary once the user has been tricked into executing the script."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1491.001",
            "attack_object_name": "Internal Defacement",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Internal Defacement technique as tools to automate the defacement process. An adversary might use scripts to systematically alter content across multiple systems or web pages, leveraging the script's ability to interact with system APIs or automate tasks to efficiently carry out the defacement."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.002",
            "attack_object_name": "Hidden Users",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that manipulate user account visibility, such as using command-line utilities or modifying system files and settings. Thus, scripts can be leveraged as tools to implement the 'Hidden Users' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1134.003",
            "attack_object_name": "Make and Impersonate Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of making and impersonating tokens. An adversary might write a script to execute the necessary API calls or commands to create new tokens and assign them to threads, thereby abusing the script to facilitate privilege escalation or bypass access controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.006",
            "attack_object_name": "Group Policy Preferences",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the process of gathering and decrypting credentials from Group Policy Preference XML files. Tools and scripts like Get-GPPPassword and gpprefdecrypt.py are specifically used to exploit this technique, leveraging scripts as a means to execute the attack on the Group Policy Preferences."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1196",
            "attack_object_name": "Control Panel Items",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could be abused to execute Control Panel items programmatically as part of a larger attack chain. For example, a script might be used to automate the execution of a malicious Control Panel item, leveraging the script's ability to interact with system APIs and execute commands."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1048.002",
            "attack_object_name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Exfiltration Over Asymmetric Encrypted Non-C2 Protocol' by being used to automate the process of data exfiltration. Scripts can be written to leverage asymmetric encryption protocols to securely transmit data to an external location, thus serving as a tool for executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1087.004",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that leverage cloud account enumeration techniques. For example, a script could be written to automate the use of cloud service command-line interfaces (CLIs) to list cloud accounts, thus aiding in the execution of the 'Cloud Account' technique. In this context, scripts serve as tools to facilitate the enumeration of cloud accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1057",
            "attack_object_name": "Process Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Process Discovery (T1057) as they can be used to automate the execution of commands that gather process information. For example, a PowerShell script might be used to execute 'Get-Process' to list running processes, aiding in reconnaissance or furthering an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.003",
            "attack_object_name": "Impair Command History Logging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands that impair command history logging. For instance, a script could be used to automate the process of setting environment variables or executing commands that prevent the logging of command history, thus facilitating stealthy operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.004",
            "attack_object_name": "Launchd",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Launchd technique as they can be scheduled to run via the launchd daemon. This allows adversaries to execute scripts at system startup or on a scheduled basis, leveraging scripts as a tool for persistence or other malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.003",
            "attack_object_name": "Windows Management Instrumentation Event Subscription",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the WMI Event Subscription technique as adversaries may compile WMI scripts into MOF files to create malicious subscriptions. This involves using scripts to execute arbitrary code when a subscribed event occurs, thus compromising the script by embedding it within a WMI event subscription."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.003",
            "attack_object_name": "Windows Management Instrumentation Event Subscription",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by the WMI Event Subscription technique as they can be used as a tool to execute malicious actions when an event occurs. The script itself may not be the primary victim but is leveraged to maintain persistence or escalate privileges by executing code through WMI event subscriptions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1497.002",
            "attack_object_name": "User Activity Based Checks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement user activity checks. Scripts may be used to automate the process of monitoring user interactions or system artifacts to determine if the environment is a virtual machine or sandbox. This allows adversaries to decide whether to execute malicious payloads or alter their behavior based on the script's findings."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1141",
            "attack_object_name": "Input Prompt",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Input Prompt technique (T1141) to create fake prompts that deceive users into providing credentials. This misuse leverages scripting languages like PowerShell to execute malicious activities under the guise of legitimate operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1496.004",
            "attack_object_name": "Cloud Service Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Cloud Service Hijacking' by being used to automate the hijacking process, such as deploying scripts to interact with cloud APIs or services to misuse them for resource-intensive tasks. Scripts can facilitate the execution of the hijacking by automating interactions with cloud services, thus acting as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1585.003",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Cloud Accounts' technique by being used to automate the creation of cloud accounts or to interact with cloud services. Adversaries may use scripts to manage cloud infrastructure or automate tasks related to cloud account operations, leveraging scripts as tools in their attack strategy."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1072",
            "attack_object_name": "Software Deployment Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Software Deployment Tools technique as they may be executed through these tools to perform malicious activities. Adversaries can leverage scripts to automate tasks, execute commands, or manipulate data across systems using deployment tools, making scripts a means to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1041",
            "attack_object_name": "Exfiltration Over C2 Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Exfiltration Over C2 Channel' by embedding or executing commands that encode and transmit data over a command and control channel. Scripts can automate the process of data exfiltration, making them a useful tool for adversaries to misuse in this context."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1134.004",
            "attack_object_name": "Parent PID Spoofing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like PowerShell or Visual Basic, can be abused to execute 'Parent PID Spoofing'. Adversaries may use scripts to manipulate process identifiers, leveraging the scripting capabilities to perform actions that facilitate evasion or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1591",
            "attack_object_name": "Gather Victim Org Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could be abused to automate the process of gathering victim organization information. For example, a script could be written to scrape publicly available data from websites or social media to collect organizational details. In this context, scripts are used as tools to facilitate the information-gathering process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1060",
            "attack_object_name": "Registry Run Keys / Startup Folder",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the T1060 technique by placing them in startup folders or referencing them in registry run keys. This allows the script to be executed automatically upon user login, thus leveraging the script as a tool for persistence or further malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1606",
            "attack_object_name": "Forge Web Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Forge Web Credentials' technique as they may be used to automate the process of generating fake credentials. Scripts can interact with APIs or cryptographic functions to forge credentials, making them a tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1554",
            "attack_object_name": "Compromise Host Software Binary",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Compromise Host Software Binary' technique. While the technique itself targets binaries, scripts can be used to automate the modification of binaries or to deploy malicious payloads onto binaries. Thus, scripts can be leveraged as tools to facilitate the compromise of host software binaries."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.008",
            "attack_object_name": "Chat Messages",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Chat Messages' technique if they are used to automate the extraction or manipulation of chat messages to collect credentials. For example, a script could be used to interact with chat APIs or services to search for and extract sensitive information, thereby abusing the script as a tool in the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The PowerShell technique directly targets scripts as it involves the execution of PowerShell scripts and commands. This can lead to unauthorized execution of malicious scripts, compromising the integrity and security of the script asset."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, specifically PowerShell scripts, can be abused by adversaries to perform various malicious activities such as downloading and executing additional payloads, performing reconnaissance, and executing code on remote systems. This makes scripts a tool for furthering attacks rather than just a target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1023",
            "attack_object_name": "Shortcut Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Shortcut Modification technique as adversaries may modify shortcuts to execute malicious scripts instead of legitimate programs. This abuse leverages scripts as a tool for persistence or execution of malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.001",
            "attack_object_name": "Change Default File Association",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by this technique as they can be set as the default handler for a file type. This allows adversaries to execute malicious scripts whenever a file with the associated extension is opened, leveraging the script as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.014",
            "attack_object_name": "VDSO Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to facilitate VDSO Hijacking by automating the process of injecting code into a target process. They may be used to execute the necessary system calls or manipulate memory addresses to achieve the hijacking, thus abusing the script as a tool in the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1071.002",
            "attack_object_name": "File Transfer Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the use of file transfer protocols for malicious purposes. For instance, a script could be used to automatically transfer files or exfiltrate data using protocols like FTP or SMB, thereby blending malicious activity with normal network traffic. This makes scripts a tool for executing the T1071.002 technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1122",
            "attack_object_name": "Component Object Model Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Component Object Model Hijacking if they are used to automate the manipulation of COM objects or the Windows Registry. An adversary might use a script to facilitate the hijacking process, making scripts a tool for executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1015",
            "attack_object_name": "Accessibility Features",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Accessibility Features technique (T1015) to automate the process of modifying accessibility programs or registry keys. An adversary might use a script to replace or configure accessibility feature binaries to execute malicious code, thereby leveraging scripts as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries exploiting vulnerabilities within the script itself or the environment it operates in to gain unauthorized access to credentials. For example, a script may contain hardcoded credentials or be susceptible to injection attacks, allowing adversaries to extract sensitive information or execute malicious code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries as tools to further credential access attacks. For instance, once a script is compromised, it can be modified or used to automate the exploitation of other vulnerabilities within a system, enabling lateral movement or privilege escalation. Scripts can also be used to deploy payloads that facilitate credential harvesting or replay attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.014",
            "attack_object_name": "Emond",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Emond technique as they can be executed as part of the actions defined in the emond rules. Adversaries may write rules that trigger the execution of scripts during specific events, leveraging scripts as a tool to perform malicious activities such as persistence or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1102.003",
            "attack_object_name": "One-Way Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate One-Way Communication by embedding commands or instructions that interact with external web services for C2 purposes. Scripts can automate the process of sending commands to these services without expecting a response, thus being used as a tool to further the adversary's objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1590",
            "attack_object_name": "Gather Victim Network Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of gathering network information. Adversaries may use scripts to execute tasks such as querying network services, parsing data from network scans, or interacting with APIs to collect network details, thereby leveraging scripts as tools to facilitate the information gathering process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Exploitation of Remote Services' as they may be used to automate the exploitation process or to execute malicious code once access is gained. Scripts can facilitate lateral movement or privilege escalation by interacting with compromised remote services."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1502",
            "attack_object_name": "Parent PID Spoofing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Parent PID Spoofing technique as they can be used to execute the necessary code to manipulate the Parent Process Identifier (PPID). For example, a script could be used to execute API calls that spoof the PPID, thereby facilitating evasion or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1142",
            "attack_object_name": "Keychain",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the extraction of credentials from macOS keychains. An adversary could write a script that utilizes the 'security' command-line utility to programmatically access and extract credentials from keychain files, thereby abusing scripts to facilitate the attack on keychain data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1534",
            "attack_object_name": "Internal Spearphishing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Internal Spearphishing by being used to automate the delivery of spearphishing content or to execute malicious actions once a user is tricked into executing a script. Scripts may be embedded in spearphishing emails or messages to facilitate the attack, making them a tool in the execution of the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1169",
            "attack_object_name": "Sudo",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Sudo technique (T1169) when adversaries exploit misconfigurations in the sudoers file to execute scripts with elevated privileges. This misuse allows adversaries to run scripts as other users or with higher privileges, potentially leading to unauthorized actions or access."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.010",
            "attack_object_name": "Services File Permissions Weakness",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of this technique if they are used as payloads or components of a malicious binary that replaces a legitimate service binary. In such cases, scripts may be leveraged to execute malicious actions once the service starts, taking advantage of the elevated permissions granted to the service."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.001",
            "attack_object_name": "Registry Run Keys / Startup Folder",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by this technique as they can be placed in startup folders or referenced in registry run keys to be executed automatically for persistence purposes. This misuse allows adversaries to leverage scripts as tools to maintain their presence on a system by ensuring they are executed during system startup or user login."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1199",
            "attack_object_name": "Trusted Relationship",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Trusted Relationships by being used as tools to automate the exploitation of trusted connections. For example, an adversary who has gained access through a trusted relationship might use scripts to automate lateral movement, data exfiltration, or further compromise within the network, leveraging the trust established between organizations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1136.003",
            "attack_object_name": "Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Cloud Account' technique as they might be used to automate the creation or manipulation of cloud accounts. Adversaries could use scripts to programmatically interact with cloud APIs to create accounts, assign roles, or manage credentials, thus leveraging scripts as a tool to further their attack objectives in cloud environments."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1069.001",
            "attack_object_name": "Local Groups",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of enumerating local groups and permissions. An adversary might write a script to execute commands like 'net localgroup' on Windows or 'groups' on Linux to gather information about local groups. In this way, scripts are abused as tools to facilitate the execution of the 'Local Groups' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098",
            "attack_object_name": "Account Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Account Manipulation. Adversaries may use scripts to automate the process of modifying account credentials or permissions, thereby leveraging scripts as a tool to execute account manipulation activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1170",
            "attack_object_name": "Mshta",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Mshta technique can directly target scripts by executing malicious scripts such as Javascript or VBScript through the mshta.exe utility. This execution can compromise the script by running unauthorized code, leading to potential data breaches or unauthorized actions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1170",
            "attack_object_name": "Mshta",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Mshta technique as they can be used as a means to execute further attacks. For example, a script executed via mshta.exe can be leveraged to download additional payloads or perform actions that facilitate lateral movement or persistence within a system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1048",
            "attack_object_name": "Exfiltration Over Alternative Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Exfiltration Over Alternative Protocol' by automating the process of data exfiltration. Scripts written in languages like Python, Bash, or PowerShell can be used to invoke various network protocols (e.g., FTP, HTTP/S) to exfiltrate data. This makes scripts a tool or stepping stone in executing the technique, as they can be used to automate and obfuscate the exfiltration process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.006",
            "attack_object_name": "Kernel Modules and Extensions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the loading or unloading of kernel modules or extensions, thereby indirectly facilitating the abuse of this technique. For example, a script could be used to execute commands that load a malicious kernel module, thus using the script as a tool to further the attack on the kernel."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1056.002",
            "attack_object_name": "GUI Input Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement GUI Input Capture techniques. For example, scripts written in languages like PowerShell or AppleScript can be used to create fake GUI prompts to capture user credentials, leveraging the script's ability to interact with system APIs and the GUI."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1097",
            "attack_object_name": "Pass the Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Pass the Ticket' technique to automate the process of capturing, manipulating, and using Kerberos tickets. Attackers may use scripts to facilitate the execution of this technique by automating tasks such as ticket extraction and injection, making scripts a tool for furthering the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588.002",
            "attack_object_name": "Tool",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused as tools by adversaries once they are acquired. Adversaries may use scripts as part of their toolset to automate tasks, execute malicious actions, or interact with system APIs during their operations. Therefore, scripts can be leveraged as tools to support malicious activities, aligning with the objectives of the T1588.002 technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1052.001",
            "attack_object_name": "Exfiltration over USB",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Exfiltration over USB' by automating the process of copying and transferring data to a USB device. Scripts can be written to detect USB connections and automatically execute data exfiltration tasks, making them a tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.006",
            "attack_object_name": "Systemd Timers",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Systemd Timers technique as they can be scheduled to execute malicious code. Adversaries may use scripts in conjunction with systemd timers to automate the execution of malicious activities, thus leveraging scripts as a tool for persistence or scheduled execution."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1566",
            "attack_object_name": "Phishing",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted in phishing attacks when adversaries send malicious scripts as attachments or links in phishing emails. The execution of these scripts can lead to unauthorized access, execution of malicious code, or data theft, compromising the system where the script is executed."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1566",
            "attack_object_name": "Phishing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in phishing attacks by being used as tools to automate the sending of phishing emails or to manipulate data within phishing campaigns. For example, scripts can be used to generate large volumes of phishing emails or to extract and misuse data obtained from phishing victims."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.001",
            "attack_object_name": "Compiled HTML File",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be embedded within Compiled HTML Files (CHM) as part of the malicious payload. The CHM technique abuses scripts by using them as a tool to execute malicious activities once the CHM file is executed. This technique leverages scripting capabilities within CHM files to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1496.001",
            "attack_object_name": "Compute Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in Compute Hijacking scenarios. Adversaries may use scripts to automate the deployment of cryptocurrency mining software or to exploit system vulnerabilities that facilitate the hijacking of compute resources. Scripts can also be used to manage or orchestrate the mining process across multiple systems or containers."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.005",
            "attack_object_name": "Network Share Connection Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the removal of network share connections as part of the 'Network Share Connection Removal' technique. An adversary might leverage scripts to execute commands that remove network share connections, thereby abusing the script to facilitate stealth and evasion."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1090.003",
            "attack_object_name": "Multi-hop Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Multi-hop Proxy technique by being used to automate the setup and management of proxy chains. Adversaries may use scripts to configure and control multiple proxy servers or devices, facilitating the creation of a multi-hop proxy chain to disguise the source of malicious traffic."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate brute force attacks. Adversaries may use scripts to systematically attempt multiple password combinations against a service or application to gain unauthorized access. This abuse leverages the script's ability to automate repetitive tasks, making it an effective tool for executing brute force attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.004",
            "attack_object_name": "Unix Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Unix Shell technique (T1059.004) directly targets scripts as it involves the execution of Unix shell commands and scripts. Adversaries may exploit vulnerabilities in scripts or execute malicious scripts to compromise the system, gain unauthorized access, or execute arbitrary code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.004",
            "attack_object_name": "Unix Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are often abused by adversaries using the Unix Shell technique (T1059.004) to facilitate further attacks. They can be leveraged to automate malicious activities, perform lateral movement, maintain persistence, or execute a series of commands as part of a larger attack strategy."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137.003",
            "attack_object_name": "Outlook Forms",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Outlook Forms technique. An adversary may use scripts to automate the creation or deployment of malicious Outlook forms, or to interact with these forms once they are executed, thus leveraging scripts as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.001",
            "attack_object_name": "Disable or Modify Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Disable or Modify Tools' by being used to automate the process of disabling or modifying security tools. Adversaries may write scripts to execute commands that interfere with security software, modify configurations, or disable logging, using scripts as a means to perform these actions efficiently and stealthily."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1565",
            "attack_object_name": "Data Manipulation",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries using the Data Manipulation technique. An attacker may modify the script's code to alter its behavior, inject malicious instructions, or manipulate data processed by the script. This can compromise the integrity of the script and lead to unauthorized actions or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1565",
            "attack_object_name": "Data Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to manipulate data as part of a broader attack strategy. For example, a compromised script might be used to alter data in a database or file system, facilitating further attacks or hiding malicious activities. The script itself becomes a tool for executing the Data Manipulation technique on other assets."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1559",
            "attack_object_name": "Inter-Process Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can abuse IPC mechanisms to execute commands or share data between processes. Adversaries may leverage scripts to utilize IPC for malicious purposes, such as executing arbitrary code or facilitating communication between malicious processes. Therefore, scripts can be used as a tool to abuse IPC mechanisms."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1001",
            "attack_object_name": "Data Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to implement data obfuscation techniques. Adversaries may write scripts to automate the process of obfuscating data, such as adding junk data or using steganography, to evade detection. Thus, scripts can be abused as a tool to facilitate data obfuscation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1039",
            "attack_object_name": "Data from Network Shared Drive",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Data from Network Shared Drive' by being used to automate the process of searching and collecting data from network shares. An adversary might use a script to systematically access and retrieve sensitive information from shared drives, leveraging the script as a tool to facilitate the data collection process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.006",
            "attack_object_name": "Web Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate interactions with web services, including those that have been compromised. Adversaries might use scripts to automate the abuse of compromised web services for purposes such as Command and Control, Exfiltration, or Phishing, leveraging the access they have gained to these services."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574",
            "attack_object_name": "Hijack Execution Flow",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Hijack Execution Flow technique as they can be used to execute malicious payloads or manipulate the execution flow of other applications. Scripts can be leveraged to automate the hijacking process, making them a tool in the execution flow hijacking."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.011",
            "attack_object_name": "Lua",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Lua scripting technique directly targets scripts as it involves the execution of Lua scripts for malicious purposes. Adversaries may exploit vulnerabilities within Lua scripts or execute unauthorized Lua scripts to compromise the system, making scripts the primary victim of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.005",
            "attack_object_name": "Indicator Removal from Tools",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Indicator Removal from Tools' as they can be used to automate the process of modifying malicious tools to remove detection indicators. Scripts may be employed to systematically alter or obfuscate parts of a tool to evade detection, thus serving as a means to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1543.005",
            "attack_object_name": "Container Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1543.005 - Container Service by being used to automate the creation or modification of container services for persistence or privilege escalation. For example, scripts can be used to automate the execution of commands like 'docker run' with specific directives to achieve persistence or to deploy containers across a cluster."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Valid Accounts technique when adversaries use compromised credentials to execute scripts for malicious purposes. For example, attackers may use valid credentials to run scripts that automate tasks such as data exfiltration, lateral movement, or privilege escalation, leveraging the script's capabilities as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1571",
            "attack_object_name": "Non-Standard Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the use of non-standard ports. For instance, a script might be used to automate the configuration changes needed to reroute traffic through non-standard ports, or to initiate communications using these ports. This makes scripts a tool or stepping stone in executing the 'Non-Standard Port' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1073",
            "attack_object_name": "DLL Side-Loading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate DLL Side-Loading attacks. For example, a script could be used to automate the process of placing a malicious DLL in a directory where it will be loaded by a vulnerable application. Thus, while scripts are not the direct target of DLL Side-Loading, they can be leveraged to execute or assist in such attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.012",
            "attack_object_name": "Process Hollowing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of executing Process Hollowing. A script could be written to leverage system APIs to create a suspended process, unmap its memory, and inject malicious code, thus abusing the script as a tool to perform the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Exploitation for Privilege Escalation' by being used to execute or deliver exploits that target vulnerable components for privilege escalation. An adversary might use a script to automate the exploitation process or to deploy a payload that exploits a vulnerability, thereby leveraging the script as a tool to facilitate privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.009",
            "attack_object_name": "Resource Forking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using Resource Forking to hide malicious payloads within resource forks. The script may be used as a vehicle to execute or manipulate the hidden content, leveraging the script's ability to interact with system APIs or automate tasks to further the attack. This makes scripts a tool in the execution of the Resource Forking technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1531",
            "attack_object_name": "Account Access Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to perform 'Account Access Removal' by automating the process of modifying or disabling user accounts. For example, a malicious script could utilize PowerShell cmdlets or other scripting utilities to change passwords or lock accounts, thereby facilitating this attack technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1110.004",
            "attack_object_name": "Credential Stuffing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of credential stuffing. Attackers may use scripts to systematically attempt login attempts across multiple accounts and services using stolen credentials. This abuse leverages the script's ability to automate repetitive tasks, making it a tool in executing the credential stuffing attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1208",
            "attack_object_name": "Kerberoasting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of Kerberoasting by requesting service tickets and attempting to crack the hashes offline. Scripts can facilitate the execution of this attack technique by automating the collection and processing of Kerberos tickets, thus acting as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Obfuscated Files or Information technique as adversaries may obfuscate scripts to make them difficult to analyze or detect. This can involve encoding, encrypting, or compressing the script to avoid detection by security mechanisms, thereby compromising the script's integrity and security."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Obfuscated Files or Information technique as they can be used as a tool to further an attack. Adversaries may use obfuscated scripts to execute commands or payloads in a way that evades detection, leveraging the script's capabilities to perform malicious activities such as lateral movement or persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556.006",
            "attack_object_name": "Multi-Factor Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to modify or disable MFA mechanisms. For example, adversaries may use scripts to automate the process of modifying configuration files, such as the Windows hosts file, to redirect MFA calls or to disable MFA settings. This makes scripts a tool that can be leveraged to facilitate the attack described by technique T1556.006."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1114.002",
            "attack_object_name": "Remote Email Collection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used as tools to automate the process of collecting emails from targeted services. For example, adversaries might use scripts to interact with email servers or services using stolen credentials to extract email data, making scripts an asset that can be abused in the context of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1505.004",
            "attack_object_name": "IIS Components",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the IIS Components technique. For instance, scripts may be used to automate the deployment of malicious IIS components or to interact with these components to execute commands or modify traffic. Thus, scripts can serve as tools to facilitate the abuse of IIS components."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.001",
            "attack_object_name": "Invalid Code Signature",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Invalid Code Signature' technique by embedding them within larger binaries that are made to appear legitimate through the use of invalid code signatures. This can help adversaries bypass security controls by making the overall package seem trustworthy, while the script within performs malicious actions. Thus, scripts can be used as a tool to further an attack when combined with this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.006",
            "attack_object_name": "Run Virtual Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Run Virtual Instance' by being used to automate the setup or execution of virtual instances. For example, scripts could be used to deploy and configure a virtual environment where malicious activities are conducted, leveraging the script's ability to interact with system APIs and automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1154",
            "attack_object_name": "Trap",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The 'Trap' technique directly targets scripts by manipulating their behavior through the use of the 'trap' command. This allows adversaries to execute commands when specific signals are received, potentially compromising the script by altering its intended execution flow or maintaining persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.014",
            "attack_object_name": "Polymorphic Code",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by polymorphic code techniques. Adversaries may modify scripts to include polymorphic code, which changes its runtime footprint to evade detection. This makes scripts a primary victim as they are altered to execute malicious payloads without being detected by traditional security measures."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.014",
            "attack_object_name": "Polymorphic Code",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can also be abused by polymorphic code techniques. Once a script is modified to include polymorphic code, it can be used as a tool to execute further attacks, such as spreading malware or conducting unauthorized actions on a system. The polymorphic nature of the code allows the script to be reused in different contexts while avoiding detection."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1201",
            "attack_object_name": "Password Policy Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the discovery of password policies. For example, a script could be written to execute commands that retrieve password policy information from systems or cloud environments. In this way, scripts serve as tools to facilitate the Password Policy Discovery technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546",
            "attack_object_name": "Event Triggered Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Event Triggered Execution' by being used as the payload or mechanism that is executed when an event is triggered. Adversaries may modify event triggers to execute malicious scripts, thereby using scripts as a tool to maintain persistence or escalate privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.004",
            "attack_object_name": "Unix Shell Configuration Modification",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The technique 'Unix Shell Configuration Modification' directly targets scripts, specifically Unix shell configuration scripts, to establish persistence. Adversaries insert malicious commands into these scripts, which are executed automatically by the shell, compromising the script's integrity and functionality."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1187",
            "attack_object_name": "Forced Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the Forced Authentication technique as they can be used to automate the process of sending requests to external resources that trigger forced authentication. For example, a script could be crafted to include links to adversary-controlled resources, thereby leveraging the script to facilitate the attack on user credentials."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1134.005",
            "attack_object_name": "SID-History Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate SID-History Injection if they are used to automate tasks that involve interacting with Active Directory or managing user accounts. Malicious scripts could be crafted to perform SID-History Injection by leveraging administrative privileges to manipulate SID-History attributes, thus serving as a tool to execute this attack technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1599",
            "attack_object_name": "Network Boundary Bridging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Network Boundary Bridging' by automating the exploitation of network devices or by executing commands that help in reconfiguring network devices once they are compromised. Scripts can be used as tools to interact with network devices, aiding in the bridging of network boundaries."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1486",
            "attack_object_name": "Data Encrypted for Impact",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts, especially those containing sensitive data or critical instructions, can be directly targeted by adversaries using the 'Data Encrypted for Impact' technique. By encrypting scripts, adversaries can disrupt automated processes, manipulate data, or render important functionalities inaccessible, thereby impacting the operations that rely on these scripts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1488",
            "attack_object_name": "Disk Content Wipe",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused as part of the Disk Content Wipe technique by being used to automate the process of wiping disk contents. Adversaries may write or execute scripts that facilitate the wiping process, either by directly interacting with disk management tools or by deploying malware that performs the wiping. Thus, scripts serve as a tool to execute the attack rather than being the primary target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries attempting to subvert trust controls. By modifying scripts or their execution environment, attackers can bypass security warnings or restrictions, allowing unauthorized or malicious scripts to execute. This can compromise the integrity of the script and the system it operates on."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to subvert trust controls by leveraging them as tools to execute further attacks. For example, a script could be used to modify system settings or registry entries to disable security warnings or allow untrusted code to run, facilitating further malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548.004",
            "attack_object_name": "Elevated Execution with Prompt",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Elevated Execution with Prompt' technique. Adversaries may use scripts to call the AuthorizationExecuteWithPrivileges API, potentially modifying scripts to include malicious code that prompts for elevated privileges. This misuse allows scripts to act as a tool for privilege escalation, leveraging the script's ability to interact with system APIs."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1573",
            "attack_object_name": "Encrypted Channel",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement or facilitate the Encrypted Channel technique. Adversaries may use scripts to automate the setup of encrypted communications, embedding or generating encryption keys within scripts to conceal malicious traffic. Thus, scripts can be leveraged as tools to establish encrypted channels, making them a means to further an attack rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.002",
            "attack_object_name": "Authentication Package",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the T1547.002 technique if they are used to automate the process of modifying the Windows Registry to include a malicious DLL in the 'Authentication Packages' key. This abuse allows adversaries to leverage scripts to facilitate the persistence mechanism described in the technique, making scripts a tool for executing the attack rather than the primary target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.010",
            "attack_object_name": "Regsvr32",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Regsvr32 technique as it allows the execution of COM scriptlets via Regsvr32.exe. This technique leverages scripts to execute DLLs under user permissions, often bypassing security controls and allowing for stealthy execution of malicious code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1002",
            "attack_object_name": "Data Compressed",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to perform the 'Data Compressed' technique by using them to automate the compression of data before exfiltration. Scripts can leverage compression libraries or utilities to achieve this, making them a tool in the execution of the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1567.003",
            "attack_object_name": "Exfiltration to Text Storage Sites",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the 'Exfiltration to Text Storage Sites' technique. Scripts may be leveraged to automate the process of collecting and exfiltrating data to text storage sites. This misuse of scripts allows adversaries to facilitate data exfiltration without directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1081",
            "attack_object_name": "Credentials in Files",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be targeted by the 'Credentials in Files' technique because they may contain hardcoded credentials or sensitive information within the script files. Adversaries search for these scripts to extract credentials, which can lead to unauthorized access and compromise of the script's intended functionality."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1592.002",
            "attack_object_name": "Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used as tools to gather information about installed software on a system. An adversary might leverage scripts to automate the collection of software details, making scripts an asset that can be abused for reconnaissance purposes as described in technique T1592.002."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1128",
            "attack_object_name": "Netsh Helper DLL",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the execution of netsh.exe with malicious helper DLLs, thereby abusing the script as a tool to facilitate the attack. This abuse allows adversaries to use scripts to execute netsh.exe in a manner that loads malicious DLLs, enabling persistence and execution of arbitrary code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1056",
            "attack_object_name": "Input Capture",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement input capture mechanisms by adversaries. For example, a malicious script could be designed to hook into input APIs or simulate legitimate input fields to deceive users into entering sensitive information, which is then captured and exfiltrated by the script."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1587.004",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by exploits when adversaries identify vulnerabilities within the script itself or in the scripting environment. This can result in unauthorized execution or manipulation of the script, leading to potential data breaches or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1587.004",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries who use them as tools to deploy exploits against other systems. For example, a script could be used to automate the delivery of an exploit payload or to facilitate lateral movement within a network, leveraging the script's capabilities to interact with system APIs or automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1213.004",
            "attack_object_name": "Customer Relationship Management Software",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could be abused in the context of this technique if adversaries use them to automate the extraction or manipulation of data from CRM software. Scripts can be leveraged to interact with CRM APIs or databases, facilitating the mining of customer information. Thus, while scripts are not the direct target, they can be misused as tools to further the attack on CRM systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.015",
            "attack_object_name": "Component Object Model Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Component Object Model Hijacking if they are used to automate the process of modifying registry entries or to execute malicious payloads once the COM hijacking is successful. In this scenario, scripts serve as a tool to facilitate the attack, leveraging their ability to interact with system APIs and automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1589.001 (Credentials) as they may contain hardcoded credentials or be used to automate the process of gathering credentials from various sources. Adversaries might leverage scripts to extract credentials from configuration files, environment variables, or other locations where credentials are stored, thus using the script as a tool to facilitate credential gathering."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1195.002",
            "attack_object_name": "Compromise Software Supply Chain",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted in a software supply chain compromise. Adversaries may manipulate scripts within the source code or distribution mechanisms to introduce malicious code, which can then be executed when the script is run by the end user. This manipulation can lead to unauthorized execution and potential data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.003",
            "attack_object_name": "Rename System Utilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries in conjunction with the 'Rename System Utilities' technique. Scripts may be used to automate the renaming process of system utilities, thereby facilitating the evasion of security mechanisms. This misuse of scripts serves as a tool to further the attack rather than directly targeting the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1102.002",
            "attack_object_name": "Bidirectional Communication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to facilitate Bidirectional Communication. Scripts may be used to automate the process of sending and receiving data to and from external web services, thus acting as a tool to execute the technique. This makes scripts a means to further the attack by enabling communication with command and control servers."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by exploitation techniques, such as code injection attacks, where adversaries exploit vulnerabilities in the script or its execution environment to execute arbitrary code. This can lead to unauthorized execution of malicious scripts or commands, compromising the script and potentially the system it runs on."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1595.003",
            "attack_object_name": "Wordlist Scanning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the Wordlist Scanning technique to automate the process of probing and discovering infrastructure content. Scripts can be used to execute wordlist scanning tools or automate the generation and usage of custom wordlists, making them a tool in the reconnaissance phase of an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.011",
            "attack_object_name": "Spoof Security Alerting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could be abused in the context of 'Spoof Security Alerting' if they are used to automate the spoofing of security alerts. An adversary might use scripts to generate fake alerts or modify existing alerting systems to present false information, thus leveraging scripts as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137.004",
            "attack_object_name": "Outlook Home Page",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Outlook Home Page technique. An adversary may craft a malicious script in the form of an HTML page that is loaded by the Outlook Home Page feature to execute code. Thus, the script serves as a tool to further the attack by executing malicious activities when the Outlook folder is accessed."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1573.002",
            "attack_object_name": "Asymmetric Cryptography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement asymmetric cryptography for malicious purposes, such as encrypting command and control traffic. Adversaries may use scripts to automate the process of encrypting data with asymmetric cryptography to evade detection and secure communications, thus using the script as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1567.002",
            "attack_object_name": "Exfiltration to Cloud Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the 'Exfiltration to Cloud Storage' technique. Adversaries may use scripts to automate the process of collecting and transferring data to cloud storage services, leveraging the script's ability to interact with system APIs and network resources. This makes scripts a tool for executing the exfiltration process rather than a direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1570",
            "attack_object_name": "Lateral Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Lateral Tool Transfer technique as they can be used to automate the transfer of tools or files across systems. Adversaries may leverage scripts to facilitate the movement of malicious payloads or tools between compromised systems, using them as a means to execute the transfer process efficiently."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.009",
            "attack_object_name": "Path Interception by Unquoted Path",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Path Interception by Unquoted Path' technique if they are used to place or execute malicious payloads in vulnerable path locations. While the script itself is not directly targeted, it can be used as a tool to facilitate the execution of malicious executables by manipulating path configurations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.003",
            "attack_object_name": "Install Digital Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the installation of digital certificates on compromised infrastructure. This can be part of a broader attack strategy where scripts are used to configure servers, including installing certificates to encrypt malicious communications or to make phishing sites appear legitimate."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1168",
            "attack_object_name": "Local Job Scheduling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are often used in conjunction with Local Job Scheduling to automate tasks or execute commands at specific intervals. Adversaries may abuse scripts by scheduling them to run automatically using cron, at, or launchd for persistence, execution, or privilege escalation purposes. In this context, scripts are leveraged as tools to further the attack, making them a means to execute malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1166",
            "attack_object_name": "Setuid and Setgid",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Setuid and Setgid technique if they are executed by an application or process that has setuid or setgid bits set. An adversary could leverage a script to execute commands or perform actions with elevated privileges if the script is called by a setuid/setgid application. This makes scripts a potential tool for privilege escalation when combined with this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037.005",
            "attack_object_name": "Startup Items",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Startup Items' technique as they can be placed in the startup items directory to be executed automatically during system boot. This allows adversaries to leverage scripts as a means to establish persistence on a system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1100",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Web Shell technique directly targets scripts by exploiting vulnerabilities in web scripts placed on web servers. These scripts are the primary victims as they are manipulated to provide unauthorized access and control over the server."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1100",
            "attack_object_name": "Web Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by the Web Shell technique as they are leveraged to maintain persistence and facilitate further attacks. Once a script is compromised, it can be used to execute commands, move laterally within the network, or exfiltrate data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1186",
            "attack_object_name": "Process Doppelg\u00e4nging",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with Process Doppelg\u00e4nging if they are used to automate or facilitate the steps involved in the technique, such as creating transactions, loading malicious executables, or initiating processes. Scripts can serve as a tool to execute the necessary commands to perform Process Doppelg\u00e4nging, thus being misused for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1184",
            "attack_object_name": "SSH Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of SSH Hijacking if they are used to automate SSH connections or manage SSH keys. An adversary may leverage scripts to facilitate SSH session hijacking by executing them to access or manipulate SSH agent sockets or credentials."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1614.001",
            "attack_object_name": "System Language Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that gather system language information, such as querying environment variables or executing system commands like 'locale' on Linux. In this context, scripts serve as a tool to facilitate the execution of the System Language Discovery technique, making them a means to further the attack rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1095",
            "attack_object_name": "Non-Application Layer Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the use of non-application layer protocols for malicious communication. For example, a script could be used to automate the sending of ICMP packets for covert communication or data exfiltration, leveraging the non-application layer protocol as a means to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1075",
            "attack_object_name": "Pass the Hash",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Pass the Hash technique if they are used to automate the process of capturing hashes or executing the PtH attack. Scripts can facilitate the execution of commands on compromised systems using the stolen hashes, thus acting as a tool in the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.003",
            "attack_object_name": "Steganography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Steganography technique (T1027.003) to facilitate the execution of hidden or obfuscated code. For example, scripts like PowerShell can be embedded within images using steganography, allowing adversaries to execute malicious code on a victim's system without detection. This makes scripts a tool or stepping stone in the execution of steganographic attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.002",
            "attack_object_name": "DNS Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the DNS Server technique (T1584.002) by being used to automate the process of interacting with compromised DNS servers. Scripts may be utilized to execute commands, manipulate DNS records, or facilitate communication with adversary-controlled DNS infrastructure, thus serving as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1001.003",
            "attack_object_name": "Protocol or Service Impersonation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Protocol or Service Impersonation' by being used to automate the manipulation of network traffic, such as altering HTTP headers or SSL certificates, to mimic legitimate services. This makes scripts a tool that can be leveraged to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1012",
            "attack_object_name": "Query Registry",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the querying of the Windows Registry. An adversary might use a script to execute the 'Query Registry' technique as part of an automated discovery process. In this context, the script is not the direct target but is abused as a tool to facilitate the attack on the Registry."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1030",
            "attack_object_name": "Data Transfer Size Limits",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement the 'Data Transfer Size Limits' technique. An adversary could use a script to automate the process of breaking data into smaller chunks for exfiltration, thereby avoiding detection. In this scenario, the script is a tool used to facilitate the attack rather than the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1028",
            "attack_object_name": "Windows Remote Management",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Windows Remote Management (WinRM) technique as they can be executed remotely via WinRM. This allows an attacker to leverage scripts as a tool to perform various actions on a remote system, such as automating tasks, manipulating data, or interacting with system APIs. In this context, scripts serve as a means to execute further attacks or maintain persistence on a compromised system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1550.004",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to steal or manipulate web session cookies. For example, a malicious script could be used to extract session cookies from a user's browser or to automate the process of importing stolen cookies into a browser controlled by an adversary. Thus, scripts can serve as a tool in the execution of the Web Session Cookie technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1078.002",
            "attack_object_name": "Domain Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Domain Accounts' technique by using them to automate the process of credential theft, privilege escalation, or lateral movement within a domain. For example, scripts may be used to automate the dumping of credentials or to execute commands using compromised domain accounts, thereby facilitating the abuse of domain accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.009",
            "attack_object_name": "Regsvcs/Regasm",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Regsvcs/Regasm technique as they can be executed through these trusted utilities. This allows adversaries to proxy execution of malicious scripts, bypassing application controls and executing code without direct targeting of the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1034",
            "attack_object_name": "Path Interception",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Path Interception technique when they are used to execute commands or programs that rely on path configurations. If a script executes a command without specifying a full path, it may inadvertently execute a malicious program placed by an adversary in a higher priority path, thus abusing the script to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1506",
            "attack_object_name": "Web Session Cookie",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of extracting and using stolen web session cookies. An adversary might write a script to automate the import of stolen cookies into a browser or to facilitate the theft of cookies from a compromised system. Thus, scripts can be abused as tools in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1553.004",
            "attack_object_name": "Install Root Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the installation of root certificates on a system. An adversary might use a script to execute commands that install a malicious root certificate, thereby misusing the script to further their attack by compromising the system's trust settings."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037.003",
            "attack_object_name": "Network Logon Script",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Network Logon Script technique abuses scripts by using them as a tool to maintain persistence across a network. Scripts are leveraged to execute automatically during logon processes, which can be exploited by adversaries to maintain access and execute malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1499",
            "attack_object_name": "Endpoint Denial of Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in Endpoint Denial of Service attacks as tools to automate the attack process. For example, scripts may be used to launch DoS attacks by repeatedly sending requests to a target service, potentially leveraging botnets or spoofed IP addresses to increase the attack's effectiveness and make it harder to trace."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.004",
            "attack_object_name": "Compile After Delivery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Compile After Delivery' technique as they may be used to deliver uncompiled source code. The scripts themselves are not the direct target but serve as a vehicle to deliver and potentially compile malicious payloads, thereby facilitating the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1065",
            "attack_object_name": "Uncommonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the use of uncommonly used ports. An adversary may use a script to automate the configuration of network services or applications to communicate over non-standard ports, thereby leveraging the script as a tool to execute the 'Uncommonly Used Port' technique. This misuse of scripts can aid in evading network defenses."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1614",
            "attack_object_name": "System Location Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to perform System Location Discovery by executing commands or using APIs that gather location-related information. Adversaries may use scripts to automate the process of collecting system location data, leveraging the script's ability to interact with system APIs or external services to infer the geographical location of a host."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.007",
            "attack_object_name": "VBA Stomping",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of VBA Stomping if they are used to automate the process of modifying or analyzing VBA code within MS Office documents. While the technique itself focuses on VBA, scripts could be leveraged as tools to facilitate the stomping process or to evade detection by automating the manipulation of VBA code."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1197",
            "attack_object_name": "BITS Jobs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused by the BITS Jobs technique to create and manage BITS jobs. This allows adversaries to leverage scripts for downloading, executing, and cleaning up malicious code, as well as for persistence and exfiltration purposes. The technique uses scripts as a tool to interact with BITS and perform malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1127.001",
            "attack_object_name": "MSBuild",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the MSBuild technique as they can be embedded within MSBuild project files to execute malicious code. The technique leverages scripts as a means to execute arbitrary code through the MSBuild utility, thus misusing scripts for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1578.005",
            "attack_object_name": "Modify Cloud Compute Configurations",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the modification of cloud compute configurations. Adversaries may write or use scripts to systematically change settings, such as quotas or policies, to abuse cloud resources. In this context, scripts serve as a tool to facilitate the attack on cloud configurations, making them an asset that can be abused by this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1088",
            "attack_object_name": "Bypass User Account Control",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Bypass User Account Control technique. Malicious scripts can be crafted to exploit UAC bypass methods, allowing them to execute with elevated privileges without user consent. This makes scripts a primary victim when they are used to perform unauthorized actions under elevated privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1088",
            "attack_object_name": "Bypass User Account Control",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Bypass User Account Control technique as they can be used as a tool to execute further malicious activities. For instance, a script could be used to automate the execution of a UAC bypass method, facilitating privilege escalation or lateral movement without direct targeting of the script itself."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1494",
            "attack_object_name": "Runtime Data Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Runtime Data Manipulation' by being used to automate or facilitate the manipulation of runtime data. Scripts can be leveraged to alter data dynamically as it is processed or displayed, serving as a tool to execute the manipulation rather than being the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1090.004",
            "attack_object_name": "Domain Fronting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement Domain Fronting by including code that manipulates network requests to use different domain names in the SNI and Host fields. This allows adversaries to obfuscate the true destination of traffic, leveraging scripts as a tool to execute the Domain Fronting technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1557.002",
            "attack_object_name": "ARP Cache Poisoning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of ARP Cache Poisoning. An adversary may write a script to send malicious ARP replies to poison the ARP cache of network devices, thereby abusing the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1562.008",
            "attack_object_name": "Disable or Modify Cloud Logs",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of disabling or modifying cloud logs. An adversary may write or use a script to interact with cloud APIs or command-line tools to modify logging settings, thus abusing the script as a tool to execute the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1518.001",
            "attack_object_name": "Security Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to automate the process of discovering security software. For example, a script written in a language like PowerShell or Python could be used to execute commands that gather information about installed security tools and configurations. In this context, scripts serve as a tool to facilitate the discovery process, rather than being the direct target of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.003",
            "attack_object_name": "Hidden Window",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in languages like PowerShell, can be abused to execute the 'Hidden Window' technique. This involves using scripting capabilities to hide windows, thereby concealing malicious activities from users."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1493",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate 'Transmitted Data Manipulation' by being used to intercept, modify, or redirect data during transmission. An adversary might leverage scripts to automate the process of data manipulation, making scripts a tool in executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1127.002",
            "attack_object_name": "ClickOnce",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the ClickOnce technique as a means to execute malicious code. For example, adversaries may use scripts in conjunction with ClickOnce to proxy execution of malicious code without needing to escalate privileges, leveraging the script as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.006",
            "attack_object_name": "Python",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts, specifically Python scripts, are directly targeted by adversaries who exploit vulnerabilities within the script or execute unauthorized Python code to compromise the system. This can lead to unauthorized execution, privilege escalation, or data breaches."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.006",
            "attack_object_name": "Python",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Python scripts are often abused by adversaries as a tool to execute malicious commands or automate tasks that further an attack. This includes using Python scripts to download and execute additional malicious payloads, perform lateral movement, or maintain persistence on a compromised system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.010",
            "attack_object_name": "Relocate Malware",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Relocate Malware' technique as they can be used to automate the process of copying and moving malware payloads to different locations on a system. This misuse of scripts facilitates the evasion of defenses and persistence of malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1591.004",
            "attack_object_name": "Identify Roles",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be leveraged by adversaries to automate the process of gathering information about roles and identities within an organization. Scripts may be used to parse data from various sources or automate reconnaissance tasks, thus serving as a tool to facilitate the 'Identify Roles' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement data encoding techniques. An adversary might use a script to encode data before exfiltration or during command and control communications to evade detection. In this context, the script acts as a tool to facilitate the encoding process, rather than being the direct victim of an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1496",
            "attack_object_name": "Resource Hijacking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in Resource Hijacking by being used to automate the unauthorized use of system resources. For example, a script could be used to execute cryptocurrency mining operations or to send large quantities of spam messages, thereby misusing the system's resources for malicious purposes."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1585",
            "attack_object_name": "Establish Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Establish Accounts' by automating the process of creating and managing multiple accounts. Scripts can be used to fill out profile information, develop social networks, or automate interactions to make the personas appear legitimate. Therefore, scripts serve as a tool to facilitate the establishment of accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588",
            "attack_object_name": "Obtain Capabilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused as part of the 'Obtain Capabilities' technique if they are acquired by adversaries to facilitate attacks. For example, adversaries may obtain scripts that automate malicious tasks or exploit vulnerabilities, using them as tools to further their objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.002",
            "attack_object_name": "Screensaver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Screensaver technique (T1546.002) as they can be used to create or modify malicious Portable Executable (PE) files that are set as screensavers. These scripts can automate the process of altering registry settings or deploying the malicious screensaver, thus serving as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1578.002",
            "attack_object_name": "Create Cloud Instance",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Create Cloud Instance' technique. An adversary may use scripts to automate the creation of cloud instances, potentially bypassing security controls or executing further malicious activities within the cloud environment. Scripts can be leveraged to interact with cloud APIs to facilitate the creation and management of instances."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1500",
            "attack_object_name": "Compile After Delivery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Compile After Delivery' technique as they may be used to deliver uncompiled source code that needs to be compiled on the target system. This abuse allows adversaries to leverage scripts as a means to execute or compile malicious payloads, thereby facilitating the evasion of detection mechanisms that target pre-compiled binaries."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1555.006",
            "attack_object_name": "Cloud Secrets Management Stores",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to interact with cloud secrets management stores. If a script has the necessary permissions or credentials embedded within it, it can be used to programmatically request secrets from these stores, thereby facilitating unauthorized access to sensitive information."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1213.003",
            "attack_object_name": "Code Repositories",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries when they gain access to code repositories. These scripts may contain sensitive information such as proprietary code or unsecured credentials, making them valuable targets for data theft and exploitation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1565.002",
            "attack_object_name": "Transmitted Data Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to manipulate transmitted data. An attacker could leverage a script to intercept and alter data during its transmission, using the script as a tool to execute the manipulation. This aligns with the technique's goal of affecting business processes or hiding activities by modifying data in transit."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.008",
            "attack_object_name": "/etc/passwd and /etc/shadow",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the execution of the T1003.008 technique. For example, a script could be used to automate the extraction of /etc/passwd and /etc/shadow files, or to run utilities like 'unshadow' and 'John the Ripper' for password cracking. In this context, scripts serve as tools to perform the attack rather than being the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1543.001",
            "attack_object_name": "Launch Agent",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Launch Agent technique as they can be specified as the payload to be executed by a launch agent. Adversaries may use scripts to automate malicious tasks or execute malicious code repeatedly by configuring a launch agent to run the script at login or other specified times. This makes scripts a tool leveraged by the technique to maintain persistence and execute malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1569",
            "attack_object_name": "System Services",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the System Services technique (T1569) as they can be executed through system services. Adversaries may use scripts as payloads or components of malicious services to execute commands or programs, leveraging the flexibility and automation capabilities of scripts to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.003",
            "attack_object_name": "Windows Command Shell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries using the Windows Command Shell to execute malicious commands or payloads. This includes unauthorized execution of scripts that may contain vulnerabilities or sensitive information, leading to potential data breaches or system compromise."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.003",
            "attack_object_name": "Windows Command Shell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries leveraging the Windows Command Shell to automate tasks, manipulate data, or interact with system APIs as part of a larger attack strategy. This can include using scripts for lateral movement, persistence, or evasion by executing them through the command shell."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.009",
            "attack_object_name": "Proc Memory",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Proc Memory injection attacks. For example, a script could be used to automate the process of identifying target processes, crafting the payload, and performing the memory injection. This makes scripts a tool or stepping stone in the execution of the Proc Memory injection technique, leveraging their ability to interact with system APIs and automate complex tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1223",
            "attack_object_name": "Compiled HTML File",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be embedded within CHM files to execute malicious code when the CHM file is opened. This technique abuses scripts as a tool to deliver and execute payloads, leveraging the script's ability to interact with system APIs and automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1650",
            "attack_object_name": "Acquire Access",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Acquire Access' technique as they may be used to automate the process of deploying backdoors or other malicious payloads once access to a system is acquired. Scripts can facilitate the installation of additional malware or the execution of commands on compromised systems, thereby serving as a tool to further the adversary's objectives after access has been acquired."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1601.001",
            "attack_object_name": "Patch System Image",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Patch System Image' technique as they may be used to automate the process of downloading, modifying, or deploying a compromised system image. Scripts can facilitate the execution of commands required to patch the system image, making them a tool in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1558.002",
            "attack_object_name": "Silver Ticket",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of forging Silver Tickets. An adversary may use a script to programmatically generate and deploy Silver Tickets, leveraging the script as a tool to facilitate the attack on Kerberos authentication systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1213",
            "attack_object_name": "Data from Information Repositories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the extraction of data from information repositories. Adversaries may leverage scripts to interact with APIs or databases to systematically retrieve sensitive information stored within these repositories. Therefore, scripts can be abused as tools to facilitate the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.009",
            "attack_object_name": "Clear Persistence",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Clear Persistence' technique as they may be used to automate the process of removing persistence artifacts. Adversaries might leverage scripts to execute commands that delete or modify persistence mechanisms, thus using scripts as a tool to further their attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1146",
            "attack_object_name": "Clear Command History",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to execute commands that clear command history as part of the 'Clear Command History' technique. Scripts may be used to automate the process of clearing command history to evade detection, making them a tool in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1555.004",
            "attack_object_name": "Windows Credential Manager",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of accessing and extracting credentials from the Windows Credential Manager. Adversaries may write scripts in languages like PowerShell or Python to interact with the Windows APIs or command-line tools to enumerate and retrieve credentials stored in the Credential Manager. Thus, scripts can be abused as a tool to facilitate the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1519",
            "attack_object_name": "Emond",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Emond technique as they may be used as the payload executed by the emond service when a defined event occurs. This allows adversaries to leverage scripts to perform malicious actions, such as executing commands with elevated privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1194",
            "attack_object_name": "Spearphishing via Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Spearphishing via Service' if the adversary sends a malicious script as an attachment or link through the service. The script itself is not the target but is used as a tool to execute malicious actions on the recipient's system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1505",
            "attack_object_name": "Server Software Component",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the T1505 technique to extend server software components. Scripts may be installed or executed as part of the malicious components to automate tasks or manipulate server functionality, thus serving as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1485",
            "attack_object_name": "Data Destruction",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by the Data Destruction technique as adversaries may write or execute scripts designed to overwrite or delete data, making it irrecoverable. Scripts can automate the process of data destruction across multiple systems, making them a primary victim of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1485",
            "attack_object_name": "Data Destruction",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Data Destruction technique by being used as tools to execute destructive commands or payloads on other systems. They can be leveraged to propagate data destruction actions across a network, thereby misusing the script for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1132.002",
            "attack_object_name": "Non-Standard Encoding",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement non-standard encoding schemes as part of their execution. Adversaries may use scripts to encode data or communications in a non-standard way, leveraging the script's flexibility and execution capabilities to evade detection and facilitate command and control operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556.001",
            "attack_object_name": "Domain Controller Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Domain Controller Authentication' by being used to automate the injection of false credentials or to deploy malware like Skeleton Key. Scripts may facilitate the attack by executing commands that alter the authentication process on a domain controller."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1537",
            "attack_object_name": "Transfer Data to Cloud Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the 'Transfer Data to Cloud Account' technique. Adversaries may leverage scripts to automate the process of transferring data to a cloud account they control. Scripts can be used to interact with cloud provider APIs, create backups, or generate anonymous file sharing links, thereby acting as a tool to execute the data exfiltration process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.006",
            "attack_object_name": "HTML Smuggling",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly JavaScript, are abused in HTML Smuggling to facilitate the delivery and execution of malicious payloads. The technique leverages JavaScript Blobs and HTML5 attributes to smuggle and execute malicious content, using scripts as a tool to bypass security measures and deliver payloads to the victim."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556.005",
            "attack_object_name": "Reversible Encryption",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be abused to implement the Reversible Encryption technique. An adversary may use scripts to modify Active Directory settings, such as enabling reversible password encryption, thereby using the script as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.010",
            "attack_object_name": "Command Obfuscation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are often abused by adversaries using Command Obfuscation to conceal malicious activities. By obfuscating scripts, attackers can evade detection mechanisms and make it challenging for defenders to analyze the script's true intent. This makes scripts a tool for executing obfuscated commands, rather than the direct target of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1130",
            "attack_object_name": "Install Root Certificate",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the installation of root certificates, especially in environments where scripts are used to configure systems or deploy software. An adversary could leverage a script to silently install a malicious root certificate, thereby abusing the script's execution capabilities to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1022",
            "attack_object_name": "Data Encrypted",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement the 'Data Encrypted' technique (T1022) by using them to automate the encryption process of data before exfiltration. Scripts can leverage encryption libraries or utilities to encrypt data, making them a tool for executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1070.004",
            "attack_object_name": "File Deletion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute file deletion commands as part of the File Deletion technique (T1070.004). Adversaries may leverage scripting languages to automate the deletion of files to cover their tracks, making scripts a tool for executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1189",
            "attack_object_name": "Drive-by Compromise",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts are directly targeted in Drive-by Compromise attacks as adversaries inject malicious scripts into legitimate websites. These scripts execute automatically when a user visits the compromised site, potentially exploiting vulnerabilities in the user's browser or plugins."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1189",
            "attack_object_name": "Drive-by Compromise",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused in Drive-by Compromise attacks by being used as a delivery mechanism for malicious code. The scripts themselves may not be the primary target, but they are leveraged to execute code on the client system, facilitating further exploitation or access to the system."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1498",
            "attack_object_name": "Network Denial of Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate Network Denial of Service attacks. For example, adversaries can use scripts to automate the generation of malicious traffic or to control botnets that participate in a Distributed Denial of Service (DDoS) attack. In this context, scripts serve as a tool to execute or orchestrate the attack, rather than being the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1651",
            "attack_object_name": "Cloud Administration Command",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused in the 'Cloud Administration Command' technique as they are used to execute commands within virtual machines. The technique leverages scripts to perform actions within the cloud environment, using them as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.016",
            "attack_object_name": "Installer Packages",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused by the 'Installer Packages' technique as they can be included in installer packages to execute malicious content. Adversaries may modify these scripts to run with elevated permissions during the installation process, thereby misusing them for persistence and privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1595.001",
            "attack_object_name": "Scanning IP Blocks",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of scanning IP blocks. An adversary may write or use a script to perform network reconnaissance by scanning IP ranges to gather information about active hosts and services. In this context, scripts are abused as tools to facilitate the scanning process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1158",
            "attack_object_name": "Hidden Files and Directories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to hide their presence or activities by placing them in hidden files or directories. This allows malicious scripts to evade detection by users and some security tools that do not check for hidden files, thus furthering an attack by maintaining persistence or avoiding analysis."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1221",
            "attack_object_name": "Template Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with Template Injection. While the technique itself targets document templates, scripts can be used as payloads fetched and executed when the document is loaded. This makes scripts a tool or stepping stone in the execution of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037.004",
            "attack_object_name": "RC Scripts",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The RC Scripts technique directly targets scripts as it involves modifying RC scripts to establish persistence. These scripts are the primary victim as adversaries alter them to execute malicious code during system startup, compromising the integrity and security of the script."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037.004",
            "attack_object_name": "RC Scripts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused in this technique as they are used as a tool to maintain persistence on a system. By modifying the RC scripts, adversaries leverage them to execute malicious activities upon system reboot, thus misusing the script's intended purpose for malicious persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1134",
            "attack_object_name": "Access Token Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of Access Token Manipulation by leveraging scripting capabilities to call Windows API functions or execute commands that modify access tokens. This makes scripts a tool that can be abused to facilitate Access Token Manipulation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1111",
            "attack_object_name": "Multi-Factor Authentication Interception",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1111 if they are used to automate the interception or logging of MFA credentials. For example, a script could be used to deploy a keylogger or to automate the extraction and relay of intercepted MFA codes. In this way, scripts serve as a tool to facilitate the execution of the MFA interception technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1159",
            "attack_object_name": "Launch Agent",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Launch Agent technique as they can be specified in the launch agent's property list files to be executed at user login. This allows adversaries to leverage scripts as a tool for persistence, executing them with user-level privileges whenever the user logs in."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.002",
            "attack_object_name": "Software Packing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using 'Software Packing' to obfuscate or conceal malicious scripts. By packing scripts, adversaries can evade detection mechanisms that rely on static analysis, thus using scripts as a tool to further their attacks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.007",
            "attack_object_name": "Serverless",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Serverless technique (T1584.007) as they are often used to automate and execute tasks within serverless environments. Adversaries may leverage scripts to deploy or manipulate serverless functions, thus using them as a tool to further their attack by hiding infrastructure or redirecting traffic."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1071.001",
            "attack_object_name": "Web Protocols",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to facilitate the use of Web Protocols (T1071.001) for malicious communication. Scripts can be crafted to automate the sending and receiving of data over HTTP/S or WebSocket, effectively using these protocols to exfiltrate data or receive commands while mimicking normal traffic. Thus, scripts can serve as a tool for executing this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.005",
            "attack_object_name": "Visual Basic",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "The Visual Basic technique (T1059.005) directly targets scripts as it involves the use of VBScript or VBA to execute malicious commands. Scripts written in VB can be manipulated or injected with malicious code, making them the primary victim of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1059.005",
            "attack_object_name": "Visual Basic",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in VBScript or VBA, can be abused by adversaries to automate malicious behaviors or to serve as a vehicle for executing further attacks. This includes embedding malicious VBScript in documents or web pages to exploit other systems, making scripts a tool for furthering an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.005",
            "attack_object_name": "Hidden File System",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to implement or interact with hidden file systems. An adversary might use a script to automate the creation or management of a hidden file system, leveraging the script to execute commands that manipulate file system structures for concealment purposes. Thus, scripts can be abused as tools to facilitate the Hidden File System technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1543.002",
            "attack_object_name": "Systemd Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Systemd Service technique as they can be specified in the service configuration files to be executed as part of the service's lifecycle (e.g., during start, stop, or reload). This allows adversaries to leverage scripts as a tool to execute malicious payloads, maintain persistence, or escalate privileges, making scripts a means to further an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1136",
            "attack_object_name": "Create Account",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to automate the process of creating accounts, especially if they have the necessary permissions or are executed in a context that allows account creation. Adversaries may leverage scripts to create accounts as part of their attack strategy, using the script as a tool to facilitate this process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.013",
            "attack_object_name": "XDG Autostart Entries",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the XDG Autostart Entries technique as they can be specified in the Exec directive of a .desktop file to execute malicious commands or scripts upon user login. This allows adversaries to leverage scripts as a means to establish persistence or execute malicious activities when the user's desktop environment loads."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1584.004",
            "attack_object_name": "Server",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1584.004 'Server' by being used as tools to automate tasks on compromised servers. Adversaries may deploy scripts on these servers to facilitate command and control, data exfiltration, or further attacks, leveraging the flexibility and automation capabilities of scripts to enhance their operations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1526",
            "attack_object_name": "Cloud Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Cloud Service Discovery by being used as tools to automate the enumeration of cloud services. Adversaries may write or utilize scripts to interact with cloud APIs, such as the Microsoft Graph API or AWS SDKs, to systematically discover cloud resources and services. This makes scripts a means to facilitate the discovery process rather than being the direct target of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1151",
            "attack_object_name": "Space after Filename",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Space after Filename' technique when adversaries disguise a malicious script as a benign file type. By appending a space to the filename, an attacker can trick users into executing a script that appears to be a non-executable file type. This misuse of the script as a tool for executing malicious code aligns with the abuse category, as the script is leveraged to further an attack rather than being the direct target."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1018",
            "attack_object_name": "Remote System Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to perform Remote System Discovery. Scripts written in languages like Python, Bash, or PowerShell can automate the process of discovering remote systems by executing commands or using APIs to gather network information. This makes scripts a useful tool for adversaries to further their reconnaissance efforts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1046",
            "attack_object_name": "Network Service Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Network Service Discovery by being used to automate the discovery process. Adversaries may write or use existing scripts to execute network scans or queries to identify services running on remote hosts. In this way, scripts serve as a tool to facilitate the discovery process, making them an asset that can be abused by this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1518",
            "attack_object_name": "Software Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Software Discovery by being used to automate the process of enumerating installed software and versions. Adversaries may leverage scripts to execute commands that gather this information, thus using scripts as tools to facilitate the discovery process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.005",
            "attack_object_name": "Thread Local Storage",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to facilitate the TLS injection technique by preparing and executing the necessary steps to manipulate process memory and inject code. For example, a script could automate the allocation and writing to specific memory offsets required for TLS callback manipulation, effectively abusing the script's capabilities to perform process injection."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1622",
            "attack_object_name": "Debugger Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Debugger Evasion technique (T1622) as adversaries may write scripts that include checks for debuggers to evade detection. Scripts can be used as a tool to implement debugger evasion logic, making them a means to execute this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1036.006",
            "attack_object_name": "Space after Filename",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Space after Filename' technique when adversaries rename script files with a space at the end of the filename to disguise their true nature. This can trick users into executing scripts that appear benign, thus using the script as a tool to execute malicious actions."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.007",
            "attack_object_name": "Re-opened Applications",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'Re-opened Applications' technique as they can be added to the plist file to be executed upon user login. This makes scripts a tool for persistence, leveraging their ability to execute code automatically when the user logs in."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1608.006",
            "attack_object_name": "SEO Poisoning",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in SEO Poisoning by embedding malicious content or keywords to manipulate search engine rankings. Adversaries may use scripts to automate the process of keyword stuffing or to create cloaking mechanisms that serve different content to search engines and users, thus leveraging scripts as tools in the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1550.002",
            "attack_object_name": "Pass the Hash",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Pass the Hash' technique as they can be used to automate the process of passing the hash. Scripts may be utilized to execute commands that leverage stolen hashes to authenticate and perform actions on systems, thus facilitating lateral movement or other malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1052",
            "attack_object_name": "Exfiltration Over Physical Medium",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Exfiltration Over Physical Medium' technique by automating the process of copying sensitive data to a physical medium. For example, a script could be used to gather and prepare data for exfiltration onto a USB drive, thereby facilitating the exfiltration process without directly being the target of the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.002",
            "attack_object_name": "DLL Side-Loading",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of DLL Side-Loading by being used to automate the process of placing malicious DLLs alongside legitimate applications. Scripts may be employed to facilitate the setup of the environment needed for DLL side-loading, such as copying files to specific directories or executing the legitimate application that will load the malicious DLL."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1105",
            "attack_object_name": "Ingress Tool Transfer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Ingress Tool Transfer technique as they can be used to facilitate the transfer of tools or files. For example, PowerShell scripts can be used to download files from external sources into a compromised environment, thereby acting as a tool to execute the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1216.002",
            "attack_object_name": "SyncAppvPublishingServer",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique T1216.002 abuses the SyncAppvPublishingServer.vbs script to proxy the execution of malicious PowerShell commands. This script is used as a tool to bypass execution restrictions and evade defenses, rather than being the direct target of an attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1098.002",
            "attack_object_name": "Additional Email Delegate Permissions",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, particularly those written in PowerShell, can be used to automate the process of granting additional email delegate permissions. This means scripts can be abused as tools to facilitate this technique, enabling adversaries to maintain persistent access to email accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588.003",
            "attack_object_name": "Code Signing Certificates",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using code signing certificates obtained through T1588.003. By signing malicious scripts with a legitimate or stolen certificate, adversaries can bypass security controls and gain trust from users and security tools, facilitating the execution of malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1126",
            "attack_object_name": "Network Share Connection Removal",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the removal of network share connections as part of the Network Share Connection Removal technique (T1126). This means scripts can be abused as tools to execute this technique, facilitating the cleanup of traces by adversaries. The scripts themselves are not the direct target but are leveraged to carry out the removal process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1648",
            "attack_object_name": "Serverless Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Serverless Execution as they may be used to automate tasks or execute arbitrary code within serverless environments. Adversaries may leverage scripts to create or manipulate serverless functions for malicious purposes, such as data exfiltration or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1548.006",
            "attack_object_name": "TCC Manipulation",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts, such as AppleScript, can be abused in the context of TCC Manipulation. For example, a malicious AppleScript can be executed under an application with existing TCC permissions, thereby inheriting those permissions and accessing restricted data or services without user prompts. This makes scripts a tool or stepping stone in the execution of the TCC Manipulation technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1084",
            "attack_object_name": "Windows Management Instrumentation Event Subscription",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the T1084 technique as they may be used to execute arbitrary code when an event occurs. Adversaries can leverage scripts to perform actions when triggered by WMI event subscriptions, thus using scripts as a tool to maintain persistence or execute malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1160",
            "attack_object_name": "Launch Daemon",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Launch Daemon technique as they can be pointed to by the plist files used by launchd. If an adversary modifies a launch daemon's plist to execute a malicious script, the script is being used as a tool to achieve persistence or privilege escalation, thus abusing the script as part of the attack process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.008",
            "attack_object_name": "Ptrace System Calls",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the Ptrace System Calls technique. An adversary might use a script to automate the process of attaching to and modifying a running process using ptrace system calls. The script acts as a tool to execute the technique, leveraging its ability to interact with system APIs and automate complex tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1653",
            "attack_object_name": "Power Settings",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the manipulation of power settings, such as using PowerShell scripts to execute 'powercfg' commands. In this way, scripts are abused as a tool to implement the 'Power Settings' technique, facilitating the adversary's goal of maintaining access."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1027.007",
            "attack_object_name": "Dynamic API Resolution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using Dynamic API Resolution to obfuscate malicious API calls within the script. This allows the script to act as a tool for executing concealed malicious functionalities, making it difficult for defensive measures to analyze and detect malicious behavior."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1021.001",
            "attack_object_name": "Remote Desktop Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with RDP access. Once an adversary gains access to a system via RDP, they may execute scripts to automate malicious activities, manipulate data, or further exploit the system. Thus, scripts can be used as tools to facilitate the attack after initial access is gained through RDP."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1037.001",
            "attack_object_name": "Logon Script (Windows)",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The Logon Script (Windows) technique abuses scripts by leveraging them to maintain persistence on a system. Scripts are used as a tool to execute malicious activities whenever a user logs on, thus misusing the script's functionality for persistence."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.015",
            "attack_object_name": "ListPlanting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the ListPlanting technique by automating the process of injecting code into another process's memory space. Scripts can be used to perform the necessary API calls and manage the payload delivery, making them a tool for executing the ListPlanting attack on a target process."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1665",
            "attack_object_name": "Hide Infrastructure",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Hide Infrastructure' technique by being used to automate the manipulation of network traffic or to deploy configurations that help conceal C2 infrastructure. For example, scripts could be used to configure proxies, VPNs, or other network settings that help disguise malicious activity."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1484",
            "attack_object_name": "Domain or Tenant Policy Modification",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Domain or Tenant Policy Modification' as they might be used to automate the modification of domain or tenant policies. An adversary could leverage scripts to execute commands that alter configurations, such as modifying GPOs or domain trusts, as part of an attack strategy to evade defenses or escalate privileges."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1220",
            "attack_object_name": "XSL Script Processing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts are abused in the XSL Script Processing technique by embedding them within XSL files. This allows adversaries to execute arbitrary scripts, such as JavaScript or VBScript, through trusted utilities like msxsl.exe or Windows Management Instrumentation (WMI), thereby misusing scripts to bypass application controls and execute malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1596.005",
            "attack_object_name": "Scan Databases",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the 'Scan Databases' technique if they are used to automate the process of querying scan databases for reconnaissance purposes. Adversaries may leverage scripts to efficiently gather and process data from these databases, using the script as a tool to facilitate their reconnaissance activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.001",
            "attack_object_name": "Hidden Files and Directories",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using the 'Hidden Files and Directories' technique to hide malicious scripts from detection. By marking scripts as hidden, adversaries can leverage them as tools for further attacks, such as executing hidden malicious code or maintaining persistence without being easily detected by users or security systems."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1137.002",
            "attack_object_name": "Office Test",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Office Test technique by being used to automate the insertion of malicious DLLs into the Office Test Registry key. This allows adversaries to leverage scripts to facilitate the persistence mechanism provided by the Office Test technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1587",
            "attack_object_name": "Develop Capabilities",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the 'Develop Capabilities' technique as they may be used as a medium for developing and testing malicious capabilities. Scripts can be crafted to automate the creation or deployment of malware, exploits, or other tools that adversaries develop."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1173",
            "attack_object_name": "Dynamic Data Exchange",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Dynamic Data Exchange (DDE) technique as a means to execute arbitrary commands. Adversaries may leverage scripts to automate the process of embedding DDE commands into documents or to execute DDE-based payloads once delivered to a target system. Scripts can facilitate the misuse of DDE by automating the creation or execution of malicious documents that exploit this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.003",
            "attack_object_name": "NTDS",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of accessing or copying the NTDS.dit file. For example, scripts written in PowerShell or Python (like secretsdump.py) can be used to interact with the system and extract sensitive information from the NTDS file, making scripts a tool that can be abused to facilitate this attack technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1001.002",
            "attack_object_name": "Steganography",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Steganography technique (T1001.002) as they may be used to automate the process of embedding or extracting hidden data within files. Scripts can facilitate the execution of steganographic methods, making them a tool for adversaries to conceal command and control communications or other malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1204.001",
            "attack_object_name": "Malicious Link",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by 'Malicious Link' techniques when users are tricked into downloading and executing malicious scripts. These scripts can then be used to automate further attacks, manipulate data, or interact with system APIs maliciously."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1550.001",
            "attack_object_name": "Application Access Token",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of stealing or using application access tokens. For example, a script could be designed to extract tokens from a compromised system or automate API requests using stolen tokens. In this context, scripts are abused as tools to facilitate the misuse of application access tokens, enabling adversaries to perform unauthorized actions on behalf of legitimate users."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1547.008",
            "attack_object_name": "LSASS Driver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of modifying or adding LSASS drivers for persistence. An adversary might use a script to deploy malicious drivers or automate the hijacking of execution flow within the LSASS process, making scripts a tool in the execution of this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1569.002",
            "attack_object_name": "Service Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Service Execution technique when adversaries use scripts to automate the creation or manipulation of services. For instance, a script could be used to automate the deployment of malicious services or to execute commands via service control utilities like 'sc.exe'. In this context, scripts serve as tools to facilitate the execution of malicious payloads through services."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1078.004",
            "attack_object_name": "Cloud Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Cloud Accounts' technique to automate the exploitation of compromised cloud accounts. For example, scripts may be used to automate the process of accessing cloud resources using stolen credentials, to perform actions such as data exfiltration, or to maintain persistence by creating additional cloud credentials. Therefore, scripts can serve as tools that facilitate the abuse of compromised cloud accounts."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1480.001",
            "attack_object_name": "Environmental Keying",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries using Environmental Keying to execute malicious payloads only in specific environments. This technique leverages scripts to ensure that the payload is decrypted and executed only when certain environmental conditions are met, thus using the script as a tool to evade detection and analysis."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1008",
            "attack_object_name": "Fallback Channels",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement fallback channels. For instance, a script could be used to automate the switching between primary and alternate communication channels, thereby facilitating the Fallback Channels technique. This misuse of scripts allows adversaries to maintain command and control by leveraging scripts to dynamically adjust communication paths."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.004",
            "attack_object_name": "NTFS File Attributes",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to interact with NTFS file attributes, for example, by using them to hide or retrieve malicious data stored in these attributes. This makes scripts a tool that adversaries can leverage to execute the NTFS File Attributes technique, thus abusing the script to further their attack goals."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1558.003",
            "attack_object_name": "Kerberoasting",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of Kerberoasting by automating the process of requesting and capturing Kerberos tickets, as well as performing offline brute force attacks on the captured ticket hashes. Scripts can facilitate the execution of Kerberoasting attacks by interacting with the Kerberos protocol and performing necessary computations."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1096",
            "attack_object_name": "NTFS File Attributes",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to interact with NTFS file attributes, such as storing or retrieving data from Alternate Data Streams (ADS). An adversary could use a script to automate the process of hiding or extracting malicious data within NTFS attributes, leveraging the script as a tool to facilitate this technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1003.006",
            "attack_object_name": "DCSync",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the DCSync attack. For example, a script could be used to automate the process of executing DCSync commands using tools like Mimikatz, thereby leveraging the script to perform credential extraction from a domain controller."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1124",
            "attack_object_name": "System Time Discovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to execute the System Time Discovery technique by leveraging scripting languages like Python, Bash, or PowerShell to query system time information. This makes scripts a tool that can be abused to perform this technique, facilitating further attacks such as scheduling tasks or determining system locality."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1053.002",
            "attack_object_name": "At",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the 'At' technique as they can be scheduled for execution using the 'at' utility. This allows adversaries to misuse scripts to perform malicious activities such as persistence, remote execution, or privilege escalation by scheduling their execution at specific times."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1035",
            "attack_object_name": "Service Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Service Execution technique as they can be executed through Windows services. This allows adversaries to misuse scripts as a means to achieve persistence or escalate privileges by leveraging service-related execution capabilities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1055.001",
            "attack_object_name": "Dynamic-link Library Injection",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate the process of DLL injection. For instance, a script written in a language like PowerShell or Python can leverage system API calls to perform DLL injection into a target process. In this way, scripts are abused as tools to facilitate the DLL injection technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1086",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts, particularly PowerShell scripts, are directly targeted by adversaries using the PowerShell technique (T1086). Attackers exploit vulnerabilities in scripts to execute malicious code, automate tasks for data exfiltration, or manipulate system configurations. Unauthorized execution of PowerShell scripts can lead to compromising the script itself, resulting in data breaches or privilege escalation."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1086",
            "attack_object_name": "PowerShell",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "PowerShell scripts are often abused by adversaries as a tool to further their attacks. Scripts can be used to automate malicious activities, such as lateral movement across a network, persistence, and evasion of security controls. The flexibility and power of PowerShell make it a valuable asset for attackers to misuse in executing commands and scripts on remote systems without direct interaction with the PowerShell executable."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1588.005",
            "attack_object_name": "Exploits",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by exploits when adversaries seek to take advantage of vulnerabilities within the script itself. This can include exploiting bugs or weaknesses in the script's code to execute unauthorized actions, escalate privileges, or access sensitive data. Scripts are often used to automate tasks and interact with system APIs, making them a potential target for exploitation if they contain vulnerabilities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556",
            "attack_object_name": "Modify Authentication Process",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to modify authentication processes by executing commands or scripts that alter authentication mechanisms or configurations. For example, a malicious script could be used to inject code into authentication modules or modify configuration files, thereby facilitating unauthorized access or credential theft."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.017",
            "attack_object_name": "Udev Rules",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the Udev Rules technique as they can be used as the malicious content executed by the udev rule. Adversaries may use scripting commands under the action key `RUN+=` to execute scripts as part of the malicious actions triggered by udev rules, effectively using scripts as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1056.004",
            "attack_object_name": "Credential API Hooking",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to implement or facilitate Credential API Hooking by executing code that sets up hooks or modifies the import address table (IAT) to intercept API calls. In this context, scripts act as a tool to deploy the hooking mechanism, thus being abused by the technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1490",
            "attack_object_name": "Inhibit System Recovery",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute commands that inhibit system recovery. For example, a malicious script could be crafted to run commands that delete volume shadow copies or disable recovery features, thereby leveraging the script as a tool to perform the 'Inhibit System Recovery' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1546.007",
            "attack_object_name": "Netsh Helper DLL",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the Netsh Helper DLL technique to automate the process of registering malicious DLLs or executing netsh.exe with specific parameters. This abuse leverages scripts to facilitate the persistence mechanism provided by the Netsh Helper DLL technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1566.003",
            "attack_object_name": "Spearphishing via Service",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of 'Spearphishing via Service' if an adversary sends a malicious script as an attachment or link through a third-party service. The script could be used to execute malicious actions on the target's system once opened or executed by the user, leveraging the script as a tool to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1090.001",
            "attack_object_name": "Internal Proxy",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement or configure internal proxies. For example, a script written in a language like Python or PowerShell could be used to set up proxy configurations or automate the redirection of traffic within a compromised network. In this context, scripts serve as tools to facilitate the Internal Proxy technique, making them susceptible to misuse for malicious activities."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1216",
            "attack_object_name": "System Script Proxy Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "The technique 'System Script Proxy Execution' abuses scripts by using them as a proxy to execute malicious files. This allows adversaries to bypass application controls and signature validation, leveraging the script's trusted status to further the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1094",
            "attack_object_name": "Custom Command and Control Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries to implement or facilitate custom command and control protocols. Scripts written in languages like Python, Bash, or PowerShell can be used to create or execute custom communication protocols, making them a tool for adversaries to establish and maintain command and control channels."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1102.001",
            "attack_object_name": "Dead Drop Resolver",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of the Dead Drop Resolver technique by being used to automate the retrieval and processing of information from dead drop resolvers. Scripts may be used to parse and decode the obfuscated/encoded domains or IP addresses hosted on these web services, facilitating the establishment of command and control channels. Thus, scripts serve as a tool to further the attack by interacting with the dead drop resolvers."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1118",
            "attack_object_name": "InstallUtil",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by the InstallUtil technique as they may be used to generate or manipulate .NET binaries that are then executed using InstallUtil. This allows adversaries to leverage scripts as a tool to execute malicious code through a trusted utility, thus abusing the script's capability to interact with system APIs or automate tasks."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1001.001",
            "attack_object_name": "Junk Data",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to implement the Junk Data technique by inserting meaningless data into command and control protocols. This misuse of scripts helps adversaries obfuscate their communications and evade detection."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1043",
            "attack_object_name": "Commonly Used Port",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Commonly Used Port' technique. Adversaries may use scripts to automate the process of establishing network communication over commonly used ports. This can help them blend malicious traffic with legitimate traffic, thereby evading detection. Scripts can facilitate the misuse of network ports by executing commands or payloads that leverage these ports for unauthorized communication."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1552.007",
            "attack_object_name": "Container API",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to automate interactions with container APIs, such as the Docker or Kubernetes APIs. An adversary may abuse scripts to execute API calls that gather credentials or other sensitive information from container environments. Thus, scripts can be misused as a tool to facilitate the execution of the T1552.007 technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1505.001",
            "attack_object_name": "SQL Stored Procedures",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be used to interact with SQL databases, including executing stored procedures. Adversaries might abuse scripts to automate the execution of malicious SQL stored procedures, thereby using scripts as a tool to further their attack on SQL database servers."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1556.004",
            "attack_object_name": "Network Device Authentication",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts could potentially be abused in the context of 'Network Device Authentication' if they are used to automate the process of modifying system images or deploying the implanted code to network devices. Scripts could facilitate the execution of this technique by automating the steps required to patch the system image and bypass authentication."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1561.001",
            "attack_object_name": "Disk Content Wipe",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute the Disk Content Wipe technique. An adversary may use a script to automate the process of wiping disk content by executing commands or leveraging tools that perform the wipe. In this case, the script acts as a tool to facilitate the attack on storage devices."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1213.005",
            "attack_object_name": "Messaging Applications",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Messaging Applications' technique by being used to automate the extraction or processing of data from messaging platforms. For example, scripts could be used to parse chat logs or automate the retrieval of sensitive information shared within messaging applications, thereby facilitating the adversary's efforts to gather intelligence or exfiltrate data."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1048.003",
            "attack_object_name": "Exfiltration Over Unencrypted Non-C2 Protocol",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to facilitate the exfiltration of data over unencrypted non-C2 protocols. An adversary might use a script to automate the process of encoding and sending data through protocols like HTTP, FTP, or DNS, leveraging the script as a tool to execute the exfiltration technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1078.003",
            "attack_object_name": "Local Accounts",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused by adversaries who have obtained local account credentials to execute malicious scripts for furthering their attack objectives. For example, once an adversary gains access to a system using local account credentials, they can use scripts to automate tasks such as credential dumping, privilege escalation, or lateral movement. Thus, scripts can be leveraged as tools in conjunction with the 'Local Accounts' technique."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "targeted-by",
            "comments": "Scripts can be directly targeted by adversaries using the Exploitation for Defense Evasion technique. Adversaries may exploit vulnerabilities within scripts to bypass security features, execute unauthorized code, or manipulate script behavior to evade detection. This can lead to the compromise of the script, allowing adversaries to gain unauthorized access or control."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can also be abused by adversaries as part of the Exploitation for Defense Evasion technique. Once a script is compromised or manipulated, it can be used as a tool to further evade defenses, such as disabling security software, altering logs, or facilitating lateral movement within a network. The script itself is not the primary target, but rather a means to achieve broader attack objectives."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1127",
            "attack_object_name": "Trusted Developer Utilities Proxy Execution",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in the context of T1127 as they can be used as payloads that are executed through trusted developer utilities. This allows adversaries to misuse scripts to execute malicious activities under the guise of legitimate processes, effectively bypassing security controls."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1529",
            "attack_object_name": "System Shutdown/Reboot",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to execute system shutdown or reboot commands as part of the System Shutdown/Reboot technique. Adversaries may leverage scripts to automate the execution of these commands, using the script as a tool to disrupt system availability."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1218.014",
            "attack_object_name": "MMC",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the MMC technique by being embedded within or called by malicious .msc files executed through MMC. Adversaries may use scripts as part of the payload or execution chain when leveraging MMC to perform malicious activities, thus using scripts as a tool to further their attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1564.010",
            "attack_object_name": "Process Argument Spoofing",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with Process Argument Spoofing when they are used to execute processes with specific command-line arguments. An adversary might use a script to launch a process with benign arguments, and then employ Process Argument Spoofing to alter these arguments in memory for malicious purposes, thus leveraging the script as a tool to facilitate the attack."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1077",
            "attack_object_name": "Windows Admin Shares",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused in conjunction with the 'Windows Admin Shares' technique. Adversaries may use scripts to automate the process of connecting to admin shares, transferring files, or executing commands remotely on a compromised system. In this context, scripts serve as tools to facilitate the misuse of admin shares for lateral movement or remote execution."
        },
        {
            "capability_id": "Script",
            "capability_group": "Applications & Workloads",
            "capability_description": "A Script refers to a set of instructions written in a scripting language like Python, Bash, or PowerShell that can be executed directly by an interpreter without needing to be compiled or installed. Scripts are often used for automating tasks, manipulating data, or interacting with system APIs. While scripts provide convenience and flexibility, they also present significant security challenges. These include potential unauthorized execution, script vulnerabilities, and leakage of sensitive information embedded in the script. Security considerations include the configuration of script execution controls, encryption of sensitive data within the script, and the security of the systems where the script is stored and executed. Threat vectors can range from code injection attacks, privilege escalation, to data breaches.",
            "attack_object_id": "T1574.012",
            "attack_object_name": "COR_PROFILER",
            "references": [],
            "mapping_type": "abused-by",
            "comments": "Scripts can be abused to set the COR_PROFILER environment variable, which can then be used to hijack .NET processes. This makes scripts a tool for executing the COR_PROFILER technique, leveraging their ability to modify environment variables and execute commands."
        }
    ]
}